import { PropType } from "vue";
import { TreeState, TreeViewItem, _InternalItem } from "./types";
declare const _default: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    item: {
        type: PropType<_InternalItem>;
        required: true;
    };
    isCheckable: {
        type: BooleanConstructor;
    };
    canRename: {
        type: BooleanConstructor;
    };
    checkboxStyle: {
        type: StringConstructor;
    };
    lazyLoad: {
        type: BooleanConstructor;
    };
    hideGuideLines: {
        type: BooleanConstructor;
    };
}>, {
    styles: import("vue").ComputedRef<Record<string, boolean | undefined>>;
    checkbox: import("vue").Ref<HTMLInputElement | undefined, HTMLInputElement | undefined>;
    parent: import("vue").ComputedRef<TreeViewItem>;
    treeState: TreeState;
    isRenaming: import("vue").Ref<boolean, boolean>;
    renameBox: import("vue").Ref<HTMLInputElement | undefined, HTMLInputElement | undefined>;
    updateCheckState: () => void;
    beginRenaming: () => void;
    finishRenaming: () => void;
    toggleExpand: (shouldSet?: boolean) => void;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("on-rename" | "onContextMenu")[], "on-rename" | "onContextMenu", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    item: {
        type: PropType<_InternalItem>;
        required: true;
    };
    isCheckable: {
        type: BooleanConstructor;
    };
    canRename: {
        type: BooleanConstructor;
    };
    checkboxStyle: {
        type: StringConstructor;
    };
    lazyLoad: {
        type: BooleanConstructor;
    };
    hideGuideLines: {
        type: BooleanConstructor;
    };
}>> & Readonly<{
    "onOn-rename"?: ((...args: any[]) => any) | undefined;
    onOnContextMenu?: ((...args: any[]) => any) | undefined;
}>, {
    isCheckable: boolean;
    canRename: boolean;
    lazyLoad: boolean;
    hideGuideLines: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default _default;
