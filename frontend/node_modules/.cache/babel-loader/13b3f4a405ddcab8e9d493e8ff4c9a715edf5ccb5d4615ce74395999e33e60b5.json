{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport axios from \"axios\";\nimport Chart from \"chart.js/auto\"; // Chart.js 자동 로드\n\nexport default {\n  data() {\n    return {\n      selectedDb: null,\n      tbList: [],\n      tablespaces: [],\n      searchQuery: \"\"\n    };\n  },\n  computed: {\n    filteredTablespaces() {\n      return this.tablespaces.filter(ts => ts.id.tsName.toLowerCase().includes(this.searchQuery.toLowerCase()));\n    }\n  },\n  methods: {\n    formatNumber(number) {\n      return number.toLocaleString(); // 천 단위 구분 기호 추가\n    },\n    fetchDbList() {\n      axios.get(\"/api/tb/list\").then(res => {\n        this.tbList = res.data;\n        if (this.tbList.length > 0) {\n          this.selectedDb = this.tbList[0];\n          this.fetchTablespaces(this.selectedDb);\n        }\n      }).catch(error => {\n        console.error(\"Error fetching DB list:\", error);\n      });\n    },\n    fetchTablespaces(dbName) {\n      axios.get(`/api/tb/${dbName}/tablespaces`).then(res => {\n        this.tablespaces = res.data || [];\n        this.$nextTick(() => {\n          this.tablespaces.forEach(ts => {\n            this.drawBarChart(ts); // 차트 그리기\n          });\n        });\n      }).catch(error => {\n        console.error(\"테이블스페이스 데이터 가져오기 실패:\", error);\n      });\n    },\n    drawBarChart(ts) {\n      const canvasId = 'chart-' + ts.id.tsName;\n      const ctx = document.getElementById(canvasId).getContext('2d');\n\n      // 기존 차트가 있으면 파괴\n      if (this.chart) {\n        this.chart.destroy();\n      }\n\n      // 새 차트 생성\n      this.chart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: ['사용률'],\n          // 차트 레이블\n          datasets: [{\n            label: '사용률',\n            data: [ts.usedRate],\n            // 사용률 데이터\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            // 배경 색상\n            borderColor: 'rgb(75, 192, 192)',\n            // 테두리 색상\n            borderRadius: 5,\n            // 모서리 둥글게\n            borderWidth: 1 // 테두리 두께\n          }]\n        },\n        options: {\n          responsive: true,\n          indexAxis: 'y',\n          // 가로 차트\n          scales: {\n            x: {\n              min: 0,\n              max: 100,\n              // 100%까지 표시\n              ticks: {\n                display: false // 0과 100을 숨깁니다.\n              }\n            },\n            y: {\n              beginAtZero: true,\n              display: false // Y축 표시 안 함\n            }\n          },\n          plugins: {\n            legend: {\n              display: false // 범례 숨기기\n            },\n            datalabels: {\n              // 실제 사용률 값 표시 (바 오른쪽에)\n              display: true,\n              align: 'end',\n              // 바의 끝 부분에 텍스트 표시\n              anchor: 'end',\n              // 텍스트가 바 끝에 앵커가 맞도록\n              formatter: value => `${value}%`,\n              // 사용률 값에 \"%\" 추가\n              color: 'rgb(75, 192, 192)',\n              // 텍스트 색상\n              font: {\n                weight: 'bold',\n                size: 14\n              }\n            }\n          }\n        }\n      });\n    }\n  },\n  mounted() {\n    this.fetchDbList();\n  }\n};","map":{"version":3,"names":["axios","Chart","data","selectedDb","tbList","tablespaces","searchQuery","computed","filteredTablespaces","filter","ts","id","tsName","toLowerCase","includes","methods","formatNumber","number","toLocaleString","fetchDbList","get","then","res","length","fetchTablespaces","catch","error","console","dbName","$nextTick","forEach","drawBarChart","canvasId","ctx","document","getElementById","getContext","chart","destroy","type","labels","datasets","label","usedRate","backgroundColor","borderColor","borderRadius","borderWidth","options","responsive","indexAxis","scales","x","min","max","ticks","display","y","beginAtZero","plugins","legend","datalabels","align","anchor","formatter","value","color","font","weight","size","mounted"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\TablespacesList.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h2>{{ selectedDb }} DB - 테이블스페이스 리스트</h2>\r\n\r\n    <!-- DB 목록을 보여주는 드롭다운 -->\r\n    <div class=\"select-container\">\r\n      <select v-model=\"selectedDb\" @change=\"fetchTablespaces(selectedDb)\">\r\n        <option v-for=\"(db, index) in tbList\" :key=\"index\" :value=\"db\">\r\n          {{ db }}\r\n        </option>\r\n      </select>\r\n    </div>\r\n\r\n    <table class=\"tablespace-table\">\r\n      <thead>\r\n        <tr>\r\n          <th>Tablespace 이름</th>\r\n          <th>TOTAL(MB)</th>\r\n          <th>USED(MB)</th>\r\n          <th>사용률 (%)</th>\r\n          <th>FREE(MB)</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr\r\n          v-for=\"ts in filteredTablespaces\"\r\n          :key=\"ts.id.tsName\"\r\n        >\r\n          <td>{{ ts.id.tsName }}</td>\r\n          <td>{{ formatNumber(ts.totalSize) }}</td>\r\n          <td>{{ formatNumber(ts.usedSize) }}</td>\r\n          <td>\r\n            <!-- 사용률 차트 -->\r\n            <div class=\"used-rate-container\">\r\n              <canvas :id=\"'chart-' + ts.id.tsName\" class=\"rate-chart\"></canvas> <!-- 차트 추가 -->\r\n            </div>\r\n          </td>\r\n          <td>{{ formatNumber(ts.freeSize) }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <p v-if=\"filteredTablespaces.length === 0\">검색 결과가 없습니다.</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport Chart from \"chart.js/auto\"; // Chart.js 자동 로드\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedDb: null,\r\n      tbList: [],\r\n      tablespaces: [],\r\n      searchQuery: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    filteredTablespaces() {\r\n      return this.tablespaces.filter((ts) =>\r\n        ts.id.tsName.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n      );\r\n    },\r\n  },\r\n  methods: {\r\n    formatNumber(number) {\r\n      return number.toLocaleString(); // 천 단위 구분 기호 추가\r\n    },\r\n    fetchDbList() {\r\n      axios\r\n        .get(\"/api/tb/list\")\r\n        .then((res) => {\r\n          this.tbList = res.data;\r\n          if (this.tbList.length > 0) {\r\n            this.selectedDb = this.tbList[0];\r\n            this.fetchTablespaces(this.selectedDb);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching DB list:\", error);\r\n        });\r\n    },\r\n    fetchTablespaces(dbName) {\r\n      axios\r\n        .get(`/api/tb/${dbName}/tablespaces`)\r\n        .then((res) => {\r\n          this.tablespaces = res.data || [];\r\n          this.$nextTick(() => {\r\n            this.tablespaces.forEach((ts) => {\r\n              this.drawBarChart(ts); // 차트 그리기\r\n            });\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"테이블스페이스 데이터 가져오기 실패:\", error);\r\n        });\r\n    },\r\n\r\n    drawBarChart(ts) {\r\n      const canvasId = 'chart-' + ts.id.tsName;\r\n      const ctx = document.getElementById(canvasId).getContext('2d');\r\n\r\n      // 기존 차트가 있으면 파괴\r\n      if (this.chart) {\r\n        this.chart.destroy();\r\n      }\r\n\r\n      // 새 차트 생성\r\n      this.chart = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: ['사용률'], // 차트 레이블\r\n          datasets: [{\r\n            label: '사용률',\r\n            data: [ts.usedRate], // 사용률 데이터\r\n            backgroundColor: 'rgba(75, 192, 192, 0.2)', // 배경 색상\r\n            borderColor: 'rgb(75, 192, 192)', // 테두리 색상\r\n            borderRadius: 5,  // 모서리 둥글게\r\n            borderWidth: 1,   // 테두리 두께\r\n          }],\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          indexAxis: 'y',  // 가로 차트\r\n          scales: {\r\n            x: {\r\n              min: 0,\r\n              max: 100,  // 100%까지 표시\r\n              ticks: {\r\n                display: false,  // 0과 100을 숨깁니다.\r\n              },\r\n            },\r\n            y: {\r\n              beginAtZero: true,\r\n              display: false,  // Y축 표시 안 함\r\n            },\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              display: false,  // 범례 숨기기\r\n            },\r\n            datalabels: {\r\n              // 실제 사용률 값 표시 (바 오른쪽에)\r\n              display: true,\r\n              align: 'end',  // 바의 끝 부분에 텍스트 표시\r\n              anchor: 'end', // 텍스트가 바 끝에 앵커가 맞도록\r\n              formatter: (value) => `${value}%`,  // 사용률 값에 \"%\" 추가\r\n              color: 'rgb(75, 192, 192)', // 텍스트 색상\r\n              font: {\r\n                weight: 'bold',\r\n                size: 14,\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n    }\r\n\r\n,\r\n  },\r\n  mounted() {\r\n    this.fetchDbList();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  font-family: Arial, sans-serif;\r\n  padding: 20px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\nh2 {\r\n  color: #4CAF50;\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.select-container {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.tablespace-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.tablespace-table th,\r\n.tablespace-table td {\r\n  padding: 8px;\r\n  text-align: left;\r\n  border: 1px solid #ddd;\r\n}\r\n\r\n.tablespace-table th {\r\n  background-color: #4caf50;\r\n  color: white;\r\n}\r\n\r\n.no-data-message {\r\n  text-align: center;\r\n  color: #ff0000;\r\n}\r\n\r\n.used-rate-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.rate-chart {\r\n  max-width: 80px;\r\n  max-height: 40px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}