{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  style: {\n    \"display\": \"flex\",\n    \"align-items\": \"center\",\n    \"gap\": \"10px\",\n    \"margin-bottom\": \"20px\"\n  }\n};\nconst _hoisted_2 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[9] || (_cache[9] = _createElementVNode(\"h1\", null, \"SMS 전송 히스토리\", -1 /* HOISTED */)), _createCommentVNode(\" 일수 입력 필드, MSG 검색창, 대량 메시지 전송 버튼을 한 줄로 배치 \"), _createElementVNode(\"div\", _hoisted_1, [_cache[6] || (_cache[6] = _createElementVNode(\"label\", {\n    for: \"days\"\n  }, \"조회할 일수: \", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    id: \"days\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.day = $event),\n    min: \"1\",\n    placeholder: \"일수를 입력하세요\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.day]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.fetchSmsHistories && $options.fetchSmsHistories(...args))\n  }, \"조회\"), _cache[7] || (_cache[7] = _createElementVNode(\"label\", {\n    for: \"msgSearch\"\n  }, \"MSG 내용 검색: \", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"msgSearch\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.msgSearch = $event),\n    placeholder: \"MSG 내용을 입력하세요\",\n    onInput: _cache[3] || (_cache[3] = (...args) => $options.filterSmsHistories && $options.filterSmsHistories(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.msgSearch]]), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.updateAllSmsHistories && $options.updateAllSmsHistories(...args))\n  }, \"대량 메시지 전송 처리\"), _createCommentVNode(\" 자동 조회 버튼 \"), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.toggleAutoFetch && $options.toggleAutoFetch(...args)),\n    disabled: $data.isAutoFetchActive,\n    style: {\n      \"background-color\": \"#FF9800\"\n    }\n  }, _toDisplayString($data.isAutoFetchActive ? '자동 조회 중지' : `1분마다 조회 (${$data.countdown}s)`), 9 /* TEXT, PROPS */, _hoisted_2)]), _createCommentVNode(\" 히스토리 테이블 \"), _createElementVNode(\"table\", null, [_cache[8] || (_cache[8] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"SEQNO\"), _createElementVNode(\"th\", null, \"INDATE\"), _createElementVNode(\"th\", null, \"INTIME\"), _createElementVNode(\"th\", null, \"SENDNAME\"), _createElementVNode(\"th\", null, \"RECVNAME\"), _createElementVNode(\"th\", null, \"MSG\"), _createElementVNode(\"th\", null, \"RESULT\"), _createElementVNode(\"th\", null, \"KIND\"), _createElementVNode(\"th\", null, \"ERRCODE\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.filteredSmsHistories, history => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: history.SEQNO\n    }, [_createElementVNode(\"td\", null, _toDisplayString(history.SEQNO), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(history.loc), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(history.assets), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(history.dbDescript), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(history.recName), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(history.msg), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(history.result), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(history.kind), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(history.errCode), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["style","_createElementBlock","_createElementVNode","_createCommentVNode","_hoisted_1","for","type","id","_cache","$event","$data","day","min","placeholder","onClick","args","$options","fetchSmsHistories","msgSearch","onInput","filterSmsHistories","updateAllSmsHistories","toggleAutoFetch","disabled","isAutoFetchActive","countdown","_hoisted_2","_Fragment","_renderList","filteredSmsHistories","history","key","SEQNO","_toDisplayString","loc","assets","dbDescript","recName","msg","result","kind","errCode"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\SmsHistory.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>SMS 전송 히스토리</h1>\r\n\r\n    <!-- 일수 입력 필드, MSG 검색창, 대량 메시지 전송 버튼을 한 줄로 배치 -->\r\n    <div style=\"display: flex; align-items: center; gap: 10px; margin-bottom: 20px;\">\r\n      <label for=\"days\">조회할 일수: </label>\r\n      <input type=\"number\" id=\"days\" v-model=\"day\" min=\"1\" placeholder=\"일수를 입력하세요\" />\r\n      <button @click=\"fetchSmsHistories\">조회</button>\r\n\r\n      <label for=\"msgSearch\">MSG 내용 검색: </label>\r\n      <input type=\"text\" id=\"msgSearch\" v-model=\"msgSearch\" placeholder=\"MSG 내용을 입력하세요\" @input=\"filterSmsHistories\" />\r\n\r\n      <button @click=\"updateAllSmsHistories\">대량 메시지 전송 처리</button>\r\n\r\n      <!-- 자동 조회 버튼 -->\r\n      <button\r\n        @click=\"toggleAutoFetch\"\r\n        :disabled=\"isAutoFetchActive\"\r\n        style=\"background-color: #FF9800;\">\r\n        {{ isAutoFetchActive ? '자동 조회 중지' : `1분마다 조회 (${countdown}s)` }}\r\n      </button>\r\n    </div>\r\n\r\n    <!-- 히스토리 테이블 -->\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>SEQNO</th>\r\n          <th>INDATE</th>\r\n          <th>INTIME</th>\r\n          <th>SENDNAME</th>\r\n          <th>RECVNAME</th>\r\n          <th>MSG</th>\r\n          <th>RESULT</th>\r\n          <th>KIND</th>\r\n          <th>ERRCODE</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"history in filteredSmsHistories\" :key=\"history.SEQNO\">\r\n          <td>{{ history.SEQNO }}</td>\r\n          <td>{{ history.loc }}</td>\r\n          <td>{{ history.assets }}</td>\r\n          <td>{{ history.dbDescript }}</td>\r\n          <td>{{ history.recName }}</td>\r\n          <td>{{ history.msg }}</td>\r\n          <td>{{ history.result }}</td>\r\n          <td>{{ history.kind }}</td>\r\n          <td>{{ history.errCode }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      smsHistories: [],  // 전체 데이터\r\n      filteredSmsHistories: [],  // 필터링된 데이터\r\n      day: 3,  // 기본 3일 기준\r\n      msgSearch: '',  // MSG 내용 검색 필드\r\n      isAutoFetchActive: false,  // 자동 조회 활성화 상태\r\n      autoFetchInterval: null,  // 자동 조회 간격\r\n      countdown: 60,  // 카운트다운 초기값 (60초)\r\n      countdownInterval: null,  // 카운트다운 인터벌\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchSmsHistories();  // 기본적으로 30일 기준으로 데이터 조회\r\n  },\r\n  methods: {\r\n    fetchSmsHistories() {\r\n      // 데이터를 전체 조회\r\n      axios.get(`/api/sms/all?day=${this.day}`)\r\n        .then(response => {\r\n          this.smsHistories = response.data;\r\n\r\n          // INDATE, INTIME을 기준으로 역순 정렬\r\n          this.smsHistories.sort((a, b) => {\r\n            const dateA = a.loc + a.assets;  // INDATE + INTIME\r\n            const dateB = b.loc + b.assets;  // INDATE + INTIME\r\n            if (dateA < dateB) {\r\n              return 1;  // 역순\r\n            } else if (dateA > dateB) {\r\n              return -1;\r\n            }\r\n            return 0;\r\n          });\r\n\r\n          // 필터링된 데이터도 업데이트\r\n          this.filteredSmsHistories = this.smsHistories;\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching SMS histories:', error);\r\n        });\r\n    },\r\n    filterSmsHistories() {\r\n      // 검색된 MSG 내용으로 필터링\r\n      if (this.msgSearch) {\r\n        this.filteredSmsHistories = this.smsHistories.filter(history =>\r\n          history.msg && history.msg.includes(this.msgSearch)\r\n        );\r\n      } else {\r\n        // 검색어가 비어 있으면 전체 데이터를 다시 표시\r\n        this.filteredSmsHistories = this.smsHistories;\r\n      }\r\n    },\r\n    updateAllSmsHistories() {\r\n      axios.put('/api/sms/updateall')\r\n        .then(() => {\r\n          alert('전체 메시지 전송 처리가 완료되었습니다.');\r\n          this.fetchSmsHistories();  // 업데이트 후 리스트 다시 가져오기\r\n        })\r\n        .catch(error => {\r\n          console.error('Error updating SMS histories:', error);\r\n        });\r\n    },\r\n    toggleAutoFetch() {\r\n      if (this.isAutoFetchActive) {\r\n        // 자동 조회 중지\r\n        clearInterval(this.autoFetchInterval);\r\n        clearInterval(this.countdownInterval);  // 카운트다운 타이머 정리\r\n        this.autoFetchInterval = null;\r\n        this.countdownInterval = null;\r\n        this.countdown = 60;  // 중지 시 카운트다운 리셋\r\n      } else {\r\n        // 자동 조회 시작\r\n        this.autoFetchInterval = setInterval(() => {\r\n          this.fetchSmsHistories();\r\n          this.countdown = 60;  // 카운트다운 초기화\r\n        }, 60000);  // 1분마다 조회\r\n\r\n        // 카운트다운 시작\r\n        this.startCountdown();\r\n      }\r\n\r\n      this.isAutoFetchActive = !this.isAutoFetchActive;  // 버튼 상태 토글\r\n    },\r\n    startCountdown() {\r\n      if (this.countdownInterval) {\r\n        clearInterval(this.countdownInterval);\r\n      }\r\n\r\n      // 1초마다 카운트다운 감소\r\n      this.countdownInterval = setInterval(() => {\r\n        if (this.countdown > 0) {\r\n          this.countdown--;\r\n          console.log(`카운트다운: ${this.countdown}s`);  // 카운트다운 로그 출력\r\n        } else {\r\n          this.countdown = 60;  // 카운트다운이 0초가 되면 60초로 리셋\r\n          console.log('카운트다운 완료, 자동 조회 실행');\r\n          this.fetchSmsHistories();  // 1분마다 자동 조회\r\n        }\r\n      }, 1000);\r\n    },\r\n  },\r\n  beforeUnmount() {\r\n    // 컴포넌트가 언마운트되기 전에 setInterval을 정리합니다.\r\n    if (this.autoFetchInterval) {\r\n      clearInterval(this.autoFetchInterval);\r\n    }\r\n    if (this.countdownInterval) {\r\n      clearInterval(this.countdownInterval);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 스타일은 자유롭게 설정 */\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-top: 20px; /* 테이블과 버튼 간의 여백 추가 */\r\n}\r\nth, td {\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  text-align: center;\r\n}\r\nbutton {\r\n  padding: 10px;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\ninput[type=\"number\"],\r\ninput[type=\"text\"] {\r\n  padding: 5px;\r\n  margin-right: 10px;\r\n  width: 150px; /* 적당한 너비로 설정 */\r\n}\r\nbutton:disabled {\r\n  background-color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}