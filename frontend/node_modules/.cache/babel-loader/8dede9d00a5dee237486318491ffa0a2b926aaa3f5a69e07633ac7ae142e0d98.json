{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"db-list-container\"\n};\nconst _hoisted_2 = {\n  class: \"search-box\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"db-table\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = [\"onClick\"];\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[3] || (_cache[3] = _createElementVNode(\"h2\", null, \"DB 리스트\", -1 /* HOISTED */)), _createCommentVNode(\" 검색 박스 \"), _createElementVNode(\"div\", _hoisted_2, [_cache[1] || (_cache[1] = _createElementVNode(\"label\", {\n    for: \"search\",\n    class: \"search-label\"\n  }, \"검색:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"search\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.searchQuery = $event),\n    placeholder: \"설명, 호스트, PubIP, VIP, DB 타입, DB 이름\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.searchQuery]])]), $options.filteredDbList.length > 0 ? (_openBlock(), _createElementBlock(\"table\", _hoisted_3, [_cache[2] || (_cache[2] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"ID\"), _createElementVNode(\"th\", null, \"자산\"), _createElementVNode(\"th\", null, \"설명\"), _createElementVNode(\"th\", null, \"호스트\"), _createElementVNode(\"th\", null, \"PubIP\"), _createElementVNode(\"th\", null, \"VIP\"), _createElementVNode(\"th\", null, \"DB 타입\"), _createElementVNode(\"th\", null, \"DB 이름\"), _createElementVNode(\"th\", null, \"생사관제\"), _createElementVNode(\"th\", null, \"TBS수집\"), _createElementVNode(\"th\", null, \"Sybase 트랜잭션\"), _createElementVNode(\"th\", null, \"OBJSIZE 수집\"), _createElementVNode(\"th\", null, \"일일 점검\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredDbList, db => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: db.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(db.id), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.assets), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.dbDescript), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.hostname), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.pubIp), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.vip), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.dbType), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.dbName), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      class: _normalizeClass(db.liveChk === 'Y' ? 'btn-on' : 'btn-off'),\n      onClick: $event => $options.confirmAndUpdate(db, 'liveChk')\n    }, _toDisplayString(db.liveChk === 'Y' ? 'On' : 'Off'), 11 /* TEXT, CLASS, PROPS */, _hoisted_4)]), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      class: _normalizeClass(db.sizeChk === 'Y' ? 'btn-on' : 'btn-off'),\n      onClick: $event => $options.confirmAndUpdate(db, 'sizeChk')\n    }, _toDisplayString(db.sizeChk === 'Y' ? 'On' : 'Off'), 11 /* TEXT, CLASS, PROPS */, _hoisted_5)]), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      class: _normalizeClass(db.trnBakChk === 'Y' ? 'btn-on' : 'btn-off'),\n      onClick: $event => $options.confirmAndUpdate(db, 'trnBakChk')\n    }, _toDisplayString(db.trnBakChk === 'Y' ? 'On' : 'Off'), 11 /* TEXT, CLASS, PROPS */, _hoisted_6)]), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      class: _normalizeClass(db.objSegSizeChk === 'Y' ? 'btn-on' : 'btn-off'),\n      onClick: $event => $options.confirmAndUpdate(db, 'objSegSizeChk')\n    }, _toDisplayString(db.objSegSizeChk === 'Y' ? 'On' : 'Off'), 11 /* TEXT, CLASS, PROPS */, _hoisted_7)]), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      class: _normalizeClass(db.dailyChk === 'Y' ? 'btn-on' : 'btn-off'),\n      onClick: $event => $options.confirmAndUpdate(db, 'dailyChk')\n    }, _toDisplayString(db.dailyChk === 'Y' ? 'On' : 'Off'), 11 /* TEXT, CLASS, PROPS */, _hoisted_8)])]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_9, \"데이터가 없습니다.\"))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_createCommentVNode","_hoisted_2","for","type","id","_cache","$event","$data","searchQuery","placeholder","$options","filteredDbList","length","_hoisted_3","_Fragment","_renderList","db","_toDisplayString","assets","dbDescript","hostname","pubIp","vip","dbType","dbName","_normalizeClass","liveChk","onClick","confirmAndUpdate","_hoisted_4","sizeChk","_hoisted_5","trnBakChk","_hoisted_6","objSegSizeChk","_hoisted_7","dailyChk","_hoisted_8","_hoisted_9"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DBList.vue"],"sourcesContent":["<template>\r\n  <div class=\"db-list-container\">\r\n    <h2>DB 리스트</h2>\r\n\r\n    <!-- 검색 박스 -->\r\n    <div class=\"search-box\">\r\n      <label for=\"search\" class=\"search-label\">검색:</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"search\"\r\n        v-model=\"searchQuery\"\r\n        placeholder=\"설명, 호스트, PubIP, VIP, DB 타입, DB 이름\"\r\n      />\r\n    </div>\r\n\r\n    <table v-if=\"filteredDbList.length > 0\" class=\"db-table\">\r\n      <thead>\r\n        <tr>\r\n          <th>ID</th>\r\n          <th>자산</th>\r\n          <th>설명</th>\r\n          <th>호스트</th>\r\n          <th>PubIP</th>\r\n          <th>VIP</th>\r\n          <th>DB 타입</th>\r\n          <th>DB 이름</th>\r\n          <th>생사관제</th>\r\n          <th>TBS수집</th>\r\n          <th>Sybase 트랜잭션</th>\r\n          <th>OBJSIZE 수집</th>\r\n          <th>일일 점검</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"db in filteredDbList\" :key=\"db.id\">\r\n          <td>{{ db.id }}</td>\r\n          <td>{{ db.assets }}</td>\r\n          <td>{{ db.dbDescript }}</td>\r\n          <td>{{ db.hostname }}</td>\r\n          <td>{{ db.pubIp }}</td>\r\n          <td>{{ db.vip }}</td>\r\n          <td>{{ db.dbType }}</td>\r\n          <td>{{ db.dbName }}</td>\r\n          <td>\r\n            <button :class=\"db.liveChk === 'Y' ? 'btn-on' : 'btn-off'\" @click=\"confirmAndUpdate(db, 'liveChk')\">\r\n              {{ db.liveChk === 'Y' ? 'On' : 'Off' }}\r\n            </button>\r\n          </td>\r\n          <td>\r\n            <button :class=\"db.sizeChk === 'Y' ? 'btn-on' : 'btn-off'\" @click=\"confirmAndUpdate(db, 'sizeChk')\">\r\n              {{ db.sizeChk === 'Y' ? 'On' : 'Off' }}\r\n            </button>\r\n          </td>\r\n          <td>\r\n            <button :class=\"db.trnBakChk === 'Y' ? 'btn-on' : 'btn-off'\" @click=\"confirmAndUpdate(db, 'trnBakChk')\">\r\n              {{ db.trnBakChk === 'Y' ? 'On' : 'Off' }}\r\n            </button>\r\n          </td>\r\n          <td>\r\n            <button :class=\"db.objSegSizeChk === 'Y' ? 'btn-on' : 'btn-off'\" @click=\"confirmAndUpdate(db, 'objSegSizeChk')\">\r\n              {{ db.objSegSizeChk === 'Y' ? 'On' : 'Off' }}\r\n            </button>\r\n          </td>\r\n          <td>\r\n            <button :class=\"db.dailyChk === 'Y' ? 'btn-on' : 'btn-off'\" @click=\"confirmAndUpdate(db, 'dailyChk')\">\r\n              {{ db.dailyChk === 'Y' ? 'On' : 'Off' }}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <p v-else>데이터가 없습니다.</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      dbList: [],\r\n      searchQuery: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    filteredDbList() {\r\n      const query = this.searchQuery.toLowerCase();\r\n      return this.dbList.filter(db => {\r\n        return (\r\n          (db.dbDescript && db.dbDescript.toLowerCase().includes(query)) ||\r\n          (db.hostname && db.hostname.toLowerCase().includes(query)) ||\r\n          (db.pubIp && db.pubIp.toLowerCase().includes(query)) ||\r\n          (db.vip && db.vip.toLowerCase().includes(query)) ||\r\n          (db.dbType && db.dbType.toLowerCase().includes(query)) ||\r\n          (db.dbName && db.dbName.toLowerCase().includes(query))\r\n        );\r\n      });\r\n    }\r\n  },\r\n  methods: {\r\n    confirmAndUpdate(db, field) {\r\n      const confirmation = window.confirm(\"정말 수정하시겠습니까?\");\r\n      if (confirmation) {\r\n        this.updateDbStatus(db, field);\r\n      }\r\n    },\r\n    updateDbStatus(db, field) {\r\n      const newStatus = db[field] === 'Y' ? 'N' : 'Y'; // 상태를 반전시킴\r\n      db[field] = newStatus; // 로컬에서 상태 업데이트\r\n\r\n      // 서버로 상태 변경 요청 보내기\r\n      axios\r\n        .put(`http://10.90.4.60:8080/api/db-list/update/${db.id}`, { [field]: newStatus })\r\n        .then(() => {\r\n          console.log(`${field} 업데이트 성공`);\r\n        })\r\n        .catch((error) => {\r\n          console.error(`${field} 업데이트 실패`, error);\r\n          // 실패 시 상태를 원래 값으로 되돌림\r\n          db[field] = db[field] === 'Y' ? 'N' : 'Y';\r\n        });\r\n    },\r\n  },\r\n  mounted() {\r\n    axios\r\n      .get(\"http://10.90.4.60:8080/api/db-list/all\")\r\n      .then((response) => {\r\n        this.dbList = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"API 호출 오류:\", error);\r\n      });\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.db-list-container {\r\n  font-family: 'Arial', sans-serif;\r\n  padding: 20px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  font-size: 2em;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.search-box {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n}\r\n\r\n.search-label {\r\n  margin-right: 10px;\r\n  font-size: 1.1em;\r\n}\r\n\r\n.search-box input {\r\n  padding: 8px;\r\n  font-size: 1em;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  width: 300px;\r\n}\r\n\r\n.db-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin: 20px 0;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.db-table th, .db-table td {\r\n  padding: 12px 15px;\r\n  text-align: center;\r\n  border: 1px solid #ddd;\r\n}\r\n\r\n.db-table th {\r\n  background-color: #f4f4f4;\r\n  font-weight: bold;\r\n}\r\n\r\n.db-table tr:nth-child(even) {\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.db-table tr:hover {\r\n  background-color: #f1f1f1;\r\n}\r\n\r\nbutton {\r\n  padding: 5px 10px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 0.9em;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.btn-on {\r\n  background-color: #4caf50;\r\n  color: white;\r\n}\r\n\r\n.btn-on:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.btn-off {\r\n  background-color: #f44336;\r\n  color: white;\r\n}\r\n\r\n.btn-off:hover {\r\n  background-color: #e53935;\r\n}\r\n\r\np {\r\n  text-align: center;\r\n  font-size: 1.2em;\r\n  color: #555;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}