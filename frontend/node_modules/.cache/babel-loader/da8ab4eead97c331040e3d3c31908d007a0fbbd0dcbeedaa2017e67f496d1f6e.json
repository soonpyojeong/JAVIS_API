{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      selectedTb: null,\n      // 선택된 TB 이름\n      tablespaces: [],\n      // 테이블스페이스 데이터\n      searchQuery: \"\",\n      // 검색어\n      sortKey: \"tsName\",\n      // 정렬 키\n      sortOrder: 1 // 정렬 순서 (1: 오름차순, -1: 내림차순)\n    };\n  },\n  computed: {\n    // 검색 및 정렬된 테이블스페이스 데이터\n    filteredTablespaces() {\n      let result = this.tablespaces.filter(ts => ts.tsName.toLowerCase().includes(this.searchQuery.toLowerCase()));\n      return result.sort((a, b) => {\n        const aValue = a[this.sortKey];\n        const bValue = b[this.sortKey];\n        if (aValue < bValue) return -1 * this.sortOrder;\n        if (aValue > bValue) return 1 * this.sortOrder;\n        return 0;\n      });\n    }\n  },\n  methods: {\n    fetchTablespaces(tbName) {\n      this.selectedTb = tbName;\n      this.tablespaces = [];\n      axios.get(`/api/tb/${tbName}/tablespaces`).then(res => {\n        this.tablespaces = res.data;\n      });\n    },\n    sortData(key) {\n      if (this.sortKey === key) {\n        this.sortOrder *= -1; // 동일 키를 클릭하면 정렬 순서 변경\n      } else {\n        this.sortKey = key; // 새 키로 정렬\n        this.sortOrder = 1;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","selectedTb","tablespaces","searchQuery","sortKey","sortOrder","computed","filteredTablespaces","result","filter","ts","tsName","toLowerCase","includes","sort","a","b","aValue","bValue","methods","fetchTablespaces","tbName","get","then","res","sortData","key"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\TablespacesList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>{{ selectedTb }} - 테이블스페이스 리스트</h2>\r\n\r\n    <!-- 검색 입력 필드 -->\r\n    <input\r\n      v-model=\"searchQuery\"\r\n      type=\"text\"\r\n      placeholder=\"테이블스페이스 검색\"\r\n      style=\"margin-bottom: 10px; padding: 5px; width: 300px;\"\r\n    />\r\n\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th @click=\"sortData('tsName')\">Tablespace 이름</th>\r\n          <th @click=\"sortData('totalSize')\">총 크기 (MB)</th>\r\n          <th @click=\"sortData('usedSize')\">사용량 (MB)</th>\r\n          <th @click=\"sortData('freeSize')\">남은 크기 (MB)</th>\r\n          <th @click=\"sortData('usedRate')\">사용률 (%)</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(ts, index) in filteredTablespaces\" :key=\"index\">\r\n          <td>{{ ts.tsName }}</td>\r\n          <td>{{ ts.totalSize }}</td>\r\n          <td>{{ ts.usedSize }}</td>\r\n          <td>{{ ts.freeSize }}</td>\r\n          <td>{{ ts.usedRate }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <p v-if=\"filteredTablespaces.length === 0\">검색 결과가 없습니다.</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedTb: null, // 선택된 TB 이름\r\n      tablespaces: [], // 테이블스페이스 데이터\r\n      searchQuery: \"\", // 검색어\r\n      sortKey: \"tsName\", // 정렬 키\r\n      sortOrder: 1, // 정렬 순서 (1: 오름차순, -1: 내림차순)\r\n    };\r\n  },\r\n  computed: {\r\n    // 검색 및 정렬된 테이블스페이스 데이터\r\n    filteredTablespaces() {\r\n      let result = this.tablespaces.filter((ts) =>\r\n        ts.tsName.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n      );\r\n      return result.sort((a, b) => {\r\n        const aValue = a[this.sortKey];\r\n        const bValue = b[this.sortKey];\r\n        if (aValue < bValue) return -1 * this.sortOrder;\r\n        if (aValue > bValue) return 1 * this.sortOrder;\r\n        return 0;\r\n      });\r\n    },\r\n  },\r\n  methods: {\r\n    fetchTablespaces(tbName) {\r\n      this.selectedTb = tbName;\r\n      this.tablespaces = [];\r\n      axios.get(`/api/tb/${tbName}/tablespaces`).then((res) => {\r\n        this.tablespaces = res.data;\r\n      });\r\n    },\r\n    sortData(key) {\r\n      if (this.sortKey === key) {\r\n        this.sortOrder *= -1; // 동일 키를 클릭하면 정렬 순서 변경\r\n      } else {\r\n        this.sortKey = key; // 새 키로 정렬\r\n        this.sortOrder = 1;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-top: 20px;\r\n}\r\n\r\nth,\r\ntd {\r\n  border: 1px solid #ddd;\r\n  text-align: left;\r\n  padding: 8px;\r\n}\r\n\r\nth {\r\n  cursor: pointer;\r\n  background-color: #f4f4f4;\r\n}\r\n\r\ninput {\r\n  margin-bottom: 10px;\r\n}\r\n</style>\r\n"],"mappings":";;AAsCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,IAAI;MAAE;MAClBC,WAAW,EAAE,EAAE;MAAE;MACjBC,WAAW,EAAE,EAAE;MAAE;MACjBC,OAAO,EAAE,QAAQ;MAAE;MACnBC,SAAS,EAAE,CAAC,CAAE;IAChB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR;IACAC,mBAAmBA,CAAA,EAAG;MACpB,IAAIC,MAAK,GAAI,IAAI,CAACN,WAAW,CAACO,MAAM,CAAEC,EAAE,IACtCA,EAAE,CAACC,MAAM,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAACV,WAAW,CAACS,WAAW,CAAC,CAAC,CACjE,CAAC;MACD,OAAOJ,MAAM,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QAC3B,MAAMC,MAAK,GAAIF,CAAC,CAAC,IAAI,CAACX,OAAO,CAAC;QAC9B,MAAMc,MAAK,GAAIF,CAAC,CAAC,IAAI,CAACZ,OAAO,CAAC;QAC9B,IAAIa,MAAK,GAAIC,MAAM,EAAE,OAAO,CAAC,IAAI,IAAI,CAACb,SAAS;QAC/C,IAAIY,MAAK,GAAIC,MAAM,EAAE,OAAO,IAAI,IAAI,CAACb,SAAS;QAC9C,OAAO,CAAC;MACV,CAAC,CAAC;IACJ;EACF,CAAC;EACDc,OAAO,EAAE;IACPC,gBAAgBA,CAACC,MAAM,EAAE;MACvB,IAAI,CAACpB,UAAS,GAAIoB,MAAM;MACxB,IAAI,CAACnB,WAAU,GAAI,EAAE;MACrBH,KAAK,CAACuB,GAAG,CAAC,WAAWD,MAAM,cAAc,CAAC,CAACE,IAAI,CAAEC,GAAG,IAAK;QACvD,IAAI,CAACtB,WAAU,GAAIsB,GAAG,CAACxB,IAAI;MAC7B,CAAC,CAAC;IACJ,CAAC;IACDyB,QAAQA,CAACC,GAAG,EAAE;MACZ,IAAI,IAAI,CAACtB,OAAM,KAAMsB,GAAG,EAAE;QACxB,IAAI,CAACrB,SAAQ,IAAK,CAAC,CAAC,EAAE;MACxB,OAAO;QACL,IAAI,CAACD,OAAM,GAAIsB,GAAG,EAAE;QACpB,IAAI,CAACrB,SAAQ,GAAI,CAAC;MACpB;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}