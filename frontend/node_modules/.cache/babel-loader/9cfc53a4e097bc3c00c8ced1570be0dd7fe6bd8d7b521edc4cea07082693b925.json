{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[13] || (_cache[13] = _createElementVNode(\"h2\", null, \"DB 리스트\", -1 /* HOISTED */)), $data.dbList.length > 0 ? (_openBlock(), _createElementBlock(\"table\", _hoisted_1, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createCommentVNode(\" 각 헤더 클릭 시 정렬 메서드 호출 \"), _createElementVNode(\"th\", {\n    onClick: _cache[0] || (_cache[0] = $event => $options.sortTable('id'))\n  }, \"ID\"), _createElementVNode(\"th\", {\n    onClick: _cache[1] || (_cache[1] = $event => $options.sortTable('assets'))\n  }, \"자산\"), _createElementVNode(\"th\", {\n    onClick: _cache[2] || (_cache[2] = $event => $options.sortTable('dbDescript'))\n  }, \"설명\"), _createElementVNode(\"th\", {\n    onClick: _cache[3] || (_cache[3] = $event => $options.sortTable('hostname'))\n  }, \"호스트\"), _createElementVNode(\"th\", {\n    onClick: _cache[4] || (_cache[4] = $event => $options.sortTable('pubIp'))\n  }, \"PubIP\"), _createElementVNode(\"th\", {\n    onClick: _cache[5] || (_cache[5] = $event => $options.sortTable('vip'))\n  }, \"VIP\"), _createElementVNode(\"th\", {\n    onClick: _cache[6] || (_cache[6] = $event => $options.sortTable('dbType'))\n  }, \"DB_TYPE\"), _createElementVNode(\"th\", {\n    onClick: _cache[7] || (_cache[7] = $event => $options.sortTable('dbName'))\n  }, \"DB 이름\"), _createElementVNode(\"th\", {\n    onClick: _cache[8] || (_cache[8] = $event => $options.sortTable('liveChk'))\n  }, \"생사관제\"), _createElementVNode(\"th\", {\n    onClick: _cache[9] || (_cache[9] = $event => $options.sortTable('sizeChk'))\n  }, \"TBS수집\"), _createElementVNode(\"th\", {\n    onClick: _cache[10] || (_cache[10] = $event => $options.sortTable('trnBakChk'))\n  }, \"Sybase트렌젝션\"), _createElementVNode(\"th\", {\n    onClick: _cache[11] || (_cache[11] = $event => $options.sortTable('objSegSizeChk'))\n  }, \"OBJSIZE수집\"), _createElementVNode(\"th\", {\n    onClick: _cache[12] || (_cache[12] = $event => $options.sortTable('dailyChk'))\n  }, \"일일점검\")])]), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.sortedDbList, (db, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(db.id), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.assets), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.dbDescript), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.hostname), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.pubIp), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.vip), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.dbType), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.dbName), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.liveChk), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.sizeChk), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.trnBakChk), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.objSegSizeChk), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(db.dailyChk), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \"데이터가 없습니다.\")), _createCommentVNode(\" 데이터가 없을 때 표시 \")]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","$data","dbList","length","_hoisted_1","_createCommentVNode","onClick","_cache","$event","$options","sortTable","_Fragment","_renderList","sortedDbList","db","index","_toDisplayString","id","assets","dbDescript","hostname","pubIp","vip","dbType","dbName","liveChk","sizeChk","trnBakChk","objSegSizeChk","dailyChk","_hoisted_2"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DBList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>DB 리스트</h2>\r\n    <table v-if=\"dbList.length > 0\">\r\n      <thead>\r\n        <tr>\r\n          <!-- 각 헤더 클릭 시 정렬 메서드 호출 -->\r\n          <th @click=\"sortTable('id')\">ID</th>\r\n          <th @click=\"sortTable('assets')\">자산</th>\r\n          <th @click=\"sortTable('dbDescript')\">설명</th>\r\n          <th @click=\"sortTable('hostname')\">호스트</th>\r\n          <th @click=\"sortTable('pubIp')\">PubIP</th>\r\n          <th @click=\"sortTable('vip')\">VIP</th>\r\n          <th @click=\"sortTable('dbType')\">DB_TYPE</th>\r\n          <th @click=\"sortTable('dbName')\">DB 이름</th>\r\n          <th @click=\"sortTable('liveChk')\">생사관제</th>\r\n          <th @click=\"sortTable('sizeChk')\">TBS수집</th>\r\n          <th @click=\"sortTable('trnBakChk')\">Sybase트렌젝션</th>\r\n          <th @click=\"sortTable('objSegSizeChk')\">OBJSIZE수집</th>\r\n          <th @click=\"sortTable('dailyChk')\">일일점검</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(db, index) in sortedDbList\" :key=\"index\">\r\n          <td>{{ db.id }}</td>\r\n          <td>{{ db.assets }}</td>\r\n          <td>{{ db.dbDescript }}</td>\r\n          <td>{{ db.hostname }}</td>\r\n          <td>{{ db.pubIp }}</td>\r\n          <td>{{ db.vip }}</td>\r\n          <td>{{ db.dbType }}</td>\r\n          <td>{{ db.dbName }}</td>\r\n          <td>{{ db.liveChk }}</td>\r\n          <td>{{ db.sizeChk }}</td>\r\n          <td>{{ db.trnBakChk }}</td>\r\n          <td>{{ db.objSegSizeChk }}</td>\r\n          <td>{{ db.dailyChk }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <p v-else>데이터가 없습니다.</p> <!-- 데이터가 없을 때 표시 -->\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\nh2 {\r\n  color: #FF5722;\r\n}\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  cursor: pointer; /* 클릭 가능한 UI */\r\n}\r\nth, td {\r\n  border: 1px solid #ccc;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\nth {\r\n  background-color: #f2f2f2;\r\n}\r\nth:hover {\r\n  background-color: #ddd; /* 마우스 오버 효과 */\r\n}\r\n</style>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      dbList: [], // 원본 데이터\r\n      sortKey: \"\", // 정렬 기준 키\r\n      sortAsc: true, // 정렬 방향 (true: 오름차순, false: 내림차순)\r\n    };\r\n  },\r\n  computed: {\r\n    // 정렬된 데이터를 반환\r\n    sortedDbList() {\r\n      if (!this.sortKey) return this.dbList; // 정렬 키가 없으면 원본 데이터 반환\r\n      return [...this.dbList].sort((a, b) => {\r\n        const valA = a[this.sortKey];\r\n        const valB = b[this.sortKey];\r\n\r\n        // 값 비교 (오름차순 또는 내림차순)\r\n        if (valA < valB) return this.sortAsc ? -1 : 1;\r\n        if (valA > valB) return this.sortAsc ? 1 : -1;\r\n        return 0;\r\n      });\r\n    },\r\n  },\r\n  methods: {\r\n    // 정렬 메서드\r\n    sortTable(key) {\r\n      if (this.sortKey === key) {\r\n        // 동일한 키 클릭 시 방향 전환\r\n        this.sortAsc = !this.sortAsc;\r\n      } else {\r\n        // 새로운 키로 정렬\r\n        this.sortKey = key;\r\n        this.sortAsc = true;\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    // API 호출\r\n    axios\r\n      .get(\"http://localhost:8080/api/db-list/all\")\r\n      .then((response) => {\r\n        this.dbList = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"API 호출 오류:\", error);\r\n      });\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}