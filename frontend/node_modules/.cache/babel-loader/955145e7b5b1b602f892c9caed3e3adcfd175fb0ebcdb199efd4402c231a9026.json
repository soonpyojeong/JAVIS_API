{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      selectedDb: null,\n      tbList: [],\n      tablespaces: [],\n      searchQuery: \"\",\n      sortKey: \"tsName\",\n      sortOrder: 1,\n      showModal: false,\n      // 모달 표시 여부\n      showChat: false,\n      // 채팅 보기 여부\n      recentData: [],\n      // 최근 3개월 데이터\n      selectedTsName: \"\",\n      // 선택된 테이블스페이스 이름\n      chatMessages: [] // 채팅 메시지 데이터\n    };\n  },\n  computed: {\n    filteredTablespaces() {\n      return this.tablespaces.filter(ts => ts.id.tsName.toLowerCase().includes(this.searchQuery.toLowerCase()));\n    }\n  },\n  methods: {\n    fetchDbList() {\n      axios.get(\"/api/tb/list\").then(res => {\n        this.tbList = res.data;\n        if (this.tbList.length > 0) {\n          this.selectedDb = this.tbList[0];\n          this.fetchTablespaces(this.selectedDb);\n        }\n      }).catch(error => {\n        console.error(\"Error fetching DB list:\", error);\n      });\n    },\n    fetchTablespaces(dbName) {\n      axios.get(`/api/tb/${dbName}/tablespaces`).then(res => {\n        this.tablespaces = res.data || [];\n      }).catch(error => {\n        console.error(\"테이블스페이스 데이터 가져오기 실패:\", error);\n      });\n    },\n    fetchRecentData(selectedDb, tsName) {\n      if (!selectedDb || !tsName) {\n        console.error(\"selectedDb 또는 tsName이 유효하지 않습니다.\");\n        return;\n      }\n      axios.get(`/api/tb/${selectedDb}/${tsName}/recent`).then(res => {\n        this.recentData = res.data || [];\n        this.chatMessages = this.recentData.map(data => ({\n          text: `${data.id.tsName}: 사용률(${data.usedRate}%), 남은 크기(${data.freeSize}MB), 체크 시간(${data.id.chkDate} ${data.id.chkTime})`,\n          isUser: false\n        }));\n        this.showModal = true; // 모달 열기\n      }).catch(error => {\n        console.error(\"최근 데이터 가져오기 실패:\", error);\n      });\n    },\n    closeModal() {\n      this.showModal = false;\n      this.showChat = false;\n    },\n    toggleChatView() {\n      this.showChat = !this.showChat;\n    }\n  },\n  mounted() {\n    this.fetchDbList();\n  }\n};","map":{"version":3,"names":["axios","data","selectedDb","tbList","tablespaces","searchQuery","sortKey","sortOrder","showModal","showChat","recentData","selectedTsName","chatMessages","computed","filteredTablespaces","filter","ts","id","tsName","toLowerCase","includes","methods","fetchDbList","get","then","res","length","fetchTablespaces","catch","error","console","dbName","fetchRecentData","map","text","usedRate","freeSize","chkDate","chkTime","isUser","closeModal","toggleChatView","mounted"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\TablespacesList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>{{ selectedDb }} DB - 테이블스페이스 리스트</h2>\r\n\r\n    <!-- DB 목록을 보여주는 드롭다운 -->\r\n    <select v-model=\"selectedDb\" @change=\"fetchTablespaces(selectedDb)\">\r\n      <option v-for=\"(db, index) in tbList\" :key=\"index\" :value=\"db\">\r\n        {{ db }}\r\n      </option>\r\n    </select>\r\n\r\n    <!-- 검색 입력 필드 -->\r\n    <input\r\n      v-model=\"searchQuery\"\r\n      type=\"text\"\r\n      placeholder=\"테이블스페이스 검색\"\r\n      style=\"margin-bottom: 10px; padding: 5px; width: 300px;\"\r\n    />\r\n\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th @click=\"sortData('id.tsName')\">Tablespace 이름</th>\r\n          <th @click=\"sortData('totalSize')\">총 크기 (MB)</th>\r\n          <th @click=\"sortData('usedSize')\">사용량 (MB)</th>\r\n          <th @click=\"sortData('freeSize')\">남은 크기 (MB)</th>\r\n          <th @click=\"sortData('usedRate')\">사용률 (%)</th>\r\n          <th @click=\"sortData('id.chkDate')\">체크 날짜</th>\r\n          <th @click=\"sortData('id.chkTime')\">체크 시간</th>\r\n          <th @click=\"sortData('autoExtensCntFile')\">자동 확장 파일 수</th>\r\n          <th @click=\"sortData('maxMbBytes')\">최대 MB 바이트</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr\r\n          v-for=\"ts in filteredTablespaces\"\r\n          :key=\"ts.id.tsName\"\r\n          @click=\"fetchRecentData(selectedDb, ts.id.tsName)\"\r\n        >\r\n          <td>{{ ts.id.tsName }}</td>\r\n          <td>{{ ts.totalSize }}</td>\r\n          <td>{{ ts.usedSize }}</td>\r\n          <td>{{ ts.freeSize }}</td>\r\n          <td>{{ ts.usedRate }}</td>\r\n          <td>{{ ts.id.chkDate }}</td>\r\n          <td>{{ ts.id.chkTime }}</td>\r\n          <td>{{ ts.autoExtensCntFile }}</td>\r\n          <td>{{ ts.maxMbBytes }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <p v-if=\"filteredTablespaces.length === 0\">검색 결과가 없습니다.</p>\r\n    <!-- 모달 -->\r\n    <div v-if=\"showModal\" class=\"modal-overlay\" @click.self=\"closeModal\">\r\n      <div class=\"modal-content\">\r\n        <h3>최근 3개월 데이터: {{ selectedTsName }}</h3>\r\n        <button class=\"close-btn\" @click=\"closeModal\">닫기</button>\r\n        <button class=\"chat-btn\" @click=\"toggleChatView\">채팅 형식 보기</button>\r\n\r\n        <!-- 테이블 형식 -->\r\n        <table v-if=\"!showChat\">\r\n          <thead>\r\n            <tr>\r\n              <th>Tablespace 이름</th>\r\n              <th>총 크기 (MB)</th>\r\n              <th>사용량 (MB)</th>\r\n              <th>남은 크기 (MB)</th>\r\n              <th>사용률 (%)</th>\r\n              <th>체크 날짜</th>\r\n              <th>체크 시간</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"(data, index) in recentData\" :key=\"index\">\r\n              <td>{{ data.id.tsName }}</td>\r\n              <td>{{ data.totalSize }}</td>\r\n              <td>{{ data.usedSize }}</td>\r\n              <td>{{ data.freeSize }}</td>\r\n              <td>{{ data.usedRate }}</td>\r\n              <td>{{ data.id.chkDate }}</td>\r\n              <td>{{ data.id.chkTime }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <!-- 채팅 형식 -->\r\n        <div v-if=\"showChat\" class=\"chat-container\">\r\n          <div\r\n            v-for=\"(message, index) in chatMessages\"\r\n            :key=\"index\"\r\n            class=\"chat-message\"\r\n            :class=\"{ 'chat-user': message.isUser }\"\r\n          >\r\n            <span>{{ message.text }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedDb: null,\r\n      tbList: [],\r\n      tablespaces: [],\r\n      searchQuery: \"\",\r\n      sortKey: \"tsName\",\r\n      sortOrder: 1,\r\n      showModal: false, // 모달 표시 여부\r\n      showChat: false, // 채팅 보기 여부\r\n      recentData: [], // 최근 3개월 데이터\r\n      selectedTsName: \"\", // 선택된 테이블스페이스 이름\r\n      chatMessages: [], // 채팅 메시지 데이터\r\n    };\r\n  },\r\n  computed: {\r\n    filteredTablespaces() {\r\n      return this.tablespaces.filter((ts) =>\r\n        ts.id.tsName.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n      );\r\n    },\r\n  },\r\n  methods: {\r\n    fetchDbList() {\r\n      axios\r\n        .get(\"/api/tb/list\")\r\n        .then((res) => {\r\n          this.tbList = res.data;\r\n          if (this.tbList.length > 0) {\r\n            this.selectedDb = this.tbList[0];\r\n            this.fetchTablespaces(this.selectedDb);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching DB list:\", error);\r\n        });\r\n    },\r\n    fetchTablespaces(dbName) {\r\n      axios\r\n        .get(`/api/tb/${dbName}/tablespaces`)\r\n        .then((res) => {\r\n          this.tablespaces = res.data || [];\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"테이블스페이스 데이터 가져오기 실패:\", error);\r\n        });\r\n    },\r\n    fetchRecentData(selectedDb, tsName) {\r\n      if (!selectedDb || !tsName) {\r\n        console.error(\"selectedDb 또는 tsName이 유효하지 않습니다.\");\r\n        return;\r\n      }\r\n\r\n      axios\r\n        .get(`/api/tb/${selectedDb}/${tsName}/recent`)\r\n        .then((res) => {\r\n          this.recentData = res.data || [];\r\n          this.chatMessages = this.recentData.map((data) => ({\r\n            text: `${data.id.tsName}: 사용률(${data.usedRate}%), 남은 크기(${data.freeSize}MB), 체크 시간(${data.id.chkDate} ${data.id.chkTime})`,\r\n            isUser: false,\r\n          }));\r\n          this.showModal = true; // 모달 열기\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"최근 데이터 가져오기 실패:\", error);\r\n        });\r\n    },\r\n    closeModal() {\r\n      this.showModal = false;\r\n      this.showChat = false;\r\n    },\r\n    toggleChatView() {\r\n      this.showChat = !this.showChat;\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchDbList();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.modal-content {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  width: 80%;\r\n  max-width: 800px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.chat-btn {\r\n  background: blue;\r\n  color: white;\r\n  padding: 10px;\r\n  border: none;\r\n  cursor: pointer;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.chat-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  background: #f4f4f4;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.chat-message {\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  background: #fff;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.chat-user {\r\n  align-self: flex-end;\r\n  background: #d1ecf1;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}