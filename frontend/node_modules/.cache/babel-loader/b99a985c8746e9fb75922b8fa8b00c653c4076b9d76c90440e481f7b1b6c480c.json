{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"content\"\n};\nconst _hoisted_3 = {\n  class: \"db-tree\"\n};\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  key: 0\n};\nconst _hoisted_7 = [\"onClick\"];\nconst _hoisted_8 = {\n  key: 0,\n  class: \"chart-container\"\n};\nconst _hoisted_9 = {\n  class: \"charts-row\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" 왼쪽 DB 트리 구조 \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"ul\", null, [_createElementVNode(\"li\", null, [_createElementVNode(\"span\", {\n    onClick: _cache[0] || (_cache[0] = $event => $setup.toggleDBType('ORACLE'))\n  }, \"ORACLE\"), $setup.expandedDBType === 'ORACLE' ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.oracleDBList, db => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: db.name,\n      onClick: $event => $setup.selectDB(db.name)\n    }, _toDisplayString(db.name), 9 /* TEXT, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"li\", null, [_createElementVNode(\"span\", {\n    onClick: _cache[1] || (_cache[1] = $event => $setup.toggleDBType('TIBERO'))\n  }, \"TIBERO\"), $setup.expandedDBType === 'TIBERO' ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.tiberoDBList, db => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: db.name,\n      onClick: $event => $setup.selectDB(db.name)\n    }, _toDisplayString(db.name), 9 /* TEXT, PROPS */, _hoisted_7);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)])])]), _createCommentVNode(\" 중앙 차트 \"), $setup.selectedDB ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createElementVNode(\"h3\", null, _toDisplayString($setup.selectedDB) + \" - Metrics\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_9, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.metrics, (metric, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: metric,\n      class: \"metric-chart\",\n      style: _normalizeStyle({\n        flex: index % 3 === 0 ? '1 1 100%' : '1 1 33%'\n      })\n    }, [_createElementVNode(\"h4\", null, _toDisplayString(metric), 1 /* TEXT */), _createElementVNode(\"canvas\", {\n      ref_for: true,\n      ref: el => $setup.setChartRef(el, metric)\n    }, null, 512 /* NEED_PATCH */)], 4 /* STYLE */);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","onClick","_cache","$event","$setup","toggleDBType","expandedDBType","_hoisted_4","_Fragment","_renderList","oracleDBList","db","name","selectDB","_hoisted_5","_hoisted_6","tiberoDBList","_hoisted_7","selectedDB","_hoisted_8","_toDisplayString","_hoisted_9","metrics","metric","index","style","_normalizeStyle","flex","ref_for","ref","el","setChartRef"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DailyChk.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div class=\"content\">\r\n      <!-- 왼쪽 DB 트리 구조 -->\r\n      <div class=\"db-tree\">\r\n        <ul>\r\n          <li>\r\n            <span @click=\"toggleDBType('ORACLE')\">ORACLE</span>\r\n            <ul v-if=\"expandedDBType === 'ORACLE'\">\r\n              <li v-for=\"db in oracleDBList\" :key=\"db.name\" @click=\"selectDB(db.name)\">\r\n                {{ db.name }}\r\n              </li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <span @click=\"toggleDBType('TIBERO')\">TIBERO</span>\r\n            <ul v-if=\"expandedDBType === 'TIBERO'\">\r\n              <li v-for=\"db in tiberoDBList\" :key=\"db.name\" @click=\"selectDB(db.name)\">\r\n                {{ db.name }}\r\n              </li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <!-- 중앙 차트 -->\r\n      <div class=\"chart-container\" v-if=\"selectedDB\">\r\n        <h3>{{ selectedDB }} - Metrics</h3>\r\n        <div class=\"charts-row\">\r\n          <div v-for=\"(metric, index) in metrics\" :key=\"metric\" class=\"metric-chart\" :style=\"{ flex: index % 3 === 0 ? '1 1 100%' : '1 1 33%' }\">\r\n            <h4>{{ metric }}</h4>\r\n            <canvas :ref=\"el => setChartRef(el, metric)\"></canvas>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, watch } from 'vue';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  setup() {\r\n    const expandedDBType = ref(null);\r\n    const selectedDB = ref(null);\r\n    const chartRefs = ref({});\r\n    const chartInstances = ref({});\r\n\r\n    const oracleDBList = ref([\r\n      { name: 'ORACLE_DB1' },\r\n      { name: 'ORACLE_DB2' },\r\n      { name: 'ORACLE_DB3' }\r\n    ]);\r\n\r\n    const tiberoDBList = ref([\r\n      { name: 'TIBERO_DB1' },\r\n      { name: 'TIBERO_DB2' },\r\n      { name: 'TIBERO_DB3' }\r\n    ]);\r\n\r\n    const metrics = ref([\r\n      'TRANSACTIONS', 'TOTAL_SESSION', 'ACTIVE_SESSION',\r\n      'BUFFER_NOWAIT_PCT', 'REDO_NOWAIT_PCT', 'BUFFER_HIT_PCT',\r\n      'LATCH_HIT_PCT', 'LIBRARY_HIT_PCT', 'SOFT_PARSE_PCT',\r\n      'EXECUTE_TO_PARSE_PCT', 'PARSE_CPU_TO_PARSE_ELAPSD',\r\n      'NON_PARSE_CPU', 'IN_MEMORY_SORT', 'DAILY_ARCH_CNT'\r\n    ]);\r\n\r\n    const toggleDBType = (type) => {\r\n      expandedDBType.value = expandedDBType.value === type ? null : type;\r\n    };\r\n\r\n    const selectDB = (dbName) => {\r\n      selectedDB.value = dbName;\r\n      createCharts();\r\n    };\r\n\r\n    const setChartRef = (el, metric) => {\r\n      if (el) {\r\n        chartRefs.value[metric] = el;\r\n      }\r\n    };\r\n\r\n    const createCharts = () => {\r\n      Object.keys(chartInstances.value).forEach(metric => {\r\n        if (chartInstances.value[metric]) {\r\n          chartInstances.value[metric].destroy();\r\n        }\r\n      });\r\n\r\n      metrics.value.forEach(metric => {\r\n        if (chartRefs.value[metric]) {\r\n          chartInstances.value[metric] = new Chart(chartRefs.value[metric], {\r\n            type: 'line',\r\n            data: {\r\n              labels: ['00:00', '01:00', '02:00', '03:00', '04:00', '05:00'],\r\n              datasets: [{\r\n                label: metric,\r\n                data: Array.from({ length: 6 }, () => Math.floor(Math.random() * 100)),\r\n                borderColor: `hsl(${Math.random() * 360}, 70%, 50%)`,\r\n                fill: false\r\n              }]\r\n            },\r\n            options: {\r\n              responsive: true,\r\n              plugins: { legend: { position: 'top' } }\r\n            }\r\n          });\r\n        }\r\n      });\r\n    };\r\n\r\n    watch(selectedDB, createCharts);\r\n\r\n    onMounted(() => {\r\n      if (selectedDB.value) {\r\n        createCharts();\r\n      }\r\n    });\r\n\r\n    return {\r\n      expandedDBType,\r\n      selectedDB,\r\n      oracleDBList,\r\n      tiberoDBList,\r\n      metrics,\r\n      setChartRef,\r\n      toggleDBType,\r\n      selectDB\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n.content {\r\n  display: flex;\r\n  width: 100%;\r\n  margin-top: 20px;\r\n}\r\n.db-tree {\r\n  width: 250px;\r\n  padding-right: 20px;\r\n  border-right: 2px solid #ddd;\r\n}\r\n.db-tree ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n.db-tree li {\r\n  cursor: pointer;\r\n  padding: 5px;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n.db-tree li:hover {\r\n  background: #f0f0f0;\r\n}\r\n.chart-container {\r\n  flex-grow: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n.charts-row {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n}\r\n.metric-chart {\r\n  width: 33%;\r\n  padding: 10px;\r\n}\r\n.metric-chart h4 {\r\n  text-align: center;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAS;;EAEbA,KAAK,EAAC;AAAS;;EAJ1BC,GAAA;AAAA;mBAAA;;EAAAA,GAAA;AAAA;mBAAA;;EAAAA,GAAA;EA0BWD,KAAK,EAAC;;;EAEJA,KAAK,EAAC;AAAY;;uBA3B7BE,mBAAA,CAmCM,OAnCNC,UAmCM,GAlCJC,mBAAA,CAiCM,OAjCNC,UAiCM,GAhCJC,mBAAA,iBAAoB,EACpBF,mBAAA,CAmBM,OAnBNG,UAmBM,GAlBJH,mBAAA,CAiBK,aAhBHA,mBAAA,CAOK,aANHA,mBAAA,CAAmD;IAA5CI,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,MAAA,CAAAC,YAAY;KAAY,QAAM,GAClCD,MAAA,CAAAE,cAAc,iB,cAAxBX,mBAAA,CAIK,MAZjBY,UAAA,I,kBAScZ,mBAAA,CAEKa,SAAA,QAXnBC,WAAA,CAS+BL,MAAA,CAAAM,YAAY,EAAlBC,EAAE;yBAAbhB,mBAAA,CAEK;MAF2BD,GAAG,EAAEiB,EAAE,CAACC,IAAI;MAAGX,OAAK,EAAAE,MAAA,IAAEC,MAAA,CAAAS,QAAQ,CAACF,EAAE,CAACC,IAAI;wBACjED,EAAE,CAACC,IAAI,wBAV1BE,UAAA;sCAAAf,mBAAA,e,GAcUF,mBAAA,CAOK,aANHA,mBAAA,CAAmD;IAA5CI,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,MAAA,CAAAC,YAAY;KAAY,QAAM,GAClCD,MAAA,CAAAE,cAAc,iB,cAAxBX,mBAAA,CAIK,MApBjBoB,UAAA,I,kBAiBcpB,mBAAA,CAEKa,SAAA,QAnBnBC,WAAA,CAiB+BL,MAAA,CAAAY,YAAY,EAAlBL,EAAE;yBAAbhB,mBAAA,CAEK;MAF2BD,GAAG,EAAEiB,EAAE,CAACC,IAAI;MAAGX,OAAK,EAAAE,MAAA,IAAEC,MAAA,CAAAS,QAAQ,CAACF,EAAE,CAACC,IAAI;wBACjED,EAAE,CAACC,IAAI,wBAlB1BK,UAAA;sCAAAlB,mBAAA,e,OAyBMA,mBAAA,WAAc,EACqBK,MAAA,CAAAc,UAAU,I,cAA7CvB,mBAAA,CAQM,OARNwB,UAQM,GAPJtB,mBAAA,CAAmC,YAAAuB,gBAAA,CAA5BhB,MAAA,CAAAc,UAAU,IAAG,YAAU,iBAC9BrB,mBAAA,CAKM,OALNwB,UAKM,I,kBAJJ1B,mBAAA,CAGMa,SAAA,QAhChBC,WAAA,CA6ByCL,MAAA,CAAAkB,OAAO,EA7BhD,CA6BuBC,MAAM,EAAEC,KAAK;yBAA1B7B,mBAAA,CAGM;MAHmCD,GAAG,EAAE6B,MAAM;MAAE9B,KAAK,EAAC,cAAc;MAAEgC,KAAK,EA7B3FC,eAAA;QAAAC,IAAA,EA6BqGH,KAAK;MAAA;QAC9F3B,mBAAA,CAAqB,YAAAuB,gBAAA,CAAdG,MAAM,kBACb1B,mBAAA,CAAsD;MA/BlE+B,OAAA;MA+BqBC,GAAG,EAAEC,EAAE,IAAI1B,MAAA,CAAA2B,WAAW,CAACD,EAAE,EAAEP,MAAM;;wCA/BtDxB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}