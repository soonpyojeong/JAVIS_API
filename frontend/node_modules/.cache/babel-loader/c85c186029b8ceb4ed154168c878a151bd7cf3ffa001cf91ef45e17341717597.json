{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      thresholds: [],\n      // 원본 데이터\n      searchQuery: \"\",\n      // 검색어 입력값\n      editingIndex: null,\n      // 현재 편집 중인 행의 인덱스\n      editedValue: null // 편집 중인 값\n    };\n  },\n  computed: {\n    // 검색어에 따라 필터링된 데이터를 반환\n    filteredData() {\n      const query = this.searchQuery.toLowerCase();\n      return this.thresholds.filter(threshold => {\n        return threshold.dbName.toLowerCase().includes(query) || threshold.tablespaceName.toLowerCase().includes(query);\n      });\n    }\n  },\n  methods: {\n    // 편집 시작\n    startEditing(index, currentValue) {\n      this.editingIndex = index;\n      this.editedValue = currentValue;\n    },\n    // 편집 취소\n    cancelEditing() {\n      this.editingIndex = null;\n      this.editedValue = null;\n    },\n    // 임계치 업데이트\n    updateThreshold(index) {\n      const updatedThreshold = {\n        ...this.thresholds[index],\n        thresMb: this.editedValue\n      };\n\n      // 서버에 업데이트 요청\n      axios.put(`http://localhost:8080/api/threshold/${updatedThreshold.id}`, {\n        thresMb: this.editedValue\n      }).then(() => {\n        // 로컬 데이터 업데이트 및 편집 종료\n        this.thresholds[index].thresMb = this.editedValue;\n        this.cancelEditing();\n      }).catch(error => {\n        console.error(\"임계치 업데이트 오류:\", error);\n      });\n    }\n  },\n  mounted() {\n    // API 호출\n    axios.get(\"http://localhost:8080/api/threshold/all\").then(response => {\n      console.log(\"--------------threshold console data log--------------\");\n      console.log(response.data);\n      this.thresholds = response.data; // 데이터 저장\n    }).catch(error => {\n      console.error(\"API 호출 오류:\", error);\n    });\n  }\n};","map":{"version":3,"names":["axios","data","thresholds","searchQuery","editingIndex","editedValue","computed","filteredData","query","toLowerCase","filter","threshold","dbName","includes","tablespaceName","methods","startEditing","index","currentValue","cancelEditing","updateThreshold","updatedThreshold","thresMb","put","id","then","catch","error","console","mounted","get","response","log"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\ThresholdList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>임계치 리스트</h2>\r\n\r\n    <!-- 검색 입력 필드 -->\r\n    <input\r\n      v-model=\"searchQuery\"\r\n      type=\"text\"\r\n      placeholder=\"DB 이름 또는 Tablespace 검색\"\r\n      style=\"margin-bottom: 10px; padding: 5px; width: 300px;\"\r\n    />\r\n\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>DB 이름</th>\r\n          <th>Tablespace</th>\r\n          <th>임계치 (MB)</th>\r\n          <th>DB 타입</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <!-- 필터링된 데이터를 표시 -->\r\n        <tr v-for=\"(threshold, index) in filteredData\" :key=\"index\">\r\n          <td>{{ threshold.dbName }}</td>\r\n          <td>{{ threshold.tablespaceName }}</td>\r\n          <td>\r\n            <!-- 클릭하면 인라인 편집 가능 -->\r\n            <span\r\n              v-if=\"editingIndex !== index\"\r\n              @click=\"startEditing(index, threshold.thresMb)\"\r\n              style=\"cursor: pointer;\"\r\n            >\r\n              {{ threshold.thresMb }}\r\n            </span>\r\n            <input\r\n              v-else\r\n              v-model=\"editedValue\"\r\n              @keyup.enter=\"updateThreshold(index)\"\r\n              @blur=\"cancelEditing\"\r\n              type=\"number\"\r\n              style=\"width: 80px;\"\r\n            />\r\n          </td>\r\n          <td>{{ threshold.dbType }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <p v-if=\"filteredData.length === 0\">검색 결과가 없습니다.</p> <!-- 검색 결과가 없을 때 -->\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\nh2 {\r\n  color: #FF5722;\r\n}\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\nth, td {\r\n  border: 1px solid #ccc;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\nth {\r\n  background-color: #f2f2f2;\r\n}\r\n</style>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      thresholds: [], // 원본 데이터\r\n      searchQuery: \"\", // 검색어 입력값\r\n      editingIndex: null, // 현재 편집 중인 행의 인덱스\r\n      editedValue: null, // 편집 중인 값\r\n    };\r\n  },\r\n  computed: {\r\n    // 검색어에 따라 필터링된 데이터를 반환\r\n    filteredData() {\r\n      const query = this.searchQuery.toLowerCase();\r\n      return this.thresholds.filter((threshold) => {\r\n        return (\r\n          threshold.dbName.toLowerCase().includes(query) ||\r\n          threshold.tablespaceName.toLowerCase().includes(query)\r\n        );\r\n      });\r\n    },\r\n  },\r\n  methods: {\r\n    // 편집 시작\r\n    startEditing(index, currentValue) {\r\n      this.editingIndex = index;\r\n      this.editedValue = currentValue;\r\n    },\r\n    // 편집 취소\r\n    cancelEditing() {\r\n      this.editingIndex = null;\r\n      this.editedValue = null;\r\n    },\r\n    // 임계치 업데이트\r\n    updateThreshold(index) {\r\n      const updatedThreshold = {\r\n        ...this.thresholds[index],\r\n        thresMb: this.editedValue,\r\n      };\r\n\r\n      // 서버에 업데이트 요청\r\n      axios\r\n        .put(`http://localhost:8080/api/threshold/${updatedThreshold.id}`, {\r\n          thresMb: this.editedValue,\r\n        })\r\n        .then(() => {\r\n          // 로컬 데이터 업데이트 및 편집 종료\r\n          this.thresholds[index].thresMb = this.editedValue;\r\n          this.cancelEditing();\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"임계치 업데이트 오류:\", error);\r\n        });\r\n    },\r\n  },\r\n  mounted() {\r\n    // API 호출\r\n    axios\r\n      .get(\"http://localhost:8080/api/threshold/all\")\r\n      .then((response) => {\r\n        console.log(\"--------------threshold console data log--------------\");\r\n        console.log(response.data);\r\n        this.thresholds = response.data; // 데이터 저장\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"API 호출 오류:\", error);\r\n      });\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";;AAwEA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,EAAE;MAAE;MAChBC,WAAW,EAAE,EAAE;MAAE;MACjBC,YAAY,EAAE,IAAI;MAAE;MACpBC,WAAW,EAAE,IAAI,CAAE;IACrB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR;IACAC,YAAYA,CAAA,EAAG;MACb,MAAMC,KAAI,GAAI,IAAI,CAACL,WAAW,CAACM,WAAW,CAAC,CAAC;MAC5C,OAAO,IAAI,CAACP,UAAU,CAACQ,MAAM,CAAEC,SAAS,IAAK;QAC3C,OACEA,SAAS,CAACC,MAAM,CAACH,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,KAAK,KAC7CG,SAAS,CAACG,cAAc,CAACL,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,KAAK;MAEzD,CAAC,CAAC;IACJ;EACF,CAAC;EACDO,OAAO,EAAE;IACP;IACAC,YAAYA,CAACC,KAAK,EAAEC,YAAY,EAAE;MAChC,IAAI,CAACd,YAAW,GAAIa,KAAK;MACzB,IAAI,CAACZ,WAAU,GAAIa,YAAY;IACjC,CAAC;IACD;IACAC,aAAaA,CAAA,EAAG;MACd,IAAI,CAACf,YAAW,GAAI,IAAI;MACxB,IAAI,CAACC,WAAU,GAAI,IAAI;IACzB,CAAC;IACD;IACAe,eAAeA,CAACH,KAAK,EAAE;MACrB,MAAMI,gBAAe,GAAI;QACvB,GAAG,IAAI,CAACnB,UAAU,CAACe,KAAK,CAAC;QACzBK,OAAO,EAAE,IAAI,CAACjB;MAChB,CAAC;;MAED;MACAL,KAAI,CACDuB,GAAG,CAAC,uCAAuCF,gBAAgB,CAACG,EAAE,EAAE,EAAE;QACjEF,OAAO,EAAE,IAAI,CAACjB;MAChB,CAAC,EACAoB,IAAI,CAAC,MAAM;QACV;QACA,IAAI,CAACvB,UAAU,CAACe,KAAK,CAAC,CAACK,OAAM,GAAI,IAAI,CAACjB,WAAW;QACjD,IAAI,CAACc,aAAa,CAAC,CAAC;MACtB,CAAC,EACAO,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACtC,CAAC,CAAC;IACN;EACF,CAAC;EACDE,OAAOA,CAAA,EAAG;IACR;IACA7B,KAAI,CACD8B,GAAG,CAAC,yCAAyC,EAC7CL,IAAI,CAAEM,QAAQ,IAAK;MAClBH,OAAO,CAACI,GAAG,CAAC,wDAAwD,CAAC;MACrEJ,OAAO,CAACI,GAAG,CAACD,QAAQ,CAAC9B,IAAI,CAAC;MAC1B,IAAI,CAACC,UAAS,GAAI6B,QAAQ,CAAC9B,IAAI,EAAE;IACnC,CAAC,EACAyB,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IACpC,CAAC,CAAC;EACN;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}