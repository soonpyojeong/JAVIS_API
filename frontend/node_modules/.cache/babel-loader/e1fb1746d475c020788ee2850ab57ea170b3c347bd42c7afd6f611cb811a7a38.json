{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { ref, nextTick, onMounted } from 'vue';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nexport default {\n  setup() {\n    const expandedDBType = ref({\n      oracle: false,\n      tibero: false\n    });\n    const selectedDB = ref(null);\n    const oracleDBList = ref([]); // ORACLE DB 리스트\n    const tiberoDBList = ref([]); // TIBERO DB 리스트\n    const metrics = ref(['TRANSACTIONS', 'TOTAL_SESSION', 'ACTIVE_SESSION', 'BUFFER_NOWAIT_PCT', 'REDO_NOWAIT_PCT', 'BUFFER_HIT_PCT', 'LATCH_HIT_PCT', 'LIBRARY_HIT_PCT', 'SOFT_PARSE_PCT', 'EXECUTE_TO_PARSE_PCT', 'PARSE_CPU_TO_PARSE_ELAPSD', 'NON_PARSE_CPU', 'IN_MEMORY_SORT', 'DAILY_ARCH_CNT']);\n    const dbData = ref([]); // 두 날의 DB 데이터 저장\n\n    // DB 목록을 불러오는 함수\n    const fetchDbList = async () => {\n      try {\n        const response = await axios.get('/api/dailychk/db-list');\n        const dbList = response.data;\n        oracleDBList.value = dbList.ORACLE || [];\n        tiberoDBList.value = dbList.TIBERO || [];\n      } catch (error) {\n        console.error(\"DB 목록을 불러오는 데 실패했습니다.\", error);\n      }\n    };\n\n    // DB 종류별 트리 토글\n    const toggleDBType = type => {\n      expandedDBType.value[type] = !expandedDBType.value[type];\n    };\n\n    // DB 선택 시 데이터 받아오기\n    const selectDB = async dbName => {\n      selectedDB.value = dbName;\n      await fetchDbData(dbName); // 데이터 불러오기\n      nextTick(() => {\n        renderCharts();\n      });\n    };\n\n    // 선택한 DB에 대한 데이터를 가져오는 함수\n    const fetchDbData = async dbName => {\n      try {\n        const response = await axios.get(`/api/dailychk/${dbName}/data`);\n        dbData.value = response.data;\n      } catch (error) {\n        console.error(\"DB 데이터를 불러오는 데 실패했습니다.\", error);\n      }\n    };\n\n    // 차트 렌더링 함수\n    const renderCharts = () => {\n      metrics.value.forEach((metric, index) => {\n        const canvas = document.querySelector(`[ref=\"chartRef_${index}\"]`);\n        if (canvas) {\n          if (canvas.chart) {\n            canvas.chart.destroy();\n          }\n\n          // 두 날의 데이터 처리\n          const dataToday = dbData.value[0] ? dbData.value[0][metric] : 0; // 오늘 데이터\n          const dataYesterday = dbData.value[1] ? dbData.value[1][metric] : 0; // 어제 데이터\n\n          // 차트 생성\n          canvas.chart = new Chart(canvas, {\n            type: 'line',\n            data: {\n              labels: ['Yesterday', 'Today'],\n              datasets: [{\n                label: `${metric} (Yesterday)`,\n                data: [dataYesterday, dataToday],\n                borderColor: 'gray',\n                fill: false\n              }, {\n                label: `${metric} (Today)`,\n                data: [dataToday, dataYesterday],\n                borderColor: 'blue',\n                fill: false\n              }]\n            },\n            options: {\n              responsive: false,\n              maintainAspectRatio: false,\n              width: 100,\n              height: 90\n            }\n          });\n        }\n      });\n    };\n    onMounted(() => {\n      fetchDbList();\n    });\n    return {\n      expandedDBType,\n      selectedDB,\n      oracleDBList,\n      tiberoDBList,\n      metrics,\n      dbData,\n      toggleDBType,\n      // toggleDBType 함수 추가\n      selectDB\n    };\n  }\n};","map":{"version":3,"names":["ref","nextTick","onMounted","axios","Chart","setup","expandedDBType","oracle","tibero","selectedDB","oracleDBList","tiberoDBList","metrics","dbData","fetchDbList","response","get","dbList","data","value","ORACLE","TIBERO","error","console","toggleDBType","type","selectDB","dbName","fetchDbData","renderCharts","forEach","metric","index","canvas","document","querySelector","chart","destroy","dataToday","dataYesterday","labels","datasets","label","borderColor","fill","options","responsive","maintainAspectRatio","width","height"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DailyChk.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 왼쪽 DB 트리 구조 -->\r\n    <div class=\"db-tree\">\r\n      <ul>\r\n        <li>\r\n          <span @click=\"toggleDBType('oracle')\" class=\"tree-node\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.oracle ? '-' : '+' }}</span> ORACLE\r\n          </span>\r\n          <ul v-if=\"expandedDBType.oracle\" class=\"sub-tree\">\r\n            <li v-for=\"db in oracleDBList\" :key=\"db\" class=\"db-item\">\r\n              <span @click=\"selectDB(db)\">\r\n                <span class=\"leaf-icon\"></span> {{ db }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n        <li>\r\n          <span @click=\"toggleDBType('tibero')\" class=\"tree-node\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.tibero ? '-' : '+' }}</span> TIBERO\r\n          </span>\r\n          <ul v-if=\"expandedDBType.tibero\" class=\"sub-tree\">\r\n            <li v-for=\"db in tiberoDBList\" :key=\"db\" class=\"db-item\">\r\n              <span @click=\"selectDB(db)\">\r\n                <span class=\"leaf-icon\"></span> {{ db }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <!-- 중앙 차트 (트리 오른쪽에 오도록 설정) -->\r\n    <div class=\"chart-container\" v-if=\"selectedDB\">\r\n      <h3>{{ selectedDB }} - Metrics</h3>\r\n      <div class=\"charts-row\">\r\n        <div v-for=\"(metric, index) in metrics\" :key=\"metric\" class=\"metric-chart\">\r\n          <h4>{{ metric }}</h4>\r\n          <canvas :ref=\"`chartRef_${index}`\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, nextTick, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  setup() {\r\n    const expandedDBType = ref({ oracle: false, tibero: false });\r\n    const selectedDB = ref(null);\r\n    const oracleDBList = ref([]);  // ORACLE DB 리스트\r\n    const tiberoDBList = ref([]);  // TIBERO DB 리스트\r\n    const metrics = ref([\r\n      'TRANSACTIONS', 'TOTAL_SESSION', 'ACTIVE_SESSION',\r\n      'BUFFER_NOWAIT_PCT', 'REDO_NOWAIT_PCT', 'BUFFER_HIT_PCT',\r\n      'LATCH_HIT_PCT', 'LIBRARY_HIT_PCT', 'SOFT_PARSE_PCT',\r\n      'EXECUTE_TO_PARSE_PCT', 'PARSE_CPU_TO_PARSE_ELAPSD', 'NON_PARSE_CPU',\r\n      'IN_MEMORY_SORT', 'DAILY_ARCH_CNT'\r\n    ]);\r\n    const dbData = ref([]); // 두 날의 DB 데이터 저장\r\n\r\n    // DB 목록을 불러오는 함수\r\n    const fetchDbList = async () => {\r\n      try {\r\n        const response = await axios.get('/api/dailychk/db-list');\r\n        const dbList = response.data;\r\n        oracleDBList.value = dbList.ORACLE || [];\r\n        tiberoDBList.value = dbList.TIBERO || [];\r\n      } catch (error) {\r\n        console.error(\"DB 목록을 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    // DB 종류별 트리 토글\r\n    const toggleDBType = (type) => {\r\n      expandedDBType.value[type] = !expandedDBType.value[type];\r\n    };\r\n\r\n    // DB 선택 시 데이터 받아오기\r\n    const selectDB = async (dbName) => {\r\n      selectedDB.value = dbName;\r\n      await fetchDbData(dbName); // 데이터 불러오기\r\n      nextTick(() => {\r\n        renderCharts();\r\n      });\r\n    };\r\n\r\n    // 선택한 DB에 대한 데이터를 가져오는 함수\r\n    const fetchDbData = async (dbName) => {\r\n      try {\r\n        const response = await axios.get(`/api/dailychk/${dbName}/data`);\r\n        dbData.value = response.data;\r\n      } catch (error) {\r\n        console.error(\"DB 데이터를 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    // 차트 렌더링 함수\r\n    const renderCharts = () => {\r\n      metrics.value.forEach((metric, index) => {\r\n        const canvas = document.querySelector(`[ref=\"chartRef_${index}\"]`);\r\n        if (canvas) {\r\n          if (canvas.chart) {\r\n            canvas.chart.destroy();\r\n          }\r\n\r\n          // 두 날의 데이터 처리\r\n          const dataToday = dbData.value[0] ? dbData.value[0][metric] : 0; // 오늘 데이터\r\n          const dataYesterday = dbData.value[1] ? dbData.value[1][metric] : 0; // 어제 데이터\r\n\r\n          // 차트 생성\r\n          canvas.chart = new Chart(canvas, {\r\n            type: 'line',\r\n            data: {\r\n              labels: ['Yesterday', 'Today'],\r\n              datasets: [\r\n                {\r\n                  label: `${metric} (Yesterday)`,\r\n                  data: [dataYesterday, dataToday],\r\n                  borderColor: 'gray',\r\n                  fill: false,\r\n                },\r\n                {\r\n                  label: `${metric} (Today)`,\r\n                  data: [dataToday, dataYesterday],\r\n                  borderColor: 'blue',\r\n                  fill: false,\r\n                }\r\n              ]\r\n            },\r\n            options: {\r\n              responsive: false,\r\n              maintainAspectRatio: false,\r\n              width: 100,\r\n              height: 90\r\n            }\r\n          });\r\n        }\r\n      });\r\n    };\r\n\r\n    onMounted(() => {\r\n      fetchDbList();\r\n    });\r\n\r\n    return {\r\n      expandedDBType,\r\n      selectedDB,\r\n      oracleDBList,\r\n      tiberoDBList,\r\n      metrics,\r\n      dbData,\r\n      toggleDBType,  // toggleDBType 함수 추가\r\n      selectDB\r\n    };\r\n  }\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}