{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h2\", null, _toDisplayString(_ctx.selectedTb) + \" - 테이블스페이스 리스트\", 1 /* TEXT */), _createCommentVNode(\" 검색 입력 필드 \"), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.searchQuery = $event),\n    type: \"text\",\n    placeholder: \"테이블스페이스 검색\",\n    style: {\n      \"margin-bottom\": \"10px\",\n      \"padding\": \"5px\",\n      \"width\": \"300px\"\n    }\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.searchQuery]]), _createElementVNode(\"table\", null, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", {\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.sortData('tsName'))\n  }, \"Tablespace 이름\"), _createElementVNode(\"th\", {\n    onClick: _cache[2] || (_cache[2] = $event => _ctx.sortData('totalSize'))\n  }, \"총 크기 (MB)\"), _createElementVNode(\"th\", {\n    onClick: _cache[3] || (_cache[3] = $event => _ctx.sortData('usedSize'))\n  }, \"사용량 (MB)\"), _createElementVNode(\"th\", {\n    onClick: _cache[4] || (_cache[4] = $event => _ctx.sortData('freeSize'))\n  }, \"남은 크기 (MB)\"), _createElementVNode(\"th\", {\n    onClick: _cache[5] || (_cache[5] = $event => _ctx.sortData('usedRate'))\n  }, \"사용률 (%)\")])]), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.filteredTablespaces, (ts, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(ts.tsName), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(ts.totalSize), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(ts.usedSize), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(ts.freeSize), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(ts.usedRate), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _ctx.filteredTablespaces.length === 0 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_1, \"검색 결과가 없습니다.\")) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","_toDisplayString","_ctx","selectedTb","_createCommentVNode","_cache","$event","searchQuery","type","placeholder","style","onClick","sortData","_Fragment","_renderList","filteredTablespaces","ts","index","tsName","totalSize","usedSize","freeSize","usedRate","length","_hoisted_1"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\TablespacesList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>{{ selectedTb }} - 테이블스페이스 리스트</h2>\r\n\r\n    <!-- 검색 입력 필드 -->\r\n    <input\r\n      v-model=\"searchQuery\"\r\n      type=\"text\"\r\n      placeholder=\"테이블스페이스 검색\"\r\n      style=\"margin-bottom: 10px; padding: 5px; width: 300px;\"\r\n    />\r\n\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th @click=\"sortData('tsName')\">Tablespace 이름</th>\r\n          <th @click=\"sortData('totalSize')\">총 크기 (MB)</th>\r\n          <th @click=\"sortData('usedSize')\">사용량 (MB)</th>\r\n          <th @click=\"sortData('freeSize')\">남은 크기 (MB)</th>\r\n          <th @click=\"sortData('usedRate')\">사용률 (%)</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(ts, index) in filteredTablespaces\" :key=\"index\">\r\n          <td>{{ ts.tsName }}</td>\r\n          <td>{{ ts.totalSize }}</td>\r\n          <td>{{ ts.usedSize }}</td>\r\n          <td>{{ ts.freeSize }}</td>\r\n          <td>{{ ts.usedRate }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <p v-if=\"filteredTablespaces.length === 0\">검색 결과가 없습니다.</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n    axios.get('/api/tb/list')\r\n      .then(response => {\r\n        console.log(response.data); // 데이터 확인\r\n        this.tbList = response.data;\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error fetching data: \", error);\r\n      });\r\n\r\n  data() {\r\n    return {\r\n      selectedTb: null, // 선택된 TB 이름\r\n      tablespaces: [], // 테이블스페이스 데이터\r\n      searchQuery: \"\", // 검색어\r\n      sortKey: \"tsName\", // 정렬 키\r\n      sortOrder: 1, // 정렬 순서 (1: 오름차순, -1: 내림차순)\r\n    };\r\n  },\r\n  computed: {\r\n    // 검색 및 정렬된 테이블스페이스 데이터\r\n    filteredTablespaces() {\r\n      let result = this.tablespaces.filter((ts) =>\r\n        ts.tsName.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n      );\r\n      return result.sort((a, b) => {\r\n        const aValue = a[this.sortKey];\r\n        const bValue = b[this.sortKey];\r\n        if (aValue < bValue) return -1 * this.sortOrder;\r\n        if (aValue > bValue) return 1 * this.sortOrder;\r\n        return 0;\r\n      });\r\n    },\r\n  },\r\n  methods: {\r\n    fetchTablespaces(tbName) {\r\n      this.selectedTb = tbName;\r\n      this.tablespaces = [];\r\n      axios.get(`/api/tb/${tbName}/tablespaces`).then((res) => {\r\n        this.tablespaces = res.data;\r\n      });\r\n    },\r\n    sortData(key) {\r\n      if (this.sortKey === key) {\r\n        this.sortOrder *= -1; // 동일 키를 클릭하면 정렬 순서 변경\r\n      } else {\r\n        this.sortKey = key; // 새 키로 정렬\r\n        this.sortOrder = 1;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-top: 20px;\r\n}\r\n\r\nth,\r\ntd {\r\n  border: 1px solid #ddd;\r\n  text-align: left;\r\n  padding: 8px;\r\n}\r\n\r\nth {\r\n  cursor: pointer;\r\n  background-color: #f4f4f4;\r\n}\r\n\r\ninput {\r\n  margin-bottom: 10px;\r\n}\r\n</style>\r\n"],"mappings":";;EAAAA,GAAA;AAAA;;uBACEC,mBAAA,CAiCM,cAhCJC,mBAAA,CAAuC,YAAAC,gBAAA,CAAhCC,IAAA,CAAAC,UAAU,IAAG,gBAAc,iBAElCC,mBAAA,cAAiB,E,gBACjBJ,mBAAA,CAKE;IAVN,uBAAAK,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAMeJ,IAAA,CAAAK,WAAW,GAAAD,MAAA;IACpBE,IAAI,EAAC,MAAM;IACXC,WAAW,EAAC,YAAY;IACxBC,KAAwD,EAAxD;MAAA;MAAA;MAAA;IAAA;iDAHSR,IAAA,CAAAK,WAAW,E,GAMtBP,mBAAA,CAmBQ,gBAlBNA,mBAAA,CAQQ,gBAPNA,mBAAA,CAMK,aALHA,mBAAA,CAAkD;IAA7CW,OAAK,EAAAN,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEJ,IAAA,CAAAU,QAAQ;KAAY,eAAa,GAC7CZ,mBAAA,CAAiD;IAA5CW,OAAK,EAAAN,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEJ,IAAA,CAAAU,QAAQ;KAAe,WAAS,GAC5CZ,mBAAA,CAA+C;IAA1CW,OAAK,EAAAN,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEJ,IAAA,CAAAU,QAAQ;KAAc,UAAQ,GAC1CZ,mBAAA,CAAiD;IAA5CW,OAAK,EAAAN,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEJ,IAAA,CAAAU,QAAQ;KAAc,YAAU,GAC5CZ,mBAAA,CAA8C;IAAzCW,OAAK,EAAAN,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEJ,IAAA,CAAAU,QAAQ;KAAc,SAAO,E,KAG7CZ,mBAAA,CAQQ,iB,kBAPND,mBAAA,CAMKc,SAAA,QA7BbC,WAAA,CAuBkCZ,IAAA,CAAAa,mBAAmB,EAvBrD,CAuBoBC,EAAE,EAAEC,KAAK;yBAArBlB,mBAAA,CAMK;MAN2CD,GAAG,EAAEmB;IAAK,IACxDjB,mBAAA,CAAwB,YAAAC,gBAAA,CAAjBe,EAAE,CAACE,MAAM,kBAChBlB,mBAAA,CAA2B,YAAAC,gBAAA,CAApBe,EAAE,CAACG,SAAS,kBACnBnB,mBAAA,CAA0B,YAAAC,gBAAA,CAAnBe,EAAE,CAACI,QAAQ,kBAClBpB,mBAAA,CAA0B,YAAAC,gBAAA,CAAnBe,EAAE,CAACK,QAAQ,kBAClBrB,mBAAA,CAA0B,YAAAC,gBAAA,CAAnBe,EAAE,CAACM,QAAQ,iB;sCAKfpB,IAAA,CAAAa,mBAAmB,CAACQ,MAAM,U,cAAnCxB,mBAAA,CAA2D,KAjC/DyB,UAAA,EAiC+C,cAAY,KAjC3DpB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}