{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, withKeys as _withKeys } from \"vue\";\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = [\"onUpdate:modelValue\", \"onKeyup\", \"onBlur\"];\nconst _hoisted_3 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"임계치 리스트\", -1 /* HOISTED */)), _createCommentVNode(\" 검색 입력 필드 \"), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.searchQuery = $event),\n    type: \"text\",\n    placeholder: \"DB 이름 또는 Tablespace 검색\",\n    style: {\n      \"margin-bottom\": \"10px\",\n      \"padding\": \"5px\",\n      \"width\": \"300px\"\n    }\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.searchQuery]]), _createElementVNode(\"table\", null, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", {\n    onClick: _cache[1] || (_cache[1] = $event => $options.sortData('dbName'))\n  }, \"DB 이름\"), _createElementVNode(\"th\", {\n    onClick: _cache[2] || (_cache[2] = $event => $options.sortData('tablespaceName'))\n  }, \"Tablespace\"), _createElementVNode(\"th\", {\n    onClick: _cache[3] || (_cache[3] = $event => $options.sortData('thresMb'))\n  }, \"임계치 (MB)\"), _createElementVNode(\"th\", {\n    onClick: _cache[4] || (_cache[4] = $event => $options.sortData('dbType'))\n  }, \"DB 타입\")])]), _createElementVNode(\"tbody\", null, [_createCommentVNode(\" 필터링된 데이터를 표시 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredData, (threshold, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(threshold.dbName), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(threshold.tablespaceName), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createCommentVNode(\" 클릭하면 인라인 편집 가능 \"), !threshold.isEditing ? (_openBlock(), _createElementBlock(\"span\", {\n      key: 0,\n      onClick: $event => $options.startEditing(threshold),\n      style: {\n        \"cursor\": \"pointer\"\n      }\n    }, _toDisplayString(threshold.thresMb), 9 /* TEXT, PROPS */, _hoisted_1)) : _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n      key: 1,\n      \"onUpdate:modelValue\": $event => threshold.editedValue = $event,\n      onKeyup: _withKeys($event => $options.updateThreshold(threshold), [\"enter\"]),\n      onBlur: $event => $options.cancelEditing(threshold),\n      type: \"number\",\n      style: {\n        \"width\": \"80px\"\n      }\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_2)), [[_vModelText, threshold.editedValue]])]), _createElementVNode(\"td\", null, _toDisplayString(threshold.dbType), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), $options.filteredData.length === 0 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \"검색 결과가 없습니다.\")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 검색 결과가 없을 때 \")]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","_createCommentVNode","_cache","$event","$data","searchQuery","type","placeholder","style","onClick","$options","sortData","_Fragment","_renderList","filteredData","threshold","index","_toDisplayString","dbName","tablespaceName","isEditing","startEditing","thresMb","_hoisted_1","editedValue","onKeyup","_withKeys","updateThreshold","onBlur","cancelEditing","_hoisted_2","dbType","length","_hoisted_3"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\ThresholdList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>임계치 리스트</h2>\r\n\r\n    <!-- 검색 입력 필드 -->\r\n    <input\r\n      v-model=\"searchQuery\"\r\n      type=\"text\"\r\n      placeholder=\"DB 이름 또는 Tablespace 검색\"\r\n      style=\"margin-bottom: 10px; padding: 5px; width: 300px;\"\r\n    />\r\n\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th @click=\"sortData('dbName')\">DB 이름</th>\r\n          <th @click=\"sortData('tablespaceName')\">Tablespace</th>\r\n          <th @click=\"sortData('thresMb')\">임계치 (MB)</th>\r\n          <th @click=\"sortData('dbType')\">DB 타입</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <!-- 필터링된 데이터를 표시 -->\r\n        <tr v-for=\"(threshold, index) in filteredData\" :key=\"index\">\r\n          <td>{{ threshold.dbName }}</td>\r\n          <td>{{ threshold.tablespaceName }}</td>\r\n          <td>\r\n            <!-- 클릭하면 인라인 편집 가능 -->\r\n            <span\r\n              v-if=\"!threshold.isEditing\"\r\n              @click=\"startEditing(threshold)\"\r\n              style=\"cursor: pointer;\"\r\n            >\r\n              {{ threshold.thresMb }}\r\n            </span>\r\n            <input\r\n              v-else\r\n              v-model=\"threshold.editedValue\"\r\n              @keyup.enter=\"updateThreshold(threshold)\"\r\n              @blur=\"cancelEditing(threshold)\"\r\n              type=\"number\"\r\n              style=\"width: 80px;\"\r\n            />\r\n          </td>\r\n          <td>{{ threshold.dbType }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <p v-if=\"filteredData.length === 0\">검색 결과가 없습니다.</p> <!-- 검색 결과가 없을 때 -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      thresholds: [], // 원본 데이터\r\n      searchQuery: \"\", // 검색어 입력값\r\n      sortBy: \"\", // 정렬 기준\r\n      sortOrder: \"asc\", // 정렬 방향 (오름차순 또는 내림차순)\r\n    };\r\n  },\r\n  computed: {\r\n    // 검색어에 따라 필터링된 데이터를 반환\r\n    filteredData() {\r\n      const query = this.searchQuery.toLowerCase();\r\n      const filtered = this.thresholds.filter((threshold) => {\r\n        return (\r\n          threshold.dbName.toLowerCase().includes(query) ||\r\n          threshold.tablespaceName.toLowerCase().includes(query)\r\n        );\r\n      });\r\n\r\n      // 정렬된 데이터를 반환\r\n      return this.sortDataBy(filtered);\r\n    },\r\n  },\r\n  methods: {\r\n    // 편집 시작\r\n    startEditing(threshold) {\r\n      threshold.isEditing = true;\r\n      threshold.editedValue = threshold.thresMb; // 원본 값 저장\r\n    },\r\n    // 편집 취소\r\n    cancelEditing(threshold) {\r\n      threshold.isEditing = false;\r\n      threshold.editedValue = null;\r\n    },\r\n    // 임계치 업데이트\r\n    updateThreshold(threshold) {\r\n      const updatedThreshold = {\r\n        id: threshold.id, // ID가 필요\r\n        thresMb: threshold.editedValue,\r\n      };\r\n\r\n      // 서버에 PUT 요청\r\n      axios\r\n        .put(`http://localhost:8080/api/threshold/${updatedThreshold.id}`, updatedThreshold)\r\n        .then((response) => {\r\n          if (response.data) {\r\n            // 로컬 데이터 업데이트 및 편집 종료\r\n            threshold.thresMb = threshold.editedValue;\r\n            threshold.isEditing = false;\r\n          } else {\r\n            console.error(\"임계치 업데이트 실패\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"임계치 업데이트 오류:\", error);\r\n        });\r\n    },\r\n\r\n    // 테이블 정렬\r\n    sortData(column) {\r\n      if (this.sortBy === column) {\r\n        // 이미 같은 컬럼을 클릭했으면 정렬 방향을 바꿔줌\r\n        this.sortOrder = this.sortOrder === \"asc\" ? \"desc\" : \"asc\";\r\n      } else {\r\n        this.sortBy = column;\r\n        this.sortOrder = \"asc\"; // 새 컬럼이 선택되면 오름차순으로 기본 설정\r\n      }\r\n    },\r\n\r\n    // 데이터 정렬 로직\r\n    sortDataBy(data) {\r\n      return data.sort((a, b) => {\r\n        let valA = a[this.sortBy];\r\n        let valB = b[this.sortBy];\r\n\r\n        // 숫자 정렬인 경우\r\n        if (typeof valA === \"number\" && typeof valB === \"number\") {\r\n          return this.sortOrder === \"asc\" ? valA - valB : valB - valA;\r\n        }\r\n\r\n        // 문자열 정렬인 경우\r\n        if (typeof valA === \"string\" && typeof valB === \"string\") {\r\n          return this.sortOrder === \"asc\"\r\n            ? valA.localeCompare(valB)\r\n            : valB.localeCompare(valA);\r\n        }\r\n\r\n        return 0;\r\n      });\r\n    },\r\n  },\r\n  mounted() {\r\n    // API 호출\r\n    axios\r\n      .get(\"http://localhost:8080/api/threshold/all\")\r\n      .then((response) => {\r\n        this.thresholds = response.data.map((threshold) => ({\r\n          ...threshold,\r\n          isEditing: false,  // 각 데이터에 편집 상태 추가\r\n          editedValue: null, // 편집 상태 초기화\r\n        }));\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"API 호출 오류:\", error);\r\n      });\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";mBAAA;mBAAA;;EAAAA,GAAA;AAAA;;uBACEC,mBAAA,CAiDM,c,0BAhDJC,mBAAA,CAAgB,YAAZ,SAAO,sBAEXC,mBAAA,cAAiB,E,gBACjBD,mBAAA,CAKE;IAVN,uBAAAE,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAMeC,KAAA,CAAAC,WAAW,GAAAF,MAAA;IACpBG,IAAI,EAAC,MAAM;IACXC,WAAW,EAAC,wBAAwB;IACpCC,KAAwD,EAAxD;MAAA;MAAA;MAAA;IAAA;iDAHSJ,KAAA,CAAAC,WAAW,E,GAMtBL,mBAAA,CAmCQ,gBAlCNA,mBAAA,CAOQ,gBANNA,mBAAA,CAKK,aAJHA,mBAAA,CAA0C;IAArCS,OAAK,EAAAP,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEO,QAAA,CAAAC,QAAQ;KAAY,OAAK,GACrCX,mBAAA,CAAuD;IAAlDS,OAAK,EAAAP,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEO,QAAA,CAAAC,QAAQ;KAAoB,YAAU,GAClDX,mBAAA,CAA8C;IAAzCS,OAAK,EAAAP,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEO,QAAA,CAAAC,QAAQ;KAAa,UAAQ,GACzCX,mBAAA,CAA0C;IAArCS,OAAK,EAAAP,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEO,QAAA,CAAAC,QAAQ;KAAY,OAAK,E,KAGzCX,mBAAA,CAyBQ,gBAxBNC,mBAAA,kBAAqB,G,kBACrBF,mBAAA,CAsBKa,SAAA,QA7CbC,WAAA,CAuByCH,QAAA,CAAAI,YAAY,EAvBrD,CAuBoBC,SAAS,EAAEC,KAAK;yBAA5BjB,mBAAA,CAsBK;MAtB2CD,GAAG,EAAEkB;IAAK,IACxDhB,mBAAA,CAA+B,YAAAiB,gBAAA,CAAxBF,SAAS,CAACG,MAAM,kBACvBlB,mBAAA,CAAuC,YAAAiB,gBAAA,CAAhCF,SAAS,CAACI,cAAc,kBAC/BnB,mBAAA,CAiBK,aAhBHC,mBAAA,oBAAuB,E,CAEdc,SAAS,CAACK,SAAS,I,cAD5BrB,mBAAA,CAMO;MAlCnBD,GAAA;MA8BeW,OAAK,EAAAN,MAAA,IAAEO,QAAA,CAAAW,YAAY,CAACN,SAAS;MAC9BP,KAAwB,EAAxB;QAAA;MAAA;wBAEGO,SAAS,CAACO,OAAO,wBAjClCC,UAAA,K,+BAmCYxB,mBAAA,CAOE;MA1CdD,GAAA;MAAA,uBAAAK,MAAA,IAqCuBY,SAAS,CAACS,WAAW,GAAArB,MAAA;MAC7BsB,OAAK,EAtCpBC,SAAA,CAAAvB,MAAA,IAsC4BO,QAAA,CAAAiB,eAAe,CAACZ,SAAS;MACtCa,MAAI,EAAAzB,MAAA,IAAEO,QAAA,CAAAmB,aAAa,CAACd,SAAS;MAC9BT,IAAI,EAAC,QAAQ;MACbE,KAAoB,EAApB;QAAA;MAAA;6CAzCdsB,UAAA,K,cAqCuBf,SAAS,CAACS,WAAW,E,KAOlCxB,mBAAA,CAA+B,YAAAiB,gBAAA,CAAxBF,SAAS,CAACgB,MAAM,iB;sCAKpBrB,QAAA,CAAAI,YAAY,CAACkB,MAAM,U,cAA5BjC,mBAAA,CAAoD,KAjDxDkC,UAAA,EAiDwC,cAAY,KAjDpDhC,mBAAA,gBAiDyDA,mBAAA,iBAAoB,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}