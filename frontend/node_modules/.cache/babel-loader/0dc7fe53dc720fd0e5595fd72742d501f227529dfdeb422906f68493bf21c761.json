{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      smsHistories: [],\n      filteredSmsHistories: [],\n      day: 3,\n      // 기본값\n      msgSearch: '',\n      showModal: false,\n      updateMessage: ''\n    };\n  },\n  mounted() {\n    this.fetchSmsHistories();\n  },\n  methods: {\n    methods: {\n      fetchSmsHistories() {\n        console.log(\"조회할 일수(day) 값:\", this.day);\n        if (this.day && this.day > 0) {\n          // day 값이 1 이상일 때만 API 요청\n          axios.get(`/api/sms/all?day=${this.day}`).then(response => {\n            // API에서 반환된 전체 응답을 콘솔로 출력하여 확인\n            console.log(\"API 응답:\", response);\n            if (Array.isArray(response.data)) {\n              this.smsHistories = response.data;\n\n              // inDate와 inTime을 결합하여 비교할 수 있도록 정렬\n              this.smsHistories.sort((a, b) => {\n                const dateA = a.inDate + a.inTime;\n                const dateB = b.inDate + b.inTime;\n                return dateB.localeCompare(dateA); // 최신 순으로 정렬\n              });\n              this.filteredSmsHistories = [...this.smsHistories]; // 필터링된 목록 갱신\n            } else {\n              console.error(\"응답 데이터가 배열이 아닙니다:\", response.data);\n            }\n          }).catch(error => {\n            console.error('Error fetching SMS histories:', error);\n          });\n        } else {\n          console.log('조회할 일수가 올바르지 않습니다.');\n          this.smsHistories = [];\n          this.filteredSmsHistories = [];\n        }\n      },\n      // 메시지 내용 필터링 함수\n      filterSmsHistories() {\n        // msgSearch가 있을 경우 필터링\n        this.filteredSmsHistories = this.msgSearch ? this.smsHistories.filter(history => history.msg && history.msg.includes(this.msgSearch)) : this.smsHistories;\n      },\n      // 대량 메시지 전송 처리\n      updateAllSmsHistories() {\n        axios.put('/api/sms/updateall').then(response => {\n          const updatedCount = response.data?.updatedCount || 0;\n          this.updateMessage = `전체 메시지 전송 처리가 완료되었습니다. (총 ${updatedCount}건)`;\n          this.showModal = true;\n          this.fetchSmsHistories(); // 완료 후 다시 조회\n        }).catch(error => {\n          console.error('Error updating SMS histories:', error);\n        });\n      }\n    },\n    computed: {\n      filteredSmsHistories() {\n        if (this.msgSearch) {\n          return this.smsHistories.filter(history => history.msg && history.msg.includes(this.msgSearch));\n        }\n        return this.smsHistories;\n      }\n    },\n    filterSmsHistories() {\n      // msgSearch가 있을 경우 필터링\n      this.filteredSmsHistories = this.msgSearch ? this.smsHistories.filter(history => history.msg && history.msg.includes(this.msgSearch)) : this.smsHistories;\n    },\n    updateAllSmsHistories() {\n      axios.put('/api/sms/updateall').then(response => {\n        const updatedCount = response.data?.updatedCount || 0;\n        this.updateMessage = `전체 메시지 전송 처리가 완료되었습니다. (총 ${updatedCount}건)`;\n        this.showModal = true;\n        this.fetchSmsHistories(); // 완료 후 다시 조회\n      }).catch(error => {\n        console.error('Error updating SMS histories:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","smsHistories","filteredSmsHistories","day","msgSearch","showModal","updateMessage","mounted","fetchSmsHistories","methods","console","log","get","then","response","Array","isArray","sort","a","b","dateA","inDate","inTime","dateB","localeCompare","error","catch","filterSmsHistories","filter","history","msg","includes","updateAllSmsHistories","put","updatedCount","computed"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\SmsHistory.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h1 class=\"title\">📨 SMS 전송 히스토리</h1>\r\n\r\n    <div class=\"control-box\">\r\n      <!-- 조회일수 + 조회 버튼 한 줄 정렬 -->\r\n      <div class=\"row-group\">\r\n        <label for=\"days\">조회할 일수</label>\r\n        <input type=\"number\" id=\"days\" v-model=\"day\" min=\"1\" />\r\n        <button @click=\"fetchSmsHistories\">조회</button>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"msgSearch\">MSG 내용 검색</label>\r\n        <input type=\"text\" id=\"msgSearch\" v-model=\"msgSearch\" @input=\"filterSmsHistories\" />\r\n      </div>\r\n\r\n      <div class=\"button-group\">\r\n        <button @click=\"updateAllSmsHistories\" class=\"orange\" title=\"명절이나 장시간 관제 중지시 사용!!\">대량 메시지 전송 처리</button>\r\n      </div>\r\n    </div>\r\n\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>SEQNO</th>\r\n          <th>INDATE</th>\r\n          <th>INTIME</th>\r\n          <th>SENDNAME</th>\r\n          <th>RECVNAME</th>\r\n          <th>MSG</th>\r\n          <th>RESULT</th>\r\n          <th>KIND</th>\r\n          <th>ERRCODE</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"history in filteredSmsHistories\" :key=\"history.SEQNO\">\r\n          <td>{{ history.SEQNO }}</td>\r\n          <td>{{ history.inDate }}</td>\r\n          <td>{{ history.inTime }}</td>\r\n          <td>{{ history.sendName }}</td>\r\n          <td>{{ history.recName }}</td>\r\n          <td>{{ history.msg }}</td>\r\n          <td>{{ history.result }}</td>\r\n          <td>{{ history.kind }}</td>\r\n          <td>{{ history.errCode }}</td>\r\n        </tr>\r\n      </tbody>\r\n\r\n    </table>\r\n\r\n    <!-- 모달 팝업 -->\r\n    <div v-if=\"showModal\" class=\"modal-overlay\">\r\n      <div class=\"modal\">\r\n        <p>✅ {{ updateMessage }}</p>\r\n        <button @click=\"showModal = false\">확인</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      smsHistories: [],\r\n      filteredSmsHistories: [],\r\n      day: 3,  // 기본값\r\n      msgSearch: '',\r\n      showModal: false,\r\n      updateMessage: '',\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchSmsHistories();\r\n  },\r\n  methods: {\r\n    methods: {\r\n      fetchSmsHistories() {\r\n        console.log(\"조회할 일수(day) 값:\", this.day);\r\n\r\n        if (this.day && this.day > 0) {  // day 값이 1 이상일 때만 API 요청\r\n          axios.get(`/api/sms/all?day=${this.day}`)\r\n            .then(response => {\r\n              // API에서 반환된 전체 응답을 콘솔로 출력하여 확인\r\n              console.log(\"API 응답:\", response);\r\n\r\n              if (Array.isArray(response.data)) {\r\n                this.smsHistories = response.data;\r\n\r\n                // inDate와 inTime을 결합하여 비교할 수 있도록 정렬\r\n                this.smsHistories.sort((a, b) => {\r\n                  const dateA = a.inDate + a.inTime;\r\n                  const dateB = b.inDate + b.inTime;\r\n                  return dateB.localeCompare(dateA); // 최신 순으로 정렬\r\n                });\r\n\r\n                this.filteredSmsHistories = [...this.smsHistories]; // 필터링된 목록 갱신\r\n              } else {\r\n                console.error(\"응답 데이터가 배열이 아닙니다:\", response.data);\r\n              }\r\n            })\r\n            .catch(error => {\r\n              console.error('Error fetching SMS histories:', error);\r\n            });\r\n        } else {\r\n          console.log('조회할 일수가 올바르지 않습니다.');\r\n          this.smsHistories = [];\r\n          this.filteredSmsHistories = [];\r\n        }\r\n      }\r\n,\r\n\r\n      // 메시지 내용 필터링 함수\r\n      filterSmsHistories() {\r\n        // msgSearch가 있을 경우 필터링\r\n        this.filteredSmsHistories = this.msgSearch\r\n          ? this.smsHistories.filter(history =>\r\n              history.msg && history.msg.includes(this.msgSearch))\r\n          : this.smsHistories;\r\n      },\r\n\r\n      // 대량 메시지 전송 처리\r\n      updateAllSmsHistories() {\r\n        axios.put('/api/sms/updateall')\r\n          .then(response => {\r\n            const updatedCount = response.data?.updatedCount || 0;\r\n            this.updateMessage = `전체 메시지 전송 처리가 완료되었습니다. (총 ${updatedCount}건)`;\r\n            this.showModal = true;\r\n            this.fetchSmsHistories();  // 완료 후 다시 조회\r\n          })\r\n          .catch(error => {\r\n            console.error('Error updating SMS histories:', error);\r\n          });\r\n      },\r\n    },\r\n    computed: {\r\n      filteredSmsHistories() {\r\n        if (this.msgSearch) {\r\n          return this.smsHistories.filter(history =>\r\n            history.msg && history.msg.includes(this.msgSearch)\r\n          );\r\n        }\r\n        return this.smsHistories;\r\n      }\r\n    },\r\n    filterSmsHistories() {\r\n      // msgSearch가 있을 경우 필터링\r\n      this.filteredSmsHistories = this.msgSearch\r\n        ? this.smsHistories.filter(history =>\r\n            history.msg && history.msg.includes(this.msgSearch))\r\n        : this.smsHistories;\r\n    },\r\n    updateAllSmsHistories() {\r\n      axios.put('/api/sms/updateall')\r\n        .then(response => {\r\n          const updatedCount = response.data?.updatedCount || 0;\r\n          this.updateMessage = `전체 메시지 전송 처리가 완료되었습니다. (총 ${updatedCount}건)`;\r\n          this.showModal = true;\r\n          this.fetchSmsHistories();  // 완료 후 다시 조회\r\n        })\r\n        .catch(error => {\r\n          console.error('Error updating SMS histories:', error);\r\n        });\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 기존 스타일 */\r\n.container {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 30px;\r\n  font-family: 'Segoe UI', sans-serif;\r\n}\r\n\r\n.title {\r\n  font-size: 26px;\r\n  font-weight: bold;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.control-box {\r\n  display: flex;\r\n  align-items: flex-end;\r\n  gap: 20px;\r\n  flex-wrap: wrap;\r\n  margin-bottom: 20px;\r\n  padding: 20px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  background-color: #fafafa;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.row-group {\r\n  display: flex;\r\n  align-items: flex-end;\r\n  gap: 10px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\ninput[type=\"number\"],\r\ninput[type=\"text\"] {\r\n  padding: 8px;\r\n  width: 200px;\r\n  border-radius: 4px;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\n.button-group {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\nbutton {\r\n  padding: 10px 16px;\r\n  border: none;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n}\r\n\r\nbutton.orange {\r\n  background-color: #f57c00;\r\n}\r\n\r\nbutton:hover {\r\n  opacity: 0.9;\r\n}\r\n\r\nbutton:disabled {\r\n  background-color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-top: 20px;\r\n  font-size: 14px;\r\n}\r\n\r\nth {\r\n  background-color: #f2f2f2;\r\n  padding: 10px;\r\n}\r\n\r\ntd {\r\n  padding: 10px;\r\n  text-align: center;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.modal {\r\n  background: white;\r\n  padding: 30px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\r\n  min-width: 300px;\r\n  text-align: center;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}