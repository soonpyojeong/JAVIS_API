{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, nextTick, onMounted } from 'vue';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nexport default {\n  setup() {\n    const expandedDBType = ref({\n      oracle: false,\n      tibero: false\n    });\n    const selectedDB = ref(null);\n    const oracleDBList = ref([]); // ORACLE DB 리스트\n    const tiberoDBList = ref([]); // TIBERO DB 리스트\n\n    const metrics = ref([\n    // 사용할 지표 목록 (ORACLE용)\n    {\n      key: 'transaTions',\n      label: 'Transactions'\n    }, {\n      key: 'totalSess',\n      label: 'Total Sessions'\n    }, {\n      key: 'activeSess',\n      label: 'Active Sessions'\n    }, {\n      key: 'bufferpct',\n      label: 'Buffer Nowait Pct'\n    }, {\n      key: 'reDoPct',\n      label: 'Redo Nowait Pct'\n    }, {\n      key: 'buffHit',\n      label: 'Buffer Hit Pct'\n    }, {\n      key: 'latchHitPct',\n      label: 'Latch Hit Pct'\n    }, {\n      key: 'libHitPct',\n      label: 'Library Hit Pct'\n    }, {\n      key: 'softPct',\n      label: 'Soft Parse Pct'\n    }, {\n      key: 'executTopct',\n      label: 'Execute to Parse Pct'\n    }, {\n      key: 'parseCpuElapsd',\n      label: 'Parse CPU to Elapsed'\n    }, {\n      key: 'nonParseCpu',\n      label: 'Non Parse CPU'\n    }, {\n      key: 'inMemorySort',\n      label: 'In Memory Sort'\n    }, {\n      key: 'dailyArchCht',\n      label: 'Daily Archive Count'\n    }]);\n    const tbmetrics = ref([\n    // 사용할 지표 목록 (TIBERO용)\n    {\n      key: 'maxlSess',\n      label: 'Max Sessions'\n    }, {\n      key: 'totalSess',\n      label: 'Total Sessions'\n    }, {\n      key: 'runSess',\n      label: 'Active Sessions'\n    }, {\n      key: 'recSess',\n      label: 'Recover Session'\n    }, {\n      key: 'tsm',\n      label: 'TSM'\n    }, {\n      key: 'wpm',\n      label: 'WPM'\n    }, {\n      key: 'pgaSize',\n      label: 'PGA Size'\n    }, {\n      key: 'wpmPgadiff',\n      label: 'WPM PGA DIFF'\n    }, {\n      key: 'shardMem',\n      label: 'SHARED POOL MEMORY'\n    }, {\n      key: 'phyRead',\n      label: 'PHYSICAL READ'\n    }, {\n      key: 'logicRead',\n      label: 'LOGICAL READ'\n    }, {\n      key: 'buffHit',\n      label: 'BUFFER CACHE HIT'\n    }, {\n      key: 'libHit',\n      label: 'LIBRARY CACHE HIT'\n    }, {\n      key: 'dictHit',\n      label: 'DICTIONARY CACHE HIT'\n    }]);\n    const dbData = ref([]); // ORACLE DB 데이터\n    const tbdbData = ref([]); // TIBERO DB 데이터\n    const metricsToUse = ref(metrics.value); // 사용될 지표 목록 (동적으로 변경될 예정)\n\n    // DB 목록을 불러오는 함수\n    const fetchDbList = async () => {\n      try {\n        const response = await axios.get('/api/dailychk/db-list');\n        const dbList = response.data;\n        oracleDBList.value = dbList.ORACLE || [];\n        tiberoDBList.value = dbList.TIBERO || [];\n      } catch (error) {\n        console.error(\"DB 목록을 불러오는 데 실패했습니다.\", error);\n      }\n    };\n\n    // DB 종류별 트리 토글\n    const toggleDBType = type => {\n      expandedDBType.value[type] = !expandedDBType.value[type];\n    };\n\n    // DB 선택 시 데이터 받아오기\n    const selectDB = async (instanceName, dbType) => {\n      selectedDB.value = instanceName;\n      if (dbType === 'oracle') {\n        await fetchDbData(instanceName); // ORACLE 데이터 가져오기\n        metricsToUse.value = metrics.value; // ORACLE 지표 목록\n      } else if (dbType === 'tibero') {\n        await fetchTbDbData(instanceName); // TIBERO 데이터 가져오기\n        metricsToUse.value = tbmetrics.value; // TIBERO 지표 목록\n      }\n      nextTick(() => {\n        renderCharts(); // 차트 렌더링\n      });\n    };\n\n    // ORACLE DB 데이터 가져오는 함수\n    const fetchDbData = async instanceName => {\n      try {\n        const response = await axios.get(`/api/dailychk/${instanceName}/oradata`);\n        dbData.value = response.data;\n      } catch (error) {\n        console.error(\"ORACLE DB 데이터를 불러오는 데 실패했습니다.\", error);\n      }\n    };\n\n    // TIBERO DB 데이터 가져오는 함수\n    const fetchTbDbData = async instanceName => {\n      try {\n        const response = await axios.get(`/api/dailychk/${instanceName}/tbdata`);\n        tbdbData.value = response.data;\n      } catch (error) {\n        console.error(\"TIBERO DB 데이터를 불러오는 데 실패했습니다.\", error);\n      }\n    };\n\n    // 차트 렌더링 함수\n    const getRandomPastelColor = () => {\n      const hue = Math.floor(Math.random() * 360);\n      const saturation = 70 + Math.random() * 30;\n      const lightness = 70 + Math.random() * 10;\n      return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n    };\n\n    // ORACLE 전용 차트 렌더링 함수\n    const renderOracleCharts = () => {\n      if (!dbData.value || dbData.value.length === 0) {\n        console.warn('ORACLE DB 데이터가 없습니다.');\n        return;\n      }\n\n      // chkDate 기준으로 정렬 (오름차순)\n      dbData.value.sort((a, b) => new Date(a.id.chkDate) - new Date(b.id.chkDate));\n      metrics.value.forEach((metric, index) => {\n        const canvas = document.getElementById(`chartRef_${index}`);\n        if (canvas) {\n          if (canvas.chart) {\n            canvas.chart.destroy(); // 기존 차트 삭제\n          }\n          const labels = dbData.value.map(item => item.id.chkDate);\n          const data = dbData.value.map(item => item[metric.key] !== undefined ? item[metric.key] : 0);\n          if (labels.length === 0 || data.length === 0) {\n            console.warn(`${metric.label} 데이터가 없습니다.`);\n            return;\n          }\n          const borderColor = getRandomPastelColor();\n          const chart = new Chart(canvas, {\n            type: 'line',\n            data: {\n              labels,\n              datasets: [{\n                label: `${metric.label}`,\n                data,\n                borderColor,\n                backgroundColor: borderColor + '50',\n                fill: false,\n                tension: 0.3\n              }]\n            },\n            options: {\n              responsive: true,\n              maintainAspectRatio: false,\n              scales: {\n                x: {\n                  title: {\n                    display: true,\n                    text: 'Date'\n                  }\n                },\n                y: {\n                  title: {\n                    display: true,\n                    text: metric.label\n                  }\n                }\n              }\n            }\n          });\n          canvas.chart = chart;\n        }\n      });\n    };\n\n    // TIBERO 전용 차트 렌더링 함수\n    const renderTiberoCharts = () => {\n      if (!tbdbData.value || tbdbData.value.length === 0) {\n        console.warn('TIBERO DB 데이터가 없습니다.');\n        return;\n      }\n\n      // chkDate 기준으로 정렬 (오름차순)\n      tbdbData.value.sort((a, b) => new Date(a.id.chkDate) - new Date(b.id.chkDate));\n      tbmetrics.value.forEach((metric, index) => {\n        const canvas = document.getElementById(`chartRef_${index}`);\n        if (canvas) {\n          if (canvas.chart) {\n            canvas.chart.destroy(); // 기존 차트 삭제\n          }\n          const labels = tbdbData.value.map(item => item.id.chkDate);\n          const data = tbdbData.value.map(item => item[metric.key] !== undefined ? item[metric.key] : 0);\n          if (labels.length === 0 || data.length === 0) {\n            console.warn(`${metric.label} 데이터가 없습니다.`);\n            return;\n          }\n          // maxlSess와 totalSess 데이터를 하나의 차트에서 각각의 라인으로 표시\n          const maxlSessData = tbdbData.value.map(item => item.maxlSess !== undefined ? item.maxlSess : 0);\n          const totalSessData = tbdbData.value.map(item => item.totalSess !== undefined ? item.totalSess : 0);\n          const borderColorMaxlSess = 'hsl(120, 70%, 50%)'; // maxlSess 라인 색상 (녹색 계열)\n          const borderColorTotalSess = 'hsl(240, 70%, 50%)'; // totalSess 라인 색상 (파란색 계열)\n\n          const totalchart = new Chart(canvas, {\n            type: 'line',\n            data: {\n              labels,\n              datasets: [{\n                label: 'Max Sessions',\n                data: maxlSessData,\n                borderColor: borderColorMaxlSess,\n                backgroundColor: borderColorMaxlSess + '50',\n                fill: false,\n                tension: 0.3\n              }, {\n                label: 'Total Sessions',\n                data: totalSessData,\n                borderColor: borderColorTotalSess,\n                backgroundColor: borderColorTotalSess + '50',\n                fill: false,\n                tension: 0.3\n              }]\n            },\n            options: {\n              responsive: true,\n              maintainAspectRatio: false,\n              scales: {\n                x: {\n                  title: {\n                    display: true,\n                    text: 'Date'\n                  }\n                },\n                y: {\n                  title: {\n                    display: true,\n                    text: 'Sessions'\n                  }\n                }\n              }\n            }\n          });\n          canvas.totalchart = totalchart;\n          const borderColor = getRandomPastelColor();\n          const chart = new Chart(canvas, {\n            type: 'line',\n            data: {\n              labels,\n              datasets: [{\n                label: `${metric.label}`,\n                data,\n                borderColor,\n                backgroundColor: borderColor + '50',\n                fill: false,\n                tension: 0.3\n              }]\n            },\n            options: {\n              responsive: true,\n              maintainAspectRatio: false,\n              scales: {\n                x: {\n                  title: {\n                    display: true,\n                    text: 'Date'\n                  }\n                },\n                y: {\n                  title: {\n                    display: true,\n                    text: metric.label\n                  }\n                }\n              }\n            }\n          });\n          canvas.chart = chart;\n        }\n      });\n    };\n\n    // 공통 차트 렌더링 함수 (ORACLE, TIBERO에 맞게 렌더링)\n    const renderCharts = () => {\n      if (selectedDB.value) {\n        if (metricsToUse.value === metrics.value) {\n          renderOracleCharts();\n        } else if (metricsToUse.value === tbmetrics.value) {\n          renderTiberoCharts();\n        }\n      }\n    };\n    onMounted(() => {\n      fetchDbList();\n    });\n    return {\n      expandedDBType,\n      selectedDB,\n      oracleDBList,\n      tiberoDBList,\n      dbData,\n      tbdbData,\n      metricsToUse,\n      renderCharts,\n      toggleDBType,\n      // 여기 추가\n      selectDB // 여기 추가\n    };\n  }\n};","map":{"version":3,"names":["ref","nextTick","onMounted","axios","Chart","setup","expandedDBType","oracle","tibero","selectedDB","oracleDBList","tiberoDBList","metrics","key","label","tbmetrics","dbData","tbdbData","metricsToUse","value","fetchDbList","response","get","dbList","data","ORACLE","TIBERO","error","console","toggleDBType","type","selectDB","instanceName","dbType","fetchDbData","fetchTbDbData","renderCharts","getRandomPastelColor","hue","Math","floor","random","saturation","lightness","renderOracleCharts","length","warn","sort","a","b","Date","id","chkDate","forEach","metric","index","canvas","document","getElementById","chart","destroy","labels","map","item","undefined","borderColor","datasets","backgroundColor","fill","tension","options","responsive","maintainAspectRatio","scales","x","title","display","text","y","renderTiberoCharts","maxlSessData","maxlSess","totalSessData","totalSess","borderColorMaxlSess","borderColorTotalSess","totalchart"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DailyChk.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 왼쪽 DB 트리 구조 -->\r\n    <div class=\"db-tree\">\r\n      <ul>\r\n        <li>\r\n          <span @click=\"toggleDBType('oracle')\" class=\"tree-node oracle\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.oracle ? '-' : '+' }}</span> ORACLE\r\n          </span>\r\n          <ul v-if=\"expandedDBType.oracle\" class=\"sub-tree\">\r\n            <li v-for=\"instance in oracleDBList\" :key=\"instance\" class=\"db-item\">\r\n              <span @click=\"selectDB(instance, 'oracle')\">\r\n                <span class=\"leaf-icon\"></span> {{ instance }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n        <li>\r\n          <span @click=\"toggleDBType('tibero')\" class=\"tree-node tibero\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.tibero ? '-' : '+' }}</span> TIBERO\r\n          </span>\r\n          <ul v-if=\"expandedDBType.tibero\" class=\"sub-tree\">\r\n            <li v-for=\"instance in tiberoDBList\" :key=\"instance\" class=\"db-item\">\r\n              <span @click=\"selectDB(instance, 'tibero')\">\r\n                <span class=\"leaf-icon\"></span> {{ instance }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <!-- 차트 영역 -->\r\n    <div class=\"chart-container\">\r\n      <div class=\"charts-wrapper\">\r\n        <div v-for=\"(metric, index) in metricsToUse\" :key=\"index\" class=\"metric-chart\">\r\n          <canvas :id=\"'chartRef_' + index\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, nextTick, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  setup() {\r\n    const expandedDBType = ref({ oracle: false, tibero: false });\r\n    const selectedDB = ref(null);\r\n    const oracleDBList = ref([]);  // ORACLE DB 리스트\r\n    const tiberoDBList = ref([]);  // TIBERO DB 리스트\r\n\r\n    const metrics = ref([  // 사용할 지표 목록 (ORACLE용)\r\n      { key: 'transaTions', label: 'Transactions' },\r\n      { key: 'totalSess', label: 'Total Sessions' },\r\n      { key: 'activeSess', label: 'Active Sessions' },\r\n      { key: 'bufferpct', label: 'Buffer Nowait Pct' },\r\n      { key: 'reDoPct', label: 'Redo Nowait Pct' },\r\n      { key: 'buffHit', label: 'Buffer Hit Pct' },\r\n      { key: 'latchHitPct', label: 'Latch Hit Pct' },\r\n      { key: 'libHitPct', label: 'Library Hit Pct' },\r\n      { key: 'softPct', label: 'Soft Parse Pct' },\r\n      { key: 'executTopct', label: 'Execute to Parse Pct' },\r\n      { key: 'parseCpuElapsd', label: 'Parse CPU to Elapsed' },\r\n      { key: 'nonParseCpu', label: 'Non Parse CPU' },\r\n      { key: 'inMemorySort', label: 'In Memory Sort' },\r\n      { key: 'dailyArchCht', label: 'Daily Archive Count' }\r\n    ]);\r\n\r\n    const tbmetrics = ref([  // 사용할 지표 목록 (TIBERO용)\r\n      { key: 'maxlSess', label: 'Max Sessions' },\r\n      { key: 'totalSess', label: 'Total Sessions' },\r\n      { key: 'runSess', label: 'Active Sessions' },\r\n      { key: 'recSess', label: 'Recover Session' },\r\n      { key: 'tsm', label: 'TSM' },\r\n      { key: 'wpm', label: 'WPM' },\r\n      { key: 'pgaSize', label: 'PGA Size' },\r\n      { key: 'wpmPgadiff', label: 'WPM PGA DIFF' },\r\n      { key: 'shardMem', label: 'SHARED POOL MEMORY' },\r\n      { key: 'phyRead', label: 'PHYSICAL READ' },\r\n      { key: 'logicRead', label: 'LOGICAL READ' },\r\n      { key: 'buffHit', label: 'BUFFER CACHE HIT' },\r\n      { key: 'libHit', label: 'LIBRARY CACHE HIT' },\r\n      { key: 'dictHit', label: 'DICTIONARY CACHE HIT' }\r\n    ]);\r\n\r\n    const dbData = ref([]);  // ORACLE DB 데이터\r\n    const tbdbData = ref([]);  // TIBERO DB 데이터\r\n    const metricsToUse = ref(metrics.value);  // 사용될 지표 목록 (동적으로 변경될 예정)\r\n\r\n    // DB 목록을 불러오는 함수\r\n    const fetchDbList = async () => {\r\n      try {\r\n        const response = await axios.get('/api/dailychk/db-list');\r\n        const dbList = response.data;\r\n        oracleDBList.value = dbList.ORACLE || [];\r\n        tiberoDBList.value = dbList.TIBERO || [];\r\n      } catch (error) {\r\n        console.error(\"DB 목록을 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    // DB 종류별 트리 토글\r\n    const toggleDBType = (type) => {\r\n      expandedDBType.value[type] = !expandedDBType.value[type];\r\n    };\r\n\r\n    // DB 선택 시 데이터 받아오기\r\n    const selectDB = async (instanceName, dbType) => {\r\n      selectedDB.value = instanceName;\r\n\r\n      if (dbType === 'oracle') {\r\n        await fetchDbData(instanceName); // ORACLE 데이터 가져오기\r\n        metricsToUse.value = metrics.value; // ORACLE 지표 목록\r\n      } else if (dbType === 'tibero') {\r\n        await fetchTbDbData(instanceName); // TIBERO 데이터 가져오기\r\n        metricsToUse.value = tbmetrics.value; // TIBERO 지표 목록\r\n      }\r\n\r\n      nextTick(() => {\r\n        renderCharts(); // 차트 렌더링\r\n      });\r\n    };\r\n\r\n    // ORACLE DB 데이터 가져오는 함수\r\n    const fetchDbData = async (instanceName) => {\r\n      try {\r\n        const response = await axios.get(`/api/dailychk/${instanceName}/oradata`);\r\n        dbData.value = response.data;\r\n      } catch (error) {\r\n        console.error(\"ORACLE DB 데이터를 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    // TIBERO DB 데이터 가져오는 함수\r\n    const fetchTbDbData = async (instanceName) => {\r\n      try {\r\n        const response = await axios.get(`/api/dailychk/${instanceName}/tbdata`);\r\n        tbdbData.value = response.data;\r\n      } catch (error) {\r\n        console.error(\"TIBERO DB 데이터를 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    // 차트 렌더링 함수\r\n    const getRandomPastelColor = () => {\r\n      const hue = Math.floor(Math.random() * 360);\r\n      const saturation = 70 + Math.random() * 30;\r\n      const lightness = 70 + Math.random() * 10;\r\n      return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\r\n    };\r\n\r\n    // ORACLE 전용 차트 렌더링 함수\r\n    const renderOracleCharts = () => {\r\n      if (!dbData.value || dbData.value.length === 0) {\r\n        console.warn('ORACLE DB 데이터가 없습니다.');\r\n        return;\r\n      }\r\n\r\n      // chkDate 기준으로 정렬 (오름차순)\r\n      dbData.value.sort((a, b) => new Date(a.id.chkDate) - new Date(b.id.chkDate));\r\n\r\n      metrics.value.forEach((metric, index) => {\r\n        const canvas = document.getElementById(`chartRef_${index}`);\r\n        if (canvas) {\r\n          if (canvas.chart) {\r\n            canvas.chart.destroy(); // 기존 차트 삭제\r\n          }\r\n\r\n          const labels = dbData.value.map(item => item.id.chkDate);\r\n          const data = dbData.value.map(item => item[metric.key] !== undefined ? item[metric.key] : 0);\r\n\r\n          if (labels.length === 0 || data.length === 0) {\r\n            console.warn(`${metric.label} 데이터가 없습니다.`);\r\n            return;\r\n          }\r\n\r\n          const borderColor = getRandomPastelColor();\r\n\r\n          const chart = new Chart(canvas, {\r\n            type: 'line',\r\n            data: {\r\n              labels,\r\n              datasets: [{\r\n                label: `${metric.label}`,\r\n                data,\r\n                borderColor,\r\n                backgroundColor: borderColor + '50',\r\n                fill: false,\r\n                tension: 0.3,\r\n              }]\r\n            },\r\n            options: {\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              scales: {\r\n                x: { title: { display: true, text: 'Date' } },\r\n                y: { title: { display: true, text: metric.label } }\r\n              }\r\n            }\r\n          });\r\n\r\n          canvas.chart = chart;\r\n        }\r\n      });\r\n    };\r\n\r\n    // TIBERO 전용 차트 렌더링 함수\r\n    const renderTiberoCharts = () => {\r\n      if (!tbdbData.value || tbdbData.value.length === 0) {\r\n        console.warn('TIBERO DB 데이터가 없습니다.');\r\n        return;\r\n      }\r\n\r\n      // chkDate 기준으로 정렬 (오름차순)\r\n      tbdbData.value.sort((a, b) => new Date(a.id.chkDate) - new Date(b.id.chkDate));\r\n\r\n      tbmetrics.value.forEach((metric, index) => {\r\n        const canvas = document.getElementById(`chartRef_${index}`);\r\n        if (canvas) {\r\n          if (canvas.chart) {\r\n            canvas.chart.destroy(); // 기존 차트 삭제\r\n          }\r\n\r\n          const labels = tbdbData.value.map(item => item.id.chkDate);\r\n          const data = tbdbData.value.map(item => item[metric.key] !== undefined ? item[metric.key] : 0);\r\n\r\n          if (labels.length === 0 || data.length === 0) {\r\n            console.warn(`${metric.label} 데이터가 없습니다.`);\r\n            return;\r\n          }\r\n           // maxlSess와 totalSess 데이터를 하나의 차트에서 각각의 라인으로 표시\r\n                  const maxlSessData = tbdbData.value.map(item => item.maxlSess !== undefined ? item.maxlSess : 0);\r\n                  const totalSessData = tbdbData.value.map(item => item.totalSess !== undefined ? item.totalSess : 0);\r\n\r\n                  const borderColorMaxlSess = 'hsl(120, 70%, 50%)';  // maxlSess 라인 색상 (녹색 계열)\r\n                  const borderColorTotalSess = 'hsl(240, 70%, 50%)';  // totalSess 라인 색상 (파란색 계열)\r\n\r\n                  const totalchart = new Chart(canvas, {\r\n                    type: 'line',\r\n                    data: {\r\n                      labels,\r\n                      datasets: [\r\n                        {\r\n                          label: 'Max Sessions',\r\n                          data: maxlSessData,\r\n                          borderColor: borderColorMaxlSess,\r\n                          backgroundColor: borderColorMaxlSess + '50',\r\n                          fill: false,\r\n                          tension: 0.3,\r\n                        },\r\n                        {\r\n                          label: 'Total Sessions',\r\n                          data: totalSessData,\r\n                          borderColor: borderColorTotalSess,\r\n                          backgroundColor: borderColorTotalSess + '50',\r\n                          fill: false,\r\n                          tension: 0.3,\r\n                        }\r\n                      ]\r\n                    },\r\n                    options: {\r\n                      responsive: true,\r\n                      maintainAspectRatio: false,\r\n                      scales: {\r\n                        x: { title: { display: true, text: 'Date' } },\r\n                        y: { title: { display: true, text: 'Sessions' } }\r\n                      }\r\n                    }\r\n                  });\r\n          canvas.totalchart = totalchart;\r\n\r\n          const borderColor = getRandomPastelColor();\r\n\r\n          const chart = new Chart(canvas, {\r\n            type: 'line',\r\n            data: {\r\n              labels,\r\n              datasets: [{\r\n                label: `${metric.label}`,\r\n                data,\r\n                borderColor,\r\n                backgroundColor: borderColor + '50',\r\n                fill: false,\r\n                tension: 0.3,\r\n              }]\r\n            },\r\n            options: {\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              scales: {\r\n                x: { title: { display: true, text: 'Date' } },\r\n                y: { title: { display: true, text: metric.label } }\r\n              }\r\n            }\r\n          });\r\n\r\n          canvas.chart = chart;\r\n        }\r\n      });\r\n    };\r\n\r\n    // 공통 차트 렌더링 함수 (ORACLE, TIBERO에 맞게 렌더링)\r\n    const renderCharts = () => {\r\n      if (selectedDB.value) {\r\n        if (metricsToUse.value === metrics.value) {\r\n          renderOracleCharts();\r\n        } else if (metricsToUse.value === tbmetrics.value) {\r\n          renderTiberoCharts();\r\n        }\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      fetchDbList();\r\n    });\r\n\r\n    return {\r\n      expandedDBType,\r\n      selectedDB,\r\n      oracleDBList,\r\n      tiberoDBList,\r\n      dbData,\r\n      tbdbData,\r\n      metricsToUse,\r\n      renderCharts,\r\n      toggleDBType,  // 여기 추가\r\n      selectDB       // 여기 추가\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  display: flex;\r\n  height: 100vh;\r\n  background-color: #f4f4f4;\r\n}\r\n\r\n.db-tree {\r\n  width: 200px;\r\n  background-color: #fff;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  height: 100vh;\r\n  overflow-y: auto;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.tree-node {\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  padding: 8px;\r\n  background-color: #f0f0f0;\r\n  border-radius: 5px;\r\n  margin: 5px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.tree-node:hover {\r\n  background-color: #e1e1e1;\r\n}\r\n\r\n.toggle-icon {\r\n  margin-right: 10px;\r\n}\r\n\r\n.sub-tree {\r\n  padding-left: 20px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.db-item {\r\n  padding: 5px;\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.db-item:hover {\r\n  background-color: #e9f1f7;\r\n}\r\n\r\n.chart-container {\r\n  flex-grow: 1;\r\n  width: 1000px;\r\n  padding: 20px;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  min-height: 100vh; /* 기존 height: 100vh; 대신 min-height로 변경 */\r\n}\r\n\r\n.charts-wrapper {\r\n  flex-grow: 1; /* 내부 요소가 차지할 공간을 자동으로 확장 */\r\n  overflow-y: auto;\r\n  padding-right: 10px;\r\n}\r\n\r\n.metric-chart {\r\n  width: 100%;\r\n  height: 300px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .container {\r\n    flex-direction: column;\r\n  }\r\n  .db-tree {\r\n    width: 100%;\r\n    height: auto;\r\n  }\r\n  .metric-chart {\r\n    width: 100%;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}