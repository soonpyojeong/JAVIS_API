{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nexport default {\n  data() {\n    return {\n      monitoringItems: [{\n        title: '테이블스페이스 관제',\n        events: [{\n          id: 1,\n          message: '테이블스페이스 80% 초과 경고'\n        }],\n        style: {\n          position: 'absolute',\n          top: '20px',\n          left: '20px',\n          zIndex: 1,\n          width: '200px',\n          height: '150px'\n        }\n      }, {\n        title: '생사 관제',\n        events: [],\n        style: {\n          position: 'absolute',\n          top: '200px',\n          left: '300px',\n          zIndex: 1,\n          width: '200px',\n          height: '150px'\n        }\n      }, {\n        title: '오브젝트 인밸리드 관제',\n        events: [{\n          id: 3,\n          message: 'Invalid Object 발견: FUNCTION_A'\n        }],\n        style: {\n          position: 'absolute',\n          top: '380px',\n          left: '580px',\n          zIndex: 1,\n          width: '200px',\n          height: '150px'\n        }\n      }, {\n        title: '락 리스트 관제',\n        events: [{\n          id: 4,\n          message: 'Deadlock 발생: Session 101'\n        }],\n        style: {\n          position: 'absolute',\n          top: '560px',\n          left: '20px',\n          zIndex: 1,\n          width: '200px',\n          height: '150px'\n        }\n      }],\n      scheduleTasks: [{\n        id: 1,\n        name: 'DB 백업',\n        completed: false,\n        email: ''\n      }, {\n        id: 2,\n        name: '서버 점검',\n        completed: false,\n        email: ''\n      }, {\n        id: 3,\n        name: '로그 분석',\n        completed: false,\n        email: ''\n      }],\n      dragData: {\n        isDragging: false,\n        index: null,\n        offsetX: 0,\n        offsetY: 0\n      },\n      snapPositions: [20, 200, 380, 560] // 자석처럼 붙을 top 위치들\n    };\n  },\n  methods: {\n    sendEmails() {\n      const completedTasks = this.scheduleTasks.filter(task => task.completed);\n      completedTasks.forEach(task => {\n        if (task.email) {\n          console.log(`이메일 발송: ${task.email}, 작업: ${task.name}`);\n        } else {\n          console.log(`작업자 이메일이 설정되지 않았습니다: 작업 ${task.name}`);\n        }\n      });\n      alert('이메일 발송이 완료되었습니다.');\n    },\n    startDrag(event, index) {\n      this.dragData.isDragging = true;\n      this.dragData.index = index;\n      const item = this.monitoringItems[index];\n      const rect = event.target.getBoundingClientRect(); // 현재 객체의 정확한 위치\n      this.dragData.offsetX = event.clientX - rect.left; // 클릭한 위치에서 객체 왼쪽의 거리\n      this.dragData.offsetY = event.clientY - rect.top; // 클릭한 위치에서 객체 위쪽의 거리\n\n      item.style.zIndex = 1000; // 드래그 중인 항목을 맨 위로\n\n      window.addEventListener('mousemove', this.onDrag);\n      window.addEventListener('mouseup', this.stopDrag);\n    },\n    onDrag(event) {\n      if (!this.dragData.isDragging) return;\n      const item = this.monitoringItems[this.dragData.index];\n\n      // 드래그된 위치 계산 (객체가 이동할 수 있는 위치)\n      let newLeft = event.clientX - this.dragData.offsetX;\n      let newTop = event.clientY - this.dragData.offsetY;\n\n      // 화면을 벗어나지 않도록 제한\n      newLeft = Math.max(0, Math.min(newLeft, window.innerWidth - parseInt(item.style.width)));\n      newTop = Math.max(0, Math.min(newTop, window.innerHeight - parseInt(item.style.height)));\n      item.style.left = `${newLeft}px`;\n      item.style.top = `${newTop}px`;\n    },\n    stopDrag() {\n      if (!this.dragData.isDragging) return;\n      const item = this.monitoringItems[this.dragData.index];\n\n      // 가장 가까운 snap 위치를 찾음\n      const closestSnap = this.getClosestSnap(item.style.top);\n\n      // item의 top을 가장 가까운 snap 위치로 설정\n      item.style.top = `${closestSnap}px`;\n      item.style.zIndex = 1;\n      this.dragData.isDragging = false;\n      window.removeEventListener('mousemove', this.onDrag);\n      window.removeEventListener('mouseup', this.stopDrag);\n    },\n    getClosestSnap(currentTop) {\n      const top = parseInt(currentTop);\n      let closest = this.snapPositions[0];\n      let minDiff = Math.abs(top - closest);\n      this.snapPositions.forEach(pos => {\n        const diff = Math.abs(top - pos);\n        if (diff < minDiff) {\n          closest = pos;\n          minDiff = diff;\n        }\n      });\n      return closest;\n    }\n  }\n};","map":{"version":3,"names":["data","monitoringItems","title","events","id","message","style","position","top","left","zIndex","width","height","scheduleTasks","name","completed","email","dragData","isDragging","index","offsetX","offsetY","snapPositions","methods","sendEmails","completedTasks","filter","task","forEach","console","log","alert","startDrag","event","item","rect","target","getBoundingClientRect","clientX","clientY","window","addEventListener","onDrag","stopDrag","newLeft","newTop","Math","max","min","innerWidth","parseInt","innerHeight","closestSnap","getClosestSnap","removeEventListener","currentTop","closest","minDiff","abs","pos","diff"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\MainPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\">\r\n    <div\r\n      class=\"monitoring-box draggable\"\r\n      v-for=\"(item, index) in monitoringItems\"\r\n      :key=\"item.title\"\r\n      :style=\"item.style\"\r\n      @mousedown=\"startDrag($event, index)\"\r\n    >\r\n      <h2>{{ item.title }}</h2>\r\n      <ul>\r\n        <li v-for=\"event in item.events\" :key=\"event.id\">\r\n          {{ event.message }}\r\n        </li>\r\n      </ul>\r\n      <div v-if=\"item.events.length === 0\" class=\"no-events\">현재 이벤트가 없습니다.</div>\r\n    </div>\r\n\r\n    <div class=\"schedule-box\">\r\n      <h2>고정 일정 관리</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>작업 항목</th>\r\n            <th>완료 여부</th>\r\n            <th>작업자 이메일</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"task in scheduleTasks\" :key=\"task.id\">\r\n            <td>{{ task.name }}</td>\r\n            <td>\r\n              <input type=\"checkbox\" v-model=\"task.completed\" />\r\n            </td>\r\n            <td>\r\n              <input type=\"email\" v-model=\"task.email\" placeholder=\"작업자 이메일 입력\" />\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <button @click=\"sendEmails\">이메일 발송</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      monitoringItems: [\r\n        {\r\n          title: '테이블스페이스 관제',\r\n          events: [{ id: 1, message: '테이블스페이스 80% 초과 경고' }],\r\n          style: { position: 'absolute', top: '20px', left: '20px', zIndex: 1, width: '200px', height: '150px' },\r\n        },\r\n        {\r\n          title: '생사 관제',\r\n          events: [],\r\n          style: { position: 'absolute', top: '200px', left: '300px', zIndex: 1, width: '200px', height: '150px' },\r\n        },\r\n        {\r\n          title: '오브젝트 인밸리드 관제',\r\n          events: [{ id: 3, message: 'Invalid Object 발견: FUNCTION_A' }],\r\n          style: { position: 'absolute', top: '380px', left: '580px', zIndex: 1, width: '200px', height: '150px' },\r\n        },\r\n        {\r\n          title: '락 리스트 관제',\r\n          events: [{ id: 4, message: 'Deadlock 발생: Session 101' }],\r\n          style: { position: 'absolute', top: '560px', left: '20px', zIndex: 1, width: '200px', height: '150px' },\r\n        },\r\n      ],\r\n      scheduleTasks: [\r\n        { id: 1, name: 'DB 백업', completed: false, email: '' },\r\n        { id: 2, name: '서버 점검', completed: false, email: '' },\r\n        { id: 3, name: '로그 분석', completed: false, email: '' },\r\n      ],\r\n      dragData: {\r\n        isDragging: false,\r\n        index: null,\r\n        offsetX: 0,\r\n        offsetY: 0,\r\n      },\r\n      snapPositions: [20, 200, 380, 560], // 자석처럼 붙을 top 위치들\r\n    };\r\n  },\r\n  methods: {\r\n    sendEmails() {\r\n      const completedTasks = this.scheduleTasks.filter(task => task.completed);\r\n      completedTasks.forEach(task => {\r\n        if (task.email) {\r\n          console.log(`이메일 발송: ${task.email}, 작업: ${task.name}`);\r\n        } else {\r\n          console.log(`작업자 이메일이 설정되지 않았습니다: 작업 ${task.name}`);\r\n        }\r\n      });\r\n      alert('이메일 발송이 완료되었습니다.');\r\n    },\r\n      startDrag(event, index) {\r\n        this.dragData.isDragging = true;\r\n        this.dragData.index = index;\r\n\r\n        const item = this.monitoringItems[index];\r\n        const rect = event.target.getBoundingClientRect();  // 현재 객체의 정확한 위치\r\n        this.dragData.offsetX = event.clientX - rect.left;  // 클릭한 위치에서 객체 왼쪽의 거리\r\n        this.dragData.offsetY = event.clientY - rect.top;   // 클릭한 위치에서 객체 위쪽의 거리\r\n\r\n        item.style.zIndex = 1000;  // 드래그 중인 항목을 맨 위로\r\n\r\n        window.addEventListener('mousemove', this.onDrag);\r\n        window.addEventListener('mouseup', this.stopDrag);\r\n      },\r\n\r\n      onDrag(event) {\r\n        if (!this.dragData.isDragging) return;\r\n\r\n        const item = this.monitoringItems[this.dragData.index];\r\n\r\n        // 드래그된 위치 계산 (객체가 이동할 수 있는 위치)\r\n        let newLeft = event.clientX - this.dragData.offsetX;\r\n        let newTop = event.clientY - this.dragData.offsetY;\r\n\r\n        // 화면을 벗어나지 않도록 제한\r\n        newLeft = Math.max(0, Math.min(newLeft, window.innerWidth - parseInt(item.style.width)));\r\n        newTop = Math.max(0, Math.min(newTop, window.innerHeight - parseInt(item.style.height)));\r\n\r\n        item.style.left = `${newLeft}px`;\r\n        item.style.top = `${newTop}px`;\r\n      },\r\n\r\n      stopDrag() {\r\n        if (!this.dragData.isDragging) return;\r\n\r\n        const item = this.monitoringItems[this.dragData.index];\r\n\r\n        // 가장 가까운 snap 위치를 찾음\r\n        const closestSnap = this.getClosestSnap(item.style.top);\r\n\r\n        // item의 top을 가장 가까운 snap 위치로 설정\r\n        item.style.top = `${closestSnap}px`;\r\n\r\n        item.style.zIndex = 1;\r\n        this.dragData.isDragging = false;\r\n\r\n        window.removeEventListener('mousemove', this.onDrag);\r\n        window.removeEventListener('mouseup', this.stopDrag);\r\n      },\r\n\r\n      getClosestSnap(currentTop) {\r\n        const top = parseInt(currentTop);\r\n        let closest = this.snapPositions[0];\r\n        let minDiff = Math.abs(top - closest);\r\n\r\n        this.snapPositions.forEach(pos => {\r\n          const diff = Math.abs(top - pos);\r\n          if (diff < minDiff) {\r\n            closest = pos;\r\n            minDiff = diff;\r\n          }\r\n        });\r\n\r\n        return closest;\r\n      },\r\n    }\r\n,\r\n};\r\n</script>\r\n\r\n<style>\r\n.dashboard {\r\n  position: relative;\r\n  height: 100vh;\r\n  background: #f9f9f9;\r\n  font-family: 'Arial', sans-serif;\r\n  overflow: hidden;\r\n}\r\n\r\n.monitoring-box, .schedule-box {\r\n  background: white;\r\n  user-select: none;\r\n  border: 1px solid #ddd;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  padding: 15px;\r\n  cursor: grab;\r\n  transition: transform 0.2s ease, left 0.2s ease, top 0.2s ease;\r\n  position: absolute;\r\n}\r\n\r\n.monitoring-box:active {\r\n  cursor: grabbing;\r\n}\r\n\r\n.monitoring-box h2, .schedule-box h2 {\r\n  font-size: 18px;\r\n  margin-bottom: 10px;\r\n  color: #333;\r\n  border-bottom: 1px solid #ddd;\r\n  padding-bottom: 5px;\r\n}\r\n\r\n.monitoring-box ul {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.monitoring-box li {\r\n  padding: 5px 0;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  font-size: 14px;\r\n  color: #555;\r\n}\r\n\r\n.monitoring-box li:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.no-events {\r\n  font-size: 14px;\r\n  color: #999;\r\n  text-align: center;\r\n  padding: 10px 0;\r\n}\r\n\r\n.schedule-box table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-top: 10px;\r\n}\r\n\r\n.schedule-box th, .schedule-box td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\n\r\n.schedule-box th {\r\n  background: #f4f4f4;\r\n  font-weight: bold;\r\n}\r\n\r\n.schedule-box input[type=\"checkbox\"] {\r\n  cursor: pointer;\r\n}\r\n\r\n.schedule-box input[type=\"email\"] {\r\n  width: 100%;\r\n  padding: 5px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.schedule-box button {\r\n  margin-top: 15px;\r\n  padding: 10px 15px;\r\n  background: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n}\r\n\r\n.schedule-box button:hover {\r\n  background: #45a049;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}