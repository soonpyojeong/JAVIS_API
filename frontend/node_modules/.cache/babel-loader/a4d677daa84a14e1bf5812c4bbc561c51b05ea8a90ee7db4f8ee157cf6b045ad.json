{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"tabs\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"content\"\n};\nconst _hoisted_4 = {\n  class: \"db-tree\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  key: 0\n};\nconst _hoisted_7 = [\"onClick\"];\nconst _hoisted_8 = {\n  key: 0,\n  class: \"chart-container\"\n};\nconst _hoisted_9 = {\n  ref: \"chartCanvas\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 상단 DB 타입 선택 (탭) \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", {\n    class: _normalizeClass([\"tab\", {\n      active: $setup.dbType === 'ORACLE'\n    }]),\n    onClick: _cache[0] || (_cache[0] = $event => $setup.dbType = 'ORACLE')\n  }, \"ORACLE\", 2 /* CLASS */), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"tab\", {\n      active: $setup.dbType === 'TIBERO'\n    }]),\n    onClick: _cache[1] || (_cache[1] = $event => $setup.dbType = 'TIBERO')\n  }, \"TIBERO\", 2 /* CLASS */)]), $setup.dbType === 'ORACLE' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createCommentVNode(\" 왼쪽 DB 트리 구조 \"), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.dbList, db => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: db.name\n    }, [_createElementVNode(\"span\", {\n      onClick: $event => $setup.toggleDB(db)\n    }, _toDisplayString(db.name), 9 /* TEXT, PROPS */, _hoisted_5), db.expanded ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.metrics, metric => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: metric,\n        onClick: $event => $setup.selectMetric(db.name, metric)\n      }, _toDisplayString(metric), 9 /* TEXT, PROPS */, _hoisted_7);\n    }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" 중앙 차트 \"), $setup.selectedDB ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createElementVNode(\"h3\", null, _toDisplayString($setup.selectedDB) + \" - \" + _toDisplayString($setup.selectedMetric) + \" Metrics\", 1 /* TEXT */), _createElementVNode(\"canvas\", _hoisted_9, null, 512 /* NEED_PATCH */)])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","ref","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_normalizeClass","active","$setup","dbType","onClick","_cache","$event","_hoisted_3","_hoisted_4","_Fragment","_renderList","dbList","db","name","toggleDB","_hoisted_5","expanded","_hoisted_6","metrics","metric","selectMetric","_hoisted_7","selectedDB","_hoisted_8","_toDisplayString","selectedMetric","_hoisted_9"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DailyChk.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 상단 DB 타입 선택 (탭) -->\r\n    <div class=\"tabs\">\r\n      <div class=\"tab\" :class=\"{ active: dbType === 'ORACLE' }\" @click=\"dbType = 'ORACLE'\">ORACLE</div>\r\n      <div class=\"tab\" :class=\"{ active: dbType === 'TIBERO' }\" @click=\"dbType = 'TIBERO'\">TIBERO</div>\r\n    </div>\r\n\r\n    <div class=\"content\" v-if=\"dbType === 'ORACLE'\">\r\n      <!-- 왼쪽 DB 트리 구조 -->\r\n      <div class=\"db-tree\">\r\n        <ul>\r\n          <li v-for=\"db in dbList\" :key=\"db.name\">\r\n            <span @click=\"toggleDB(db)\">{{ db.name }}</span>\r\n            <ul v-if=\"db.expanded\">\r\n              <li v-for=\"metric in metrics\" :key=\"metric\" @click=\"selectMetric(db.name, metric)\">\r\n                {{ metric }}\r\n              </li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <!-- 중앙 차트 -->\r\n      <div class=\"chart-container\" v-if=\"selectedDB\">\r\n        <h3>{{ selectedDB }} - {{ selectedMetric }} Metrics</h3>\r\n        <canvas ref=\"chartCanvas\"></canvas>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, watch } from 'vue';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  setup() {\r\n    const dbType = ref('ORACLE');\r\n    const selectedDB = ref(null);\r\n    const selectedMetric = ref(null);\r\n    const chartCanvas = ref(null);\r\n    let chartInstance = null;\r\n\r\n    const dbList = ref([\r\n      { name: 'DB1', expanded: false },\r\n      { name: 'DB2', expanded: false },\r\n      { name: 'DB3', expanded: false }\r\n    ]);\r\n\r\n    const metrics = ref([\r\n      'TRANSACTIONS', 'TOTAL_SESSION', 'ACTIVE_SESSION',\r\n      'BUFFER_NOWAIT_PCT', 'REDO_NOWAIT_PCT', 'BUFFER_HIT_PCT',\r\n      'LATCH_HIT_PCT', 'LIBRARY_HIT_PCT', 'SOFT_PARSE_PCT',\r\n      'EXECUTE_TO_PARSE_PCT', 'PARSE_CPU_TO_PARSE_ELAPSD',\r\n      'NON_PARSE_CPU', 'IN_MEMORY_SORT', 'DAILY_ARCH_CNT'\r\n    ]);\r\n\r\n    const toggleDB = (db) => {\r\n      db.expanded = !db.expanded;\r\n    };\r\n\r\n    const selectMetric = (dbName, metric) => {\r\n      selectedDB.value = dbName;\r\n      selectedMetric.value = metric;\r\n      createChart();\r\n    };\r\n\r\n    const createChart = () => {\r\n      if (chartInstance) {\r\n        chartInstance.destroy();\r\n      }\r\n      if (chartCanvas.value) {\r\n        chartInstance = new Chart(chartCanvas.value, {\r\n          type: 'line',\r\n          data: {\r\n            labels: ['00:00', '01:00', '02:00', '03:00', '04:00', '05:00'],\r\n            datasets: [{\r\n              label: selectedMetric.value,\r\n              data: [30, 50, 40, 60, 80, 70],\r\n              borderColor: 'blue',\r\n              fill: false\r\n            }]\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            plugins: { legend: { position: 'top' } }\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    watch(selectedMetric, createChart);\r\n\r\n    onMounted(() => {\r\n      if (selectedDB.value) {\r\n        createChart();\r\n      }\r\n    });\r\n\r\n    return {\r\n      dbType,\r\n      selectedDB,\r\n      selectedMetric,\r\n      dbList,\r\n      metrics,\r\n      chartCanvas,\r\n      toggleDB,\r\n      selectMetric\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n.tabs {\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: center;\r\n  border-bottom: 2px solid #ddd;\r\n}\r\n.tab {\r\n  padding: 10px 20px;\r\n  cursor: pointer;\r\n  border-bottom: 3px solid transparent;\r\n}\r\n.tab.active {\r\n  border-bottom: 3px solid #007bff;\r\n  font-weight: bold;\r\n  color: #007bff;\r\n}\r\n.content {\r\n  display: flex;\r\n  width: 100%;\r\n  margin-top: 20px;\r\n}\r\n.db-tree {\r\n  width: 250px;\r\n  padding-right: 20px;\r\n  border-right: 2px solid #ddd;\r\n}\r\n.db-tree ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n.db-tree li {\r\n  cursor: pointer;\r\n  padding: 5px;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n.db-tree li:hover {\r\n  background: #f0f0f0;\r\n}\r\n.chart-container {\r\n  flex-grow: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAW;;EAEfA,KAAK,EAAC;AAAM;;EAHrBC,GAAA;EAQSD,KAAK,EAAC;;;EAEJA,KAAK,EAAC;AAAS;mBAV1B;;EAAAC,GAAA;AAAA;mBAAA;;EAAAA,GAAA;EAwBWD,KAAK,EAAC;;;EAEDE,GAAG,EAAC;AAAa;;uBAzB/BC,mBAAA,CA4BM,OA5BNC,UA4BM,GA3BJC,mBAAA,qBAAwB,EACxBC,mBAAA,CAGM,OAHNC,UAGM,GAFJD,mBAAA,CAAiG;IAA5FN,KAAK,EAJhBQ,eAAA,EAIiB,KAAK;MAAAC,MAAA,EAAmBC,MAAA,CAAAC,MAAM;IAAA;IAAkBC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEJ,MAAA,CAAAC,MAAM;KAAa,QAAM,kBAC3FL,mBAAA,CAAiG;IAA5FN,KAAK,EALhBQ,eAAA,EAKiB,KAAK;MAAAC,MAAA,EAAmBC,MAAA,CAAAC,MAAM;IAAA;IAAkBC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEJ,MAAA,CAAAC,MAAM;KAAa,QAAM,iB,GAGlED,MAAA,CAAAC,MAAM,iB,cAAjCR,mBAAA,CAoBM,OApBNY,UAoBM,GAnBJV,mBAAA,iBAAoB,EACpBC,mBAAA,CAWM,OAXNU,UAWM,GAVJV,mBAAA,CASK,c,kBARHH,mBAAA,CAOKc,SAAA,QAnBfC,WAAA,CAY2BR,MAAA,CAAAS,MAAM,EAAZC,EAAE;yBAAbjB,mBAAA,CAOK;MAPqBF,GAAG,EAAEmB,EAAE,CAACC;QAChCf,mBAAA,CAAgD;MAAzCM,OAAK,EAAAE,MAAA,IAAEJ,MAAA,CAAAY,QAAQ,CAACF,EAAE;wBAAMA,EAAE,CAACC,IAAI,wBAblDE,UAAA,GAcsBH,EAAE,CAACI,QAAQ,I,cAArBrB,mBAAA,CAIK,MAlBjBsB,UAAA,I,kBAectB,mBAAA,CAEKc,SAAA,QAjBnBC,WAAA,CAemCR,MAAA,CAAAgB,OAAO,EAAjBC,MAAM;2BAAjBxB,mBAAA,CAEK;QAF0BF,GAAG,EAAE0B,MAAM;QAAGf,OAAK,EAAAE,MAAA,IAAEJ,MAAA,CAAAkB,YAAY,CAACR,EAAE,CAACC,IAAI,EAAEM,MAAM;0BAC3EA,MAAM,wBAhBzBE,UAAA;wCAAAxB,mBAAA,e;sCAuBMA,mBAAA,WAAc,EACqBK,MAAA,CAAAoB,UAAU,I,cAA7C3B,mBAAA,CAGM,OAHN4B,UAGM,GAFJzB,mBAAA,CAAwD,YAAA0B,gBAAA,CAAjDtB,MAAA,CAAAoB,UAAU,IAAG,KAAG,GAAAE,gBAAA,CAAGtB,MAAA,CAAAuB,cAAc,IAAG,UAAQ,iBACnD3B,mBAAA,CAAmC,UAAnC4B,UAAmC,8B,KA1B3C7B,mBAAA,e,KAAAA,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}