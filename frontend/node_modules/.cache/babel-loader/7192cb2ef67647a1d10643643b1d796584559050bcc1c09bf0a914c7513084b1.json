{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"content\"\n};\nconst _hoisted_3 = {\n  class: \"db-tree\"\n};\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  key: 0\n};\nconst _hoisted_7 = {\n  key: 0\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  key: 0\n};\nconst _hoisted_10 = {\n  key: 0,\n  class: \"chart-container\"\n};\nconst _hoisted_11 = {\n  class: \"charts-row\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" 왼쪽 DB 트리 구조 \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"ul\", null, [_createElementVNode(\"li\", null, [_createElementVNode(\"span\", {\n    onClick: _cache[0] || (_cache[0] = $event => $setup.toggleDBType('oracle'))\n  }, _toDisplayString($setup.expandedDBType.oracle ? '-' : '+') + \" ORACLE \", 1 /* TEXT */), $setup.expandedDBType.oracle ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.oracleDBList, db => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: db.name,\n      class: \"db-item\"\n    }, [_createElementVNode(\"span\", {\n      onClick: $event => $setup.selectDB(db.name)\n    }, [_createTextVNode(\" ㄴ\" + _toDisplayString(db.name) + \" \", 1 /* TEXT */), db.isLeaf ? (_openBlock(), _createElementBlock(\"span\", _hoisted_6)) : _createCommentVNode(\"v-if\", true)], 8 /* PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"li\", null, [_createElementVNode(\"span\", {\n    onClick: _cache[1] || (_cache[1] = $event => $setup.toggleDBType('tibero'))\n  }, _toDisplayString($setup.expandedDBType.tibero ? '-' : '+') + \" TIBERO \", 1 /* TEXT */), $setup.expandedDBType.tibero ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.tiberoDBList, db => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: db.name,\n      class: \"db-item\"\n    }, [_createElementVNode(\"span\", {\n      onClick: $event => $setup.selectDB(db.name)\n    }, [_createTextVNode(\" ㄴ\" + _toDisplayString(db.name) + \" \", 1 /* TEXT */), db.isLeaf ? (_openBlock(), _createElementBlock(\"span\", _hoisted_9)) : _createCommentVNode(\"v-if\", true)], 8 /* PROPS */, _hoisted_8)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)])])]), _createCommentVNode(\" 중앙 차트 \"), $setup.selectedDB ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createElementVNode(\"h3\", null, _toDisplayString($setup.selectedDB) + \" - Metrics\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_11, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.metrics, metric => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: metric,\n      class: \"metric-chart\"\n    }, [_createElementVNode(\"h4\", null, _toDisplayString(metric), 1 /* TEXT */), _createElementVNode(\"canvas\", {\n      ref_for: true,\n      ref: el => $setup.setChartRef(el, metric)\n    }, null, 512 /* NEED_PATCH */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","onClick","_cache","$event","$setup","toggleDBType","expandedDBType","oracle","_hoisted_4","_Fragment","_renderList","oracleDBList","db","name","selectDB","_createTextVNode","_toDisplayString","isLeaf","_hoisted_6","_hoisted_5","tibero","_hoisted_7","tiberoDBList","_hoisted_9","_hoisted_8","selectedDB","_hoisted_10","_hoisted_11","metrics","metric","ref_for","ref","el","setChartRef"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DailyChk.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div class=\"content\">\r\n      <!-- 왼쪽 DB 트리 구조 -->\r\n      <div class=\"db-tree\">\r\n        <ul>\r\n          <li>\r\n            <span @click=\"toggleDBType('oracle')\">\r\n              {{ expandedDBType.oracle ? '-' : '+' }} ORACLE\r\n            </span>\r\n            <ul v-if=\"expandedDBType.oracle\">\r\n              <li v-for=\"db in oracleDBList\" :key=\"db.name\" class=\"db-item\">\r\n                <span @click=\"selectDB(db.name)\">\r\n                  ㄴ{{ db.name }} <span v-if=\"db.isLeaf\"></span>\r\n                </span>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <span @click=\"toggleDBType('tibero')\">\r\n              {{ expandedDBType.tibero ? '-' : '+' }} TIBERO\r\n            </span>\r\n            <ul v-if=\"expandedDBType.tibero\">\r\n              <li v-for=\"db in tiberoDBList\" :key=\"db.name\" class=\"db-item\">\r\n                <span @click=\"selectDB(db.name)\">\r\n                  ㄴ{{ db.name }} <span v-if=\"db.isLeaf\"></span>\r\n                </span>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <!-- 중앙 차트 -->\r\n      <div class=\"chart-container\" v-if=\"selectedDB\">\r\n        <h3>{{ selectedDB }} - Metrics</h3>\r\n        <div class=\"charts-row\">\r\n          <div v-for=\"metric in metrics\" :key=\"metric\" class=\"metric-chart\">\r\n            <h4>{{ metric }}</h4>\r\n            <canvas :ref=\"el => setChartRef(el, metric)\"></canvas>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, watch } from 'vue';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  setup() {\r\n    const expandedDBType = ref({\r\n      oracle: false,\r\n      tibero: false\r\n    });\r\n    const selectedDB = ref(null);\r\n    const chartRefs = ref({});\r\n    const chartInstances = ref({});\r\n\r\n    const oracleDBList = ref([\r\n      { name: 'ORACLE_DB1', isLeaf: true },\r\n      { name: 'ORACLE_DB2', isLeaf: true },\r\n      { name: 'ORACLE_DB3', isLeaf: true }\r\n    ]);\r\n\r\n    const tiberoDBList = ref([\r\n      { name: 'TIBERO_DB1', isLeaf: true },\r\n      { name: 'TIBERO_DB2', isLeaf: true },\r\n      { name: 'TIBERO_DB3', isLeaf: true }\r\n    ]);\r\n\r\n    const metrics = ref([\r\n      'TRANSACTIONS', 'TOTAL_SESSION', 'ACTIVE_SESSION',\r\n      'BUFFER_NOWAIT_PCT', 'REDO_NOWAIT_PCT', 'BUFFER_HIT_PCT',\r\n      'LATCH_HIT_PCT', 'LIBRARY_HIT_PCT', 'SOFT_PARSE_PCT',\r\n      'EXECUTE_TO_PARSE_PCT', 'PARSE_CPU_TO_PARSE_ELAPSD',\r\n      'NON_PARSE_CPU', 'IN_MEMORY_SORT', 'DAILY_ARCH_CNT'\r\n    ]);\r\n\r\n    const sampleData = {\r\n      'TRANSACTIONS': [120, 130, 140, 150, 160, 170],\r\n      'TOTAL_SESSION': [80, 85, 90, 100, 110, 120],\r\n      'ACTIVE_SESSION': [60, 65, 70, 80, 90, 100],\r\n      'BUFFER_NOWAIT_PCT': [10, 20, 25, 30, 35, 40],\r\n      'REDO_NOWAIT_PCT': [5, 10, 15, 20, 25, 30],\r\n      'BUFFER_HIT_PCT': [95, 93, 92, 90, 89, 88],\r\n      'LATCH_HIT_PCT': [98, 97, 96, 95, 94, 93],\r\n      'LIBRARY_HIT_PCT': [99, 98, 97, 96, 95, 94],\r\n      'SOFT_PARSE_PCT': [40, 45, 50, 55, 60, 65],\r\n      'EXECUTE_TO_PARSE_PCT': [75, 70, 65, 60, 55, 50],\r\n      'PARSE_CPU_TO_PARSE_ELAPSD': [20, 25, 30, 35, 40, 45],\r\n      'NON_PARSE_CPU': [100, 110, 120, 130, 140, 150],\r\n      'IN_MEMORY_SORT': [15, 10, 5, 3, 2, 1],\r\n      'DAILY_ARCH_CNT': [5, 10, 15, 20, 25, 30]\r\n    };\r\n\r\n    const toggleDBType = (type) => {\r\n      expandedDBType.value[type] = !expandedDBType.value[type];\r\n    };\r\n\r\n    const selectDB = (dbName) => {\r\n      selectedDB.value = dbName;\r\n      createCharts();\r\n    };\r\n\r\n    const setChartRef = (el, metric) => {\r\n      if (el) {\r\n        chartRefs.value[metric] = el;\r\n      }\r\n    };\r\n\r\n    const createCharts = () => {\r\n      // 기존 차트 인스턴스가 있으면 삭제\r\n      Object.keys(chartInstances.value).forEach(metric => {\r\n        if (chartInstances.value[metric]) {\r\n          chartInstances.value[metric].destroy();\r\n        }\r\n      });\r\n\r\n      // 차트를 다시 생성\r\n      metrics.value.forEach(metric => {\r\n        if (chartRefs.value[metric]) {\r\n          chartInstances.value[metric] = new Chart(chartRefs.value[metric], {\r\n            type: 'line',\r\n            data: {\r\n              labels: ['00:00', '01:00', '02:00', '03:00', '04:00', '05:00'],\r\n              datasets: [{\r\n                label: metric,\r\n                data: sampleData[metric],\r\n                borderColor: `hsl(${Math.random() * 360}, 70%, 50%)`,\r\n                fill: false\r\n              }]\r\n            },\r\n            options: {\r\n              responsive: true,\r\n              plugins: { legend: { position: 'top' } }\r\n            }\r\n          });\r\n        }\r\n      });\r\n    };\r\n\r\n    watch(selectedDB, createCharts);\r\n\r\n    onMounted(() => {\r\n      if (selectedDB.value) {\r\n        createCharts();\r\n      }\r\n    });\r\n\r\n    return {\r\n      expandedDBType,\r\n      selectedDB,\r\n      oracleDBList,\r\n      tiberoDBList,\r\n      metrics,\r\n      setChartRef,\r\n      toggleDBType,\r\n      selectDB\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n.content {\r\n  display: flex;\r\n  width: 100%;\r\n  margin-top: 20px;\r\n}\r\n.db-tree {\r\n  width: 250px;\r\n  padding-right: 20px;\r\n  border-right: 2px solid #ddd;\r\n}\r\n.db-tree ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n.db-tree li {\r\n  cursor: pointer;\r\n  padding: 5px;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n.db-tree li:hover {\r\n  background: #f0f0f0;\r\n}\r\n.db-item {\r\n  padding-left: 20px; /* 들여쓰기 */\r\n}\r\n.chart-container {\r\n  flex-grow: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n.charts-row {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n}\r\n.metric-chart {\r\n  width: 100px;\r\n  height: 90px;\r\n  margin: 5px;\r\n}\r\n.metric-chart canvas {\r\n  width: 100px !important;\r\n  height: 90px !important;\r\n}\r\n.metric-chart h4 {\r\n  text-align: center;\r\n  font-size: 10px;\r\n  margin: 0;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}