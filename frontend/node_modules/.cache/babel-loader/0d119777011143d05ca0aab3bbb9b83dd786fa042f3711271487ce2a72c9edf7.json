{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      monitoringItems: [{\n        title: '테이블스페이스 관제',\n        events: [],\n        style: {\n          position: 'absolute',\n          top: '20px',\n          left: '300px',\n          zIndex: 1,\n          width: '550px',\n          height: '300px'\n        },\n        isActive: false,\n        timerId: null\n      }, {\n        title: '생사 관제',\n        events: [],\n        style: {\n          position: 'absolute',\n          top: '20px',\n          left: '900px',\n          zIndex: 1,\n          width: '550px',\n          height: '300px'\n        },\n        isActive: false,\n        timerId: null\n      }, {\n        title: '오브젝트 인밸리드 관제',\n        events: [{\n          id: 3,\n          message: 'Invalid Object 발견: FUNCTION_A'\n        }],\n        style: {\n          position: 'absolute',\n          top: '380px',\n          left: '300px',\n          zIndex: 1,\n          width: '550px',\n          height: '300px'\n        },\n        isActive: false,\n        timerId: null\n      }, {\n        title: '락 리스트 관제',\n        events: [{\n          id: 4,\n          message: 'Deadlock 발생: Session 101'\n        }],\n        style: {\n          position: 'absolute',\n          top: '380px',\n          left: '900px',\n          zIndex: 1,\n          width: '550px',\n          height: '300px'\n        },\n        isActive: false,\n        timerId: null\n      }]\n    };\n  },\n  methods: {\n    fetchMonitoringData(index) {\n      axios.get(`/api/threshold/tbsChkmon?index=${index}`).then(response => {\n        const events = response.data.map(item => ({\n          id: item.id,\n          message: `${item.dbName} DB의 사용률 ${item.chkRate}% 초과 여유공간 ${item.freeSize}Mb 남음`\n        }));\n        this.monitoringItems[index].events = events;\n      }).catch(error => {\n        console.error(`데이터 가져오기 실패 (index: ${index}):`, error);\n      });\n    },\n    toggleMonitoring(index) {\n      const item = this.monitoringItems[index];\n      if (item.isActive) {\n        clearInterval(item.timerId); // 타이머 중지\n        item.timerId = null;\n        item.isActive = false;\n      } else {\n        this.fetchMonitoringData(index); // 즉시 데이터 갱신\n        item.timerId = setInterval(() => this.fetchMonitoringData(index), 5000); // 5초 간격으로 갱신\n        item.isActive = true;\n      }\n    },\n    startDrag(event, index) {\n      // 기존 드래그 로직 유지\n      const rect = event.target.getBoundingClientRect();\n      this.dragData.isDragging = true;\n      this.dragData.index = index;\n      this.dragData.offsetX = event.clientX - rect.left;\n      this.dragData.offsetY = event.clientY - rect.top;\n      const item = this.monitoringItems[index];\n      item.style.transition = 'none';\n      item.style.zIndex = 1000;\n      window.addEventListener('mousemove', this.onDrag);\n      window.addEventListener('mouseup', this.stopDrag);\n    },\n    stopDrag() {\n      const item = this.monitoringItems[this.dragData.index];\n      const closestSnap = this.getClosestSnap(item.style.top);\n      item.style.transition = 'top 0.3s ease, left 0.3s ease';\n      item.style.top = `${closestSnap}px`;\n      item.style.zIndex = 1;\n      this.dragData.isDragging = false;\n      window.removeEventListener('mousemove', this.onDrag);\n      window.removeEventListener('mouseup', this.stopDrag);\n    },\n    getClosestSnap(currentTop) {\n      const top = parseInt(currentTop);\n      let closest = this.snapPositions[0];\n      let minDiff = Math.abs(top - closest);\n      this.snapPositions.forEach(pos => {\n        const diff = Math.abs(top - pos);\n        if (diff < minDiff) {\n          closest = pos;\n          minDiff = diff;\n        }\n      });\n      return closest;\n    }\n  }\n};","map":{"version":3,"names":["axios","data","monitoringItems","title","events","style","position","top","left","zIndex","width","height","isActive","timerId","id","message","methods","fetchMonitoringData","index","get","then","response","map","item","dbName","chkRate","freeSize","catch","error","console","toggleMonitoring","clearInterval","setInterval","startDrag","event","rect","target","getBoundingClientRect","dragData","isDragging","offsetX","clientX","offsetY","clientY","transition","window","addEventListener","onDrag","stopDrag","closestSnap","getClosestSnap","removeEventListener","currentTop","parseInt","closest","snapPositions","minDiff","Math","abs","forEach","pos","diff"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\MainPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\">\r\n    <div\r\n      class=\"monitoring-box draggable\"\r\n      v-for=\"(item, index) in monitoringItems\"\r\n      :key=\"item.title\"\r\n      :style=\"item.style\"\r\n      @mousedown=\"startDrag($event, index)\"\r\n    >\r\n      <h2>{{ item.title }}</h2>\r\n      <div class=\"content\">\r\n        <ul>\r\n          <li v-for=\"event in item.events\" :key=\"event.id\">\r\n            {{ event.message }}\r\n          </li>\r\n        </ul>\r\n        <div v-if=\"item.events.length === 0\" class=\"no-events\">현재 이벤트가 없습니다.</div>\r\n      </div>\r\n      <button @click=\"toggleMonitoring(index)\" :class=\"{ active: item.isActive }\">\r\n        {{ item.isActive ? '중지' : '시작' }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      monitoringItems: [\r\n        {\r\n          title: '테이블스페이스 관제',\r\n          events: [],\r\n          style: { position: 'absolute', top: '20px', left: '300px', zIndex: 1, width: '550px', height: '300px' },\r\n          isActive: false,\r\n          timerId: null,\r\n        },\r\n        {\r\n          title: '생사 관제',\r\n          events: [],\r\n          style: { position: 'absolute', top: '20px', left: '900px', zIndex: 1, width: '550px', height: '300px' },\r\n          isActive: false,\r\n          timerId: null,\r\n        },\r\n        {\r\n          title: '오브젝트 인밸리드 관제',\r\n          events: [{ id: 3, message: 'Invalid Object 발견: FUNCTION_A' }],\r\n          style: { position: 'absolute', top: '380px', left: '300px', zIndex: 1, width: '550px', height: '300px' },\r\n          isActive: false,\r\n          timerId: null,\r\n        },\r\n        {\r\n          title: '락 리스트 관제',\r\n          events: [{ id: 4, message: 'Deadlock 발생: Session 101' }],\r\n          style: { position: 'absolute', top: '380px', left: '900px', zIndex: 1, width: '550px', height: '300px' },\r\n          isActive: false,\r\n          timerId: null,\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  methods: {\r\n    fetchMonitoringData(index) {\r\n      axios.get(`/api/threshold/tbsChkmon?index=${index}`)\r\n        .then(response => {\r\n          const events = response.data.map(item => ({\r\n            id: item.id,\r\n            message: `${item.dbName} DB의 사용률 ${item.chkRate}% 초과 여유공간 ${item.freeSize}Mb 남음`,\r\n          }));\r\n          this.monitoringItems[index].events = events;\r\n        })\r\n        .catch(error => {\r\n          console.error(`데이터 가져오기 실패 (index: ${index}):`, error);\r\n        });\r\n    },\r\n    toggleMonitoring(index) {\r\n      const item = this.monitoringItems[index];\r\n      if (item.isActive) {\r\n        clearInterval(item.timerId); // 타이머 중지\r\n        item.timerId = null;\r\n        item.isActive = false;\r\n      } else {\r\n        this.fetchMonitoringData(index); // 즉시 데이터 갱신\r\n        item.timerId = setInterval(() => this.fetchMonitoringData(index), 5000); // 5초 간격으로 갱신\r\n        item.isActive = true;\r\n      }\r\n    },\r\n    startDrag(event, index) {\r\n      // 기존 드래그 로직 유지\r\n      const rect = event.target.getBoundingClientRect();\r\n      this.dragData.isDragging = true;\r\n      this.dragData.index = index;\r\n      this.dragData.offsetX = event.clientX - rect.left;\r\n      this.dragData.offsetY = event.clientY - rect.top;\r\n      const item = this.monitoringItems[index];\r\n      item.style.transition = 'none';\r\n      item.style.zIndex = 1000;\r\n      window.addEventListener('mousemove', this.onDrag);\r\n      window.addEventListener('mouseup', this.stopDrag);\r\n    },\r\n    stopDrag() {\r\n      const item = this.monitoringItems[this.dragData.index];\r\n      const closestSnap = this.getClosestSnap(item.style.top);\r\n      item.style.transition = 'top 0.3s ease, left 0.3s ease';\r\n      item.style.top = `${closestSnap}px`;\r\n      item.style.zIndex = 1;\r\n      this.dragData.isDragging = false;\r\n      window.removeEventListener('mousemove', this.onDrag);\r\n      window.removeEventListener('mouseup', this.stopDrag);\r\n    },\r\n    getClosestSnap(currentTop) {\r\n      const top = parseInt(currentTop);\r\n      let closest = this.snapPositions[0];\r\n      let minDiff = Math.abs(top - closest);\r\n      this.snapPositions.forEach(pos => {\r\n        const diff = Math.abs(top - pos);\r\n        if (diff < minDiff) {\r\n          closest = pos;\r\n          minDiff = diff;\r\n        }\r\n      });\r\n      return closest;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nbutton {\r\n  margin-top: 10px;\r\n  padding: 8px 16px;\r\n  background: #ddd;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n}\r\n\r\nbutton.active {\r\n  background: #007bff;\r\n  color: white;\r\n}\r\n\r\nbutton:hover {\r\n  background: #0056b3;\r\n  color: white;\r\n}\r\n</style>\r\n\r\n<style>\r\n.dashboard {\r\n  position: relative;\r\n  height: 100vh;\r\n  background: #f9f9f9;\r\n  font-family: 'Arial', sans-serif;\r\n  overflow: hidden;\r\n}\r\n\r\n.monitoring-box, .schedule-box {\r\n  background: white;\r\n  user-select: none;\r\n  border: 1px solid #ddd;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  padding: 15px;\r\n  cursor: grab;\r\n  transition: transform 0.2s ease, left 0.2s ease, top 0.2s ease;\r\n  position: absolute;\r\n  height: auto; /* 고정 높이를 제거하고 내용에 따라 크기를 동적으로 조정 */\r\n  max-height: 300px; /* 필요 시 최대 높이를 설정 */\r\n  overflow-y: auto; /* 내용이 너무 많으면 스크롤 활성화 */\r\n}\r\n\r\n.monitoring-box:active {\r\n  cursor: grabbing;\r\n}\r\n.monitoring-box {\r\n  height: auto; /* 박스 높이는 내용에 따라 자동 조정 */\r\n  max-height: 300px; /* 최대 높이를 설정 */\r\n  overflow: hidden; /* 박스 전체의 스크롤은 숨김 */\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.monitoring-box h2 {\r\n  position: relative; /* 제목은 상단 고정 */\r\n  background: white; /* 배경색 설정 */\r\n  z-index: 2; /* 내용보다 위에 보이도록 설정 */\r\n  font-size: 18px;\r\n  margin: 0;\r\n  color: #333;\r\n  border-bottom: 1px solid #ddd;\r\n  padding: 5px 0;\r\n}\r\n\r\n.monitoring-box .content {\r\n  flex: 1; /* 나머지 공간을 차지 */\r\n  overflow-y: auto; /* 스크롤은 이 컨테이너에서 발생 */\r\n  padding-top: 10px; /* 내용과 제목 간격 */\r\n}\r\n\r\n.monitoring-box ul {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.monitoring-box li {\r\n  padding: 5px 0;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  font-size: 14px;\r\n  color: #555;\r\n}\r\n\r\n.monitoring-box li:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.no-events {\r\n  font-size: 14px;\r\n  color: #999;\r\n  text-align: center;\r\n  padding: 10px 0;\r\n}\r\n\r\n\r\nbutton {\r\n  margin-top: 10px;\r\n  padding: 8px 16px;\r\n  background: #ddd;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n}\r\n\r\nbutton.active {\r\n  background: #007bff;\r\n  color: white;\r\n}\r\n\r\nbutton:hover {\r\n  background: #0056b3;\r\n  color: white;\r\n}\r\n\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}