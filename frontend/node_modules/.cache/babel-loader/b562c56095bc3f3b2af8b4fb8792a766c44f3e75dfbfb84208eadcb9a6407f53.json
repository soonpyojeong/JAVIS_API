{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"content\"\n};\nconst _hoisted_3 = {\n  class: \"db-tree\"\n};\nconst _hoisted_4 = {\n  class: \"toggle-icon\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"sub-tree\"\n};\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  class: \"toggle-icon\"\n};\nconst _hoisted_8 = {\n  key: 0,\n  class: \"sub-tree\"\n};\nconst _hoisted_9 = [\"onClick\"];\nconst _hoisted_10 = {\n  key: 0,\n  class: \"chart-container\"\n};\nconst _hoisted_11 = {\n  class: \"charts-row\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" 왼쪽 DB 트리 구조 \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"ul\", null, [_createElementVNode(\"li\", null, [_createElementVNode(\"span\", {\n    onClick: _cache[0] || (_cache[0] = $event => $setup.toggleDBType('oracle')),\n    class: \"tree-node\"\n  }, [_createElementVNode(\"span\", _hoisted_4, _toDisplayString($setup.expandedDBType.oracle ? '-' : '+'), 1 /* TEXT */), _cache[2] || (_cache[2] = _createTextVNode(\" ORACLE \"))]), $setup.expandedDBType.oracle ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.oracleDBList, (db, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: \"db-item\"\n    }, [_createElementVNode(\"span\", {\n      onClick: $event => $setup.selectDB(db)\n    }, [_cache[3] || (_cache[3] = _createElementVNode(\"span\", {\n      class: \"leaf-icon\"\n    }, \"ㄴ\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(db), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_6)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"li\", null, [_createElementVNode(\"span\", {\n    onClick: _cache[1] || (_cache[1] = $event => $setup.toggleDBType('tibero')),\n    class: \"tree-node\"\n  }, [_createElementVNode(\"span\", _hoisted_7, _toDisplayString($setup.expandedDBType.tibero ? '-' : '+'), 1 /* TEXT */), _cache[4] || (_cache[4] = _createTextVNode(\" TIBERO \"))]), $setup.expandedDBType.tibero ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_8, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.tiberoDBList, (db, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: \"db-item\"\n    }, [_createElementVNode(\"span\", {\n      onClick: $event => $setup.selectDB(db)\n    }, [_cache[5] || (_cache[5] = _createElementVNode(\"span\", {\n      class: \"leaf-icon\"\n    }, \"ㄴ\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(db), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_9)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)])])]), _createCommentVNode(\" 중앙 차트 \"), $setup.selectedDB ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createElementVNode(\"h3\", null, _toDisplayString($setup.selectedDB) + \" - Metrics\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_11, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.metrics, (metric, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: metric,\n      class: \"metric-chart\"\n    }, [_createElementVNode(\"h4\", null, _toDisplayString(metric), 1 /* TEXT */), _createElementVNode(\"canvas\", {\n      ref_for: true,\n      ref: `chartRef_${index}`\n    }, null, 512 /* NEED_PATCH */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","onClick","_cache","$event","$setup","toggleDBType","_hoisted_4","_toDisplayString","expandedDBType","oracle","_createTextVNode","_hoisted_5","_Fragment","_renderList","oracleDBList","db","index","selectDB","_hoisted_6","_hoisted_7","tibero","_hoisted_8","tiberoDBList","_hoisted_9","selectedDB","_hoisted_10","_hoisted_11","metrics","metric","ref_for","ref"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DailyChk.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div class=\"content\">\r\n      <!-- 왼쪽 DB 트리 구조 -->\r\n      <div class=\"db-tree\">\r\n        <ul>\r\n          <li>\r\n            <span @click=\"toggleDBType('oracle')\" class=\"tree-node\">\r\n              <span class=\"toggle-icon\">{{ expandedDBType.oracle ? '-' : '+' }}</span> ORACLE\r\n            </span>\r\n            <ul v-if=\"expandedDBType.oracle\" class=\"sub-tree\">\r\n              <li v-for=\"(db, index) in oracleDBList\" :key=\"index\" class=\"db-item\">\r\n                <span @click=\"selectDB(db)\">\r\n                  <span class=\"leaf-icon\">ㄴ</span> {{ db }}\r\n                </span>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <span @click=\"toggleDBType('tibero')\" class=\"tree-node\">\r\n              <span class=\"toggle-icon\">{{ expandedDBType.tibero ? '-' : '+' }}</span> TIBERO\r\n            </span>\r\n            <ul v-if=\"expandedDBType.tibero\" class=\"sub-tree\">\r\n              <li v-for=\"(db, index) in tiberoDBList\" :key=\"index\" class=\"db-item\">\r\n                <span @click=\"selectDB(db)\">\r\n                  <span class=\"leaf-icon\">ㄴ</span> {{ db }}\r\n                </span>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <!-- 중앙 차트 -->\r\n      <div class=\"chart-container\" v-if=\"selectedDB\">\r\n        <h3>{{ selectedDB }} - Metrics</h3>\r\n        <div class=\"charts-row\">\r\n          <div v-for=\"(metric, index) in metrics\" :key=\"metric\" class=\"metric-chart\">\r\n            <h4>{{ metric }}</h4>\r\n            <canvas :ref=\"`chartRef_${index}`\"></canvas>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, nextTick, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  setup() {\r\n    // 데이터 초기화\r\n    const expandedDBType = ref({ oracle: false, tibero: false });\r\n    const selectedDB = ref(null);\r\n    const oracleDBList = ref([]);\r\n    const tiberoDBList = ref([]);\r\n    const metrics = ref([\r\n      'TRANSACTIONS', 'TOTAL_SESSION', 'ACTIVE_SESSION',\r\n      'BUFFER_NOWAIT_PCT', 'REDO_NOWAIT_PCT', 'BUFFER_HIT_PCT',\r\n      'LATCH_HIT_PCT', 'LIBRARY_HIT_PCT', 'SOFT_PARSE_PCT',\r\n      'EXECUTE_TO_PARSE_PCT', 'PARSE_CPU_TO_PARSE_ELAPSD', 'NON_PARSE_CPU',\r\n      'IN_MEMORY_SORT', 'DAILY_ARCH_CNT'\r\n    ]);\r\n\r\n    // DB 목록을 불러오는 함수\r\n    const fetchDbList = async () => {\r\n      try {\r\n        const response = await axios.get('/api/dailychk/db-list');\r\n        console.log(\"DB List Response:\", response.data);  // 응답 확인\r\n\r\n        const dbList = response.data;\r\n\r\n        // ORACLE과 TIBERO DB 리스트 분리\r\n        oracleDBList.value = dbList.filter(db => db.dbType === 'oracle').map(db => db.name) || [];\r\n        tiberoDBList.value = dbList.filter(db => db.dbType === 'tibero').map(db => db.name) || [];\r\n\r\n        // 상태 출력 확인\r\n        console.log(\"oracleDBList:\", oracleDBList.value);  // oracleDBList 확인\r\n        console.log(\"tiberoDBList:\", tiberoDBList.value);  // tiberoDBList 확인\r\n      } catch (error) {\r\n        console.error(\"DB 목록을 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    // DB 종류별 트리 토글\r\n    const toggleDBType = (type) => {\r\n      expandedDBType.value[type] = !expandedDBType.value[type];\r\n      console.log(`Toggled ${type}:`, expandedDBType.value);  // 상태 변경 확인\r\n    };\r\n\r\n    // DB 선택 시 차트 렌더링\r\n    const selectDB = (dbName) => {\r\n      selectedDB.value = dbName;\r\n      nextTick(() => {\r\n        renderCharts();\r\n      });\r\n    };\r\n\r\n    // 차트 렌더링 함수\r\n    const renderCharts = () => {\r\n      metrics.value.forEach((metric, index) => {\r\n        const canvas = document.querySelector(`[ref=\"chartRef_${index}\"]`);\r\n        if (canvas) {\r\n          // 이전 차트가 있으면 제거\r\n          if (canvas.chart) {\r\n            canvas.chart.destroy();\r\n          }\r\n\r\n          // 새 차트 생성\r\n          canvas.chart = new Chart(canvas, {\r\n            type: 'line',\r\n            data: {\r\n              labels: Array.from({ length: 24 }, (_, i) => `${i}:00`),\r\n              datasets: [{\r\n                label: metric,\r\n                data: Array.from({ length: 24 }, () => Math.floor(Math.random() * 100)),\r\n                borderColor: 'blue',\r\n                fill: false\r\n              }]\r\n            },\r\n            options: {\r\n              responsive: false,\r\n              maintainAspectRatio: false,\r\n              width: 100,  // 가로 크기\r\n              height: 90  // 세로 크기\r\n            }\r\n          });\r\n        }\r\n      });\r\n    };\r\n\r\n    // 컴포넌트 마운트 시 DB 목록을 가져옵니다.\r\n    onMounted(() => {\r\n      fetchDbList();\r\n    });\r\n\r\n    return {\r\n      expandedDBType,\r\n      selectedDB,\r\n      oracleDBList,\r\n      tiberoDBList,\r\n      metrics,\r\n      toggleDBType,\r\n      selectDB\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n.content {\r\n  display: flex;\r\n  width: 100%;\r\n  margin-top: 20px;\r\n}\r\n.db-tree {\r\n  width: 250px;\r\n  padding: 10px;\r\n  border-right: 2px solid #ddd;\r\n  background-color: #f9f9f9;\r\n  border-radius: 5px;\r\n}\r\n.db-tree ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n.tree-node {\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  padding: 5px;\r\n  display: flex;\r\n  align-items: center;\r\n  transition: background 0.3s;\r\n}\r\n.tree-node:hover {\r\n  background: #e0e0e0;\r\n  border-radius: 5px;\r\n}\r\n.toggle-icon {\r\n  font-size: 14px;\r\n  margin-right: 5px;\r\n  color: #007bff;\r\n}\r\n.sub-tree {\r\n  padding-left: 15px;\r\n  border-left: 2px solid #ddd;\r\n  margin-top: 5px;\r\n}\r\n.db-item {\r\n  padding-left: 20px;\r\n  cursor: pointer;\r\n  transition: background 0.3s;\r\n}\r\n.db-item:hover {\r\n  background: #e8f0ff;\r\n  border-radius: 3px;\r\n}\r\n.leaf-icon {\r\n  color: #28a745;\r\n  font-weight: bold;\r\n  margin-right: 5px;\r\n}\r\n.chart-container {\r\n  flex-grow: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n.charts-row {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n}\r\n.metric-chart {\r\n  width: 200px;\r\n  height: 150px;\r\n  margin: 5px;\r\n}\r\n.metric-chart canvas {\r\n  width: 100px !important;\r\n  height: 90px !important;\r\n}\r\n.metric-chart h4 {\r\n  text-align: center;\r\n  font-size: 10px;\r\n  margin: 0;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}