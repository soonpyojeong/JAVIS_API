{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nexport default {\n  data() {\n    return {\n      monitoringItems: [{\n        title: '테이블스페이스 관제',\n        events: [],\n        style: {\n          position: 'absolute',\n          top: '20px',\n          left: '300px',\n          zIndex: 1,\n          width: '550px',\n          height: '300px'\n        }\n      }, {\n        title: '생사 관제',\n        events: [],\n        style: {\n          position: 'absolute',\n          top: '20px',\n          left: '900px',\n          zIndex: 1,\n          width: '550px',\n          height: '300px'\n        }\n      }, {\n        title: '오브젝트 인밸리드 관제',\n        events: [{\n          id: 3,\n          message: 'Invalid Object 발견: FUNCTION_A'\n        }],\n        style: {\n          position: 'absolute',\n          top: '380px',\n          left: '300px',\n          zIndex: 1,\n          width: '550px',\n          height: '300px'\n        }\n      }, {\n        title: '락 리스트 관제',\n        events: [{\n          id: 4,\n          message: 'Deadlock 발생: Session 101'\n        }],\n        style: {\n          position: 'absolute',\n          top: '380px',\n          left: '900px',\n          zIndex: 1,\n          width: '550px',\n          height: '300px'\n        }\n      }],\n      dragData: {\n        isDragging: false,\n        index: null,\n        offsetX: 0,\n        offsetY: 0\n      },\n      snapPositions: [20, 380, 560] // 자석처럼 붙을 top 위치들\n    };\n  },\n  methods: {\n    fetchMonitoringData() {\n      axios.get('/api/threshold/tbsChkmon').then(response => {\n        const events = response.data.map(item => ({\n          id: item.id,\n          message: `테이블스페이스 ${item.tsName} 사용률 ${item.chkRate}% 초과 여유공간 ${item.freeSize}Mb 남음`\n        }));\n        this.monitoringItems[0].events = events; // 첫 번째 박스에 데이터 추가\n      }).catch(error => {\n        console.error('데이터 가져오기 실패:', error);\n      });\n    },\n    startDrag(event, index) {\n      this.dragData.isDragging = true;\n      this.dragData.index = index;\n      const item = this.monitoringItems[index];\n      const rect = event.target.getBoundingClientRect(); // 현재 객체의 정확한 위치\n      this.dragData.offsetX = event.clientX - rect.left; // 클릭한 위치에서 객체 왼쪽의 거리\n      this.dragData.offsetY = event.clientY - rect.top; // 클릭한 위치에서 객체 위쪽의 거리\n\n      // 드래그 중에는 transition을 제거하여 즉시 위치를 변경하도록\n      item.style.transition = 'none';\n      item.style.zIndex = 1000; // 드래그 중인 항목을 맨 위로\n\n      window.addEventListener('mousemove', this.onDrag);\n      window.addEventListener('mouseup', this.stopDrag);\n    },\n    onDrag(event) {\n      if (!this.dragData.isDragging) return;\n      const item = this.monitoringItems[this.dragData.index];\n\n      // 드래그된 위치 계산 (객체가 이동할 수 있는 위치)\n      let newLeft = event.clientX - this.dragData.offsetX;\n      let newTop = event.clientY - this.dragData.offsetY;\n\n      // 화면을 벗어나지 않도록 제한\n      newLeft = Math.max(0, Math.min(newLeft, window.innerWidth - parseInt(item.style.width)));\n      newTop = Math.max(0, Math.min(newTop, window.innerHeight - parseInt(item.style.height)));\n      item.style.left = `${newLeft}px`;\n      item.style.top = `${newTop}px`;\n    },\n    stopDrag() {\n      if (!this.dragData.isDragging) return;\n      const item = this.monitoringItems[this.dragData.index];\n\n      // 가장 가까운 snap 위치를 찾음\n      const closestSnap = this.getClosestSnap(item.style.top);\n\n      // transition을 다시 활성화하여 부드럽게 위치 이동\n      item.style.transition = 'top 0.3s ease, left 0.3s ease';\n\n      // item의 top을 가장 가까운 snap 위치로 설정\n      item.style.top = `${closestSnap}px`;\n      item.style.zIndex = 1;\n      this.dragData.isDragging = false;\n      window.removeEventListener('mousemove', this.onDrag);\n      window.removeEventListener('mouseup', this.stopDrag);\n    },\n    getClosestSnap(currentTop) {\n      const top = parseInt(currentTop);\n      let closest = this.snapPositions[0];\n      let minDiff = Math.abs(top - closest);\n      this.snapPositions.forEach(pos => {\n        const diff = Math.abs(top - pos);\n        if (diff < minDiff) {\n          closest = pos;\n          minDiff = diff;\n        }\n      });\n      return closest;\n    }\n  },\n  created() {\n    this.fetchMonitoringData(); // 컴포넌트 생성 시 데이터 가져오기\n  }\n};","map":{"version":3,"names":["data","monitoringItems","title","events","style","position","top","left","zIndex","width","height","id","message","dragData","isDragging","index","offsetX","offsetY","snapPositions","methods","fetchMonitoringData","axios","get","then","response","map","item","tsName","chkRate","freeSize","catch","error","console","startDrag","event","rect","target","getBoundingClientRect","clientX","clientY","transition","window","addEventListener","onDrag","stopDrag","newLeft","newTop","Math","max","min","innerWidth","parseInt","innerHeight","closestSnap","getClosestSnap","removeEventListener","currentTop","closest","minDiff","abs","forEach","pos","diff","created"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\MainPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\">\r\n\r\n    <div\r\n      class=\"monitoring-box draggable\"\r\n      v-for=\"(item, index) in monitoringItems\"\r\n      :key=\"item.title\"\r\n      :style=\"item.style\"\r\n      @mousedown=\"startDrag($event, index)\"\r\n    >\r\n      <h2>{{ item.title }}</h2>\r\n      <ul>\r\n        <li v-for=\"event in item.events\" :key=\"event.id\">\r\n          {{ event.message }}\r\n        </li>\r\n      </ul>\r\n      <div v-if=\"item.events.length === 0\" class=\"no-events\">현재 이벤트가 없습니다.</div>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n         monitoringItems: [\r\n           {\r\n             title: '테이블스페이스 관제',\r\n             events: [],\r\n             style: { position: 'absolute', top: '20px', left: '300px', zIndex: 1, width: '550px', height: '300px' },\r\n           },\r\n           {\r\n             title: '생사 관제',\r\n             events: [],\r\n             style: { position: 'absolute', top: '20px', left: '900px', zIndex: 1, width: '550px', height: '300px' },\r\n           },\r\n           {\r\n             title: '오브젝트 인밸리드 관제',\r\n             events: [{ id: 3, message: 'Invalid Object 발견: FUNCTION_A' }],\r\n             style: { position: 'absolute', top: '380px', left: '300px', zIndex: 1, width: '550px', height: '300px' },\r\n           },\r\n           {\r\n             title: '락 리스트 관제',\r\n             events: [{ id: 4, message: 'Deadlock 발생: Session 101' }],\r\n             style: { position: 'absolute', top: '380px', left: '900px', zIndex: 1, width: '550px', height: '300px' },\r\n           },\r\n         ],\r\n         dragData: {\r\n           isDragging: false,\r\n           index: null,\r\n           offsetX: 0,\r\n           offsetY: 0,\r\n         },\r\n         snapPositions: [20, 380, 560], // 자석처럼 붙을 top 위치들\r\n       };\r\n     },\r\n\r\n  methods: {\r\n    fetchMonitoringData() {\r\n        axios.get('/api/threshold/tbsChkmon')\r\n          .then(response => {\r\n            const events = response.data.map(item => ({\r\n              id: item.id,\r\n              message: `테이블스페이스 ${item.tsName} 사용률 ${item.chkRate}% 초과 여유공간 ${item.freeSize}Mb 남음`,\r\n            }));\r\n            this.monitoringItems[0].events = events; // 첫 번째 박스에 데이터 추가\r\n          })\r\n          .catch(error => {\r\n            console.error('데이터 가져오기 실패:', error);\r\n          });\r\n      },\r\n\r\n    startDrag(event, index) {\r\n      this.dragData.isDragging = true;\r\n      this.dragData.index = index;\r\n\r\n      const item = this.monitoringItems[index];\r\n      const rect = event.target.getBoundingClientRect();  // 현재 객체의 정확한 위치\r\n      this.dragData.offsetX = event.clientX - rect.left;  // 클릭한 위치에서 객체 왼쪽의 거리\r\n      this.dragData.offsetY = event.clientY - rect.top;   // 클릭한 위치에서 객체 위쪽의 거리\r\n\r\n      // 드래그 중에는 transition을 제거하여 즉시 위치를 변경하도록\r\n      item.style.transition = 'none';\r\n\r\n      item.style.zIndex = 1000;  // 드래그 중인 항목을 맨 위로\r\n\r\n      window.addEventListener('mousemove', this.onDrag);\r\n      window.addEventListener('mouseup', this.stopDrag);\r\n    },\r\n\r\n    onDrag(event) {\r\n      if (!this.dragData.isDragging) return;\r\n\r\n      const item = this.monitoringItems[this.dragData.index];\r\n\r\n      // 드래그된 위치 계산 (객체가 이동할 수 있는 위치)\r\n      let newLeft = event.clientX - this.dragData.offsetX;\r\n      let newTop = event.clientY - this.dragData.offsetY;\r\n\r\n      // 화면을 벗어나지 않도록 제한\r\n      newLeft = Math.max(0, Math.min(newLeft, window.innerWidth - parseInt(item.style.width)));\r\n      newTop = Math.max(0, Math.min(newTop, window.innerHeight - parseInt(item.style.height)));\r\n\r\n      item.style.left = `${newLeft}px`;\r\n      item.style.top = `${newTop}px`;\r\n    },\r\n\r\n    stopDrag() {\r\n      if (!this.dragData.isDragging) return;\r\n\r\n      const item = this.monitoringItems[this.dragData.index];\r\n\r\n      // 가장 가까운 snap 위치를 찾음\r\n      const closestSnap = this.getClosestSnap(item.style.top);\r\n\r\n      // transition을 다시 활성화하여 부드럽게 위치 이동\r\n      item.style.transition = 'top 0.3s ease, left 0.3s ease';\r\n\r\n      // item의 top을 가장 가까운 snap 위치로 설정\r\n      item.style.top = `${closestSnap}px`;\r\n\r\n      item.style.zIndex = 1;\r\n      this.dragData.isDragging = false;\r\n\r\n      window.removeEventListener('mousemove', this.onDrag);\r\n      window.removeEventListener('mouseup', this.stopDrag);\r\n    },\r\n\r\n    getClosestSnap(currentTop) {\r\n      const top = parseInt(currentTop);\r\n      let closest = this.snapPositions[0];\r\n      let minDiff = Math.abs(top - closest);\r\n\r\n      this.snapPositions.forEach(pos => {\r\n        const diff = Math.abs(top - pos);\r\n        if (diff < minDiff) {\r\n          closest = pos;\r\n          minDiff = diff;\r\n        }\r\n      });\r\n\r\n      return closest;\r\n    },\r\n    },\r\n    created() {\r\n           this.fetchMonitoringData(); // 컴포넌트 생성 시 데이터 가져오기\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.dashboard {\r\n  position: relative;\r\n  height: 100vh;\r\n  background: #f9f9f9;\r\n  font-family: 'Arial', sans-serif;\r\n  overflow: hidden;\r\n}\r\n\r\n.monitoring-box, .schedule-box {\r\n  background: white;\r\n  user-select: none;\r\n  border: 1px solid #ddd;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  padding: 15px;\r\n  cursor: grab;\r\n  transition: transform 0.2s ease, left 0.2s ease, top 0.2s ease;\r\n  position: absolute;\r\n}\r\n\r\n.monitoring-box:active {\r\n  cursor: grabbing;\r\n}\r\n\r\n.monitoring-box h2, .schedule-box h2 {\r\n  font-size: 18px;\r\n  margin-bottom: 10px;\r\n  color: #333;\r\n  border-bottom: 1px solid #ddd;\r\n  padding-bottom: 5px;\r\n}\r\n\r\n.monitoring-box ul {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.monitoring-box li {\r\n  padding: 5px 0;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  font-size: 14px;\r\n  color: #555;\r\n}\r\n\r\n.monitoring-box li:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.no-events {\r\n  font-size: 14px;\r\n  color: #999;\r\n  text-align: center;\r\n  padding: 10px 0;\r\n}\r\n\r\n\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}