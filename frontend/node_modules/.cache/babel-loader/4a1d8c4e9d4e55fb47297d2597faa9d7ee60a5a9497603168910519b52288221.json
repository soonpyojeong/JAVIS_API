{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      dbList: [],\n      searchQuery: \"\"\n    };\n  },\n  computed: {\n    filteredDbList() {\n      const query = this.searchQuery.toLowerCase();\n      return this.dbList.filter(db => {\n        return db.dbDescript && db.dbDescript.toLowerCase().includes(query) || db.hostname && db.hostname.toLowerCase().includes(query) || db.pubIp && db.pubIp.toLowerCase().includes(query) || db.vip && db.vip.toLowerCase().includes(query) || db.dbType && db.dbType.toLowerCase().includes(query) || db.dbName && db.dbName.toLowerCase().includes(query);\n      });\n    }\n  },\n  methods: {\n    confirmAndUpdate(db, field) {\n      const confirmation = window.confirm(\"정말 수정하시겠습니까?\");\n      if (confirmation) {\n        this.updateDbStatus(db, field);\n      }\n    },\n    updateDbStatus(db, field) {\n      const newStatus = db[field] === 'Y' ? 'N' : 'Y'; // 상태를 반전시킴\n      db[field] = newStatus; // 로컬에서 상태 업데이트\n\n      // 서버로 상태 변경 요청 보내기\n      axios.put(`http://10.90.4.60:8080/api/db-list/update/${db.id}`, {\n        [field]: newStatus\n      }).then(() => {\n        console.log(`${field} 업데이트 성공`);\n      }).catch(error => {\n        console.error(`${field} 업데이트 실패`, error);\n        // 실패 시 상태를 원래 값으로 되돌림\n        db[field] = db[field] === 'Y' ? 'N' : 'Y';\n      });\n    }\n  },\n  mounted() {\n    axios.get(\"http://10.90.4.60:8080/api/db-list/all\").then(response => {\n      this.dbList = response.data;\n    }).catch(error => {\n      console.error(\"API 호출 오류:\", error);\n    });\n  }\n};","map":{"version":3,"names":["axios","data","dbList","searchQuery","computed","filteredDbList","query","toLowerCase","filter","db","dbDescript","includes","hostname","pubIp","vip","dbType","dbName","methods","confirmAndUpdate","field","confirmation","window","confirm","updateDbStatus","newStatus","put","id","then","console","log","catch","error","mounted","get","response"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DBList.vue"],"sourcesContent":["<template>\r\n  <div class=\"db-list-container\">\r\n    <h2>DB 리스트</h2>\r\n\r\n    <!-- 검색 박스 -->\r\n    <div class=\"search-box\">\r\n      <label for=\"search\" class=\"search-label\">검색:</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"search\"\r\n        v-model=\"searchQuery\"\r\n        placeholder=\"설명, 호스트, PubIP, VIP, DB 타입, DB 이름\"\r\n      />\r\n    </div>\r\n\r\n    <table v-if=\"filteredDbList.length > 0\" class=\"db-table\">\r\n      <thead>\r\n        <tr>\r\n          <th>ID</th>\r\n          <th>자산</th>\r\n          <th>설명</th>\r\n          <th>호스트</th>\r\n          <th>PubIP</th>\r\n          <th>VIP</th>\r\n          <th>DB 타입</th>\r\n          <th>DB 이름</th>\r\n          <th>생사관제</th>\r\n          <th>TBS수집</th>\r\n          <th>Sybase 트랜잭션</th>\r\n          <th>OBJSIZE 수집</th>\r\n          <th>일일 점검</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"db in filteredDbList\" :key=\"db.id\">\r\n          <td>{{ db.id }}</td>\r\n          <td>{{ db.assets }}</td>\r\n          <td>{{ db.dbDescript }}</td>\r\n          <td>{{ db.hostname }}</td>\r\n          <td>{{ db.pubIp }}</td>\r\n          <td>{{ db.vip }}</td>\r\n          <td>{{ db.dbType }}</td>\r\n          <td>{{ db.dbName }}</td>\r\n          <td>\r\n            <button :class=\"db.liveChk === 'Y' ? 'btn-on' : 'btn-off'\" @click=\"confirmAndUpdate(db, 'liveChk')\">\r\n              {{ db.liveChk === 'Y' ? 'On' : 'Off' }}\r\n            </button>\r\n          </td>\r\n          <td>\r\n            <button :class=\"db.sizeChk === 'Y' ? 'btn-on' : 'btn-off'\" @click=\"confirmAndUpdate(db, 'sizeChk')\">\r\n              {{ db.sizeChk === 'Y' ? 'On' : 'Off' }}\r\n            </button>\r\n          </td>\r\n          <td>\r\n            <button :class=\"db.trnBakChk === 'Y' ? 'btn-on' : 'btn-off'\" @click=\"confirmAndUpdate(db, 'trnBakChk')\">\r\n              {{ db.trnBakChk === 'Y' ? 'On' : 'Off' }}\r\n            </button>\r\n          </td>\r\n          <td>\r\n            <button :class=\"db.objSegSizeChk === 'Y' ? 'btn-on' : 'btn-off'\" @click=\"confirmAndUpdate(db, 'objSegSizeChk')\">\r\n              {{ db.objSegSizeChk === 'Y' ? 'On' : 'Off' }}\r\n            </button>\r\n          </td>\r\n          <td>\r\n            <button :class=\"db.dailyChk === 'Y' ? 'btn-on' : 'btn-off'\" @click=\"confirmAndUpdate(db, 'dailyChk')\">\r\n              {{ db.dailyChk === 'Y' ? 'On' : 'Off' }}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <p v-else>데이터가 없습니다.</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      dbList: [],\r\n      searchQuery: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    filteredDbList() {\r\n      const query = this.searchQuery.toLowerCase();\r\n      return this.dbList.filter(db => {\r\n        return (\r\n          (db.dbDescript && db.dbDescript.toLowerCase().includes(query)) ||\r\n          (db.hostname && db.hostname.toLowerCase().includes(query)) ||\r\n          (db.pubIp && db.pubIp.toLowerCase().includes(query)) ||\r\n          (db.vip && db.vip.toLowerCase().includes(query)) ||\r\n          (db.dbType && db.dbType.toLowerCase().includes(query)) ||\r\n          (db.dbName && db.dbName.toLowerCase().includes(query))\r\n        );\r\n      });\r\n    }\r\n  },\r\n  methods: {\r\n    confirmAndUpdate(db, field) {\r\n      const confirmation = window.confirm(\"정말 수정하시겠습니까?\");\r\n      if (confirmation) {\r\n        this.updateDbStatus(db, field);\r\n      }\r\n    },\r\n    updateDbStatus(db, field) {\r\n      const newStatus = db[field] === 'Y' ? 'N' : 'Y'; // 상태를 반전시킴\r\n      db[field] = newStatus; // 로컬에서 상태 업데이트\r\n\r\n      // 서버로 상태 변경 요청 보내기\r\n      axios\r\n        .put(`http://10.90.4.60:8080/api/db-list/update/${db.id}`, { [field]: newStatus })\r\n        .then(() => {\r\n          console.log(`${field} 업데이트 성공`);\r\n        })\r\n        .catch((error) => {\r\n          console.error(`${field} 업데이트 실패`, error);\r\n          // 실패 시 상태를 원래 값으로 되돌림\r\n          db[field] = db[field] === 'Y' ? 'N' : 'Y';\r\n        });\r\n    },\r\n  },\r\n  mounted() {\r\n    axios\r\n      .get(\"http://10.90.4.60:8080/api/db-list/all\")\r\n      .then((response) => {\r\n        this.dbList = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"API 호출 오류:\", error);\r\n      });\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.db-list-container {\r\n  font-family: 'Arial', sans-serif;\r\n  padding: 20px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  font-size: 2em;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.search-box {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n}\r\n\r\n.search-label {\r\n  margin-right: 10px;\r\n  font-size: 1.1em;\r\n}\r\n\r\n.search-box input {\r\n  padding: 8px;\r\n  font-size: 1em;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  width: 300px;\r\n}\r\n\r\n.db-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin: 20px 0;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.db-table th, .db-table td {\r\n  padding: 12px 15px;\r\n  text-align: center;\r\n  border: 1px solid #ddd;\r\n}\r\n\r\n.db-table th {\r\n  background-color: #f4f4f4;\r\n  font-weight: bold;\r\n}\r\n\r\n.db-table tr:nth-child(even) {\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.db-table tr:hover {\r\n  background-color: #f1f1f1;\r\n}\r\n\r\nbutton {\r\n  padding: 5px 10px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 0.9em;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.btn-on {\r\n  background-color: #4caf50;\r\n  color: white;\r\n}\r\n\r\n.btn-on:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.btn-off {\r\n  background-color: #f44336;\r\n  color: white;\r\n}\r\n\r\n.btn-off:hover {\r\n  background-color: #e53935;\r\n}\r\n\r\np {\r\n  text-align: center;\r\n  font-size: 1.2em;\r\n  color: #555;\r\n}\r\n</style>\r\n"],"mappings":";;AA4EA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MACVC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,cAAcA,CAAA,EAAG;MACf,MAAMC,KAAI,GAAI,IAAI,CAACH,WAAW,CAACI,WAAW,CAAC,CAAC;MAC5C,OAAO,IAAI,CAACL,MAAM,CAACM,MAAM,CAACC,EAAC,IAAK;QAC9B,OACGA,EAAE,CAACC,UAAS,IAAKD,EAAE,CAACC,UAAU,CAACH,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,KAAK,CAAC,IAC5DG,EAAE,CAACG,QAAO,IAAKH,EAAE,CAACG,QAAQ,CAACL,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,KAAK,CAAC,IACxDG,EAAE,CAACI,KAAI,IAAKJ,EAAE,CAACI,KAAK,CAACN,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,KAAK,CAAC,IAClDG,EAAE,CAACK,GAAE,IAAKL,EAAE,CAACK,GAAG,CAACP,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,KAAK,CAAC,IAC9CG,EAAE,CAACM,MAAK,IAAKN,EAAE,CAACM,MAAM,CAACR,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,KAAK,CAAC,IACpDG,EAAE,CAACO,MAAK,IAAKP,EAAE,CAACO,MAAM,CAACT,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,KAAK,CAAC;MAEzD,CAAC,CAAC;IACJ;EACF,CAAC;EACDW,OAAO,EAAE;IACPC,gBAAgBA,CAACT,EAAE,EAAEU,KAAK,EAAE;MAC1B,MAAMC,YAAW,GAAIC,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC;MACnD,IAAIF,YAAY,EAAE;QAChB,IAAI,CAACG,cAAc,CAACd,EAAE,EAAEU,KAAK,CAAC;MAChC;IACF,CAAC;IACDI,cAAcA,CAACd,EAAE,EAAEU,KAAK,EAAE;MACxB,MAAMK,SAAQ,GAAIf,EAAE,CAACU,KAAK,MAAM,GAAE,GAAI,GAAE,GAAI,GAAG,EAAE;MACjDV,EAAE,CAACU,KAAK,IAAIK,SAAS,EAAE;;MAEvB;MACAxB,KAAI,CACDyB,GAAG,CAAC,6CAA6ChB,EAAE,CAACiB,EAAE,EAAE,EAAE;QAAE,CAACP,KAAK,GAAGK;MAAU,CAAC,EAChFG,IAAI,CAAC,MAAM;QACVC,OAAO,CAACC,GAAG,CAAC,GAAGV,KAAK,UAAU,CAAC;MACjC,CAAC,EACAW,KAAK,CAAEC,KAAK,IAAK;QAChBH,OAAO,CAACG,KAAK,CAAC,GAAGZ,KAAK,UAAU,EAAEY,KAAK,CAAC;QACxC;QACAtB,EAAE,CAACU,KAAK,IAAIV,EAAE,CAACU,KAAK,MAAM,GAAE,GAAI,GAAE,GAAI,GAAG;MAC3C,CAAC,CAAC;IACN;EACF,CAAC;EACDa,OAAOA,CAAA,EAAG;IACRhC,KAAI,CACDiC,GAAG,CAAC,wCAAwC,EAC5CN,IAAI,CAAEO,QAAQ,IAAK;MAClB,IAAI,CAAChC,MAAK,GAAIgC,QAAQ,CAACjC,IAAI;IAC7B,CAAC,EACA6B,KAAK,CAAEC,KAAK,IAAK;MAChBH,OAAO,CAACG,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IACpC,CAAC,CAAC;EACN;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}