{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      monitoringItems: [{\n        title: '테이블스페이스 관제',\n        events: [],\n        style: {\n          position: 'absolute',\n          top: '20px',\n          left: '300px',\n          zIndex: 1,\n          width: '550px',\n          height: '300px'\n        },\n        isActive: false,\n        timerId: null\n      }, {\n        title: '생사 관제',\n        events: [],\n        style: {\n          position: 'absolute',\n          top: '20px',\n          left: '900px',\n          zIndex: 1,\n          width: '550px',\n          height: '300px'\n        },\n        isActive: false,\n        timerId: null\n      }, {\n        title: '오브젝트 인밸리드 관제',\n        events: [{\n          id: 3,\n          message: 'Invalid Object 발견: FUNCTION_A'\n        }],\n        style: {\n          position: 'absolute',\n          top: '380px',\n          left: '300px',\n          zIndex: 1,\n          width: '550px',\n          height: '300px'\n        },\n        isActive: false,\n        timerId: null\n      }, {\n        title: '락 리스트 관제',\n        events: [{\n          id: 4,\n          message: 'Deadlock 발생: Session 101'\n        }],\n        style: {\n          position: 'absolute',\n          top: '380px',\n          left: '900px',\n          zIndex: 1,\n          width: '550px',\n          height: '300px'\n        },\n        isActive: false,\n        timerId: null\n      }]\n    };\n  },\n  methods: {\n    fetchMonitoringData(index) {\n      axios.get(`/api/threshold/tbsChkmon?index=${index}`).then(response => {\n        const events = response.data.map(item => ({\n          id: item.id,\n          message: `${item.dbName} DB의 사용률 ${item.chkRate}% 초과 여유공간 ${item.freeSize}Mb 남음`\n        }));\n        this.monitoringItems[index].events = events;\n      }).catch(error => {\n        console.error(`데이터 가져오기 실패 (index: ${index}):`, error);\n      });\n    },\n    toggleMonitoring(index) {\n      const item = this.monitoringItems[index];\n      if (item.isActive) {\n        clearInterval(item.timerId); // 타이머 중지\n        item.timerId = null;\n        item.isActive = false;\n      } else {\n        this.fetchMonitoringData(index); // 즉시 데이터 갱신\n        item.timerId = setInterval(() => this.fetchMonitoringData(index), 5000); // 5초 간격으로 갱신\n        item.isActive = true;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","monitoringItems","title","events","style","position","top","left","zIndex","width","height","isActive","timerId","id","message","methods","fetchMonitoringData","index","get","then","response","map","item","dbName","chkRate","freeSize","catch","error","console","toggleMonitoring","clearInterval","setInterval"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\MainPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\">\r\n    <div\r\n      class=\"monitoring-box\"\r\n      v-for=\"(item, index) in monitoringItems\"\r\n      :key=\"item.title\"\r\n      :style=\"item.style\"\r\n    >\r\n      <h2>{{ item.title }}</h2>\r\n      <div class=\"content\">\r\n        <ul>\r\n          <li v-for=\"event in item.events\" :key=\"event.id\">\r\n            {{ event.message }}\r\n          </li>\r\n        </ul>\r\n        <div v-if=\"item.events.length === 0\" class=\"no-events\">현재 이벤트가 없습니다.</div>\r\n      </div>\r\n      <!-- 버튼을 오른쪽 상단에 위치시킴 -->\r\n      <button @click=\"toggleMonitoring(index)\" :class=\"{ active: item.isActive }\" class=\"monitoring-button\">\r\n        {{ item.isActive ? '중지' : '시작' }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      monitoringItems: [\r\n        {\r\n          title: '테이블스페이스 관제',\r\n          events: [],\r\n          style: { position: 'absolute', top: '20px', left: '300px', zIndex: 1, width: '550px', height: '300px' },\r\n          isActive: false,\r\n          timerId: null,\r\n        },\r\n        {\r\n          title: '생사 관제',\r\n          events: [],\r\n          style: { position: 'absolute', top: '20px', left: '900px', zIndex: 1, width: '550px', height: '300px' },\r\n          isActive: false,\r\n          timerId: null,\r\n        },\r\n        {\r\n          title: '오브젝트 인밸리드 관제',\r\n          events: [{ id: 3, message: 'Invalid Object 발견: FUNCTION_A' }],\r\n          style: { position: 'absolute', top: '380px', left: '300px', zIndex: 1, width: '550px', height: '300px' },\r\n          isActive: false,\r\n          timerId: null,\r\n        },\r\n        {\r\n          title: '락 리스트 관제',\r\n          events: [{ id: 4, message: 'Deadlock 발생: Session 101' }],\r\n          style: { position: 'absolute', top: '380px', left: '900px', zIndex: 1, width: '550px', height: '300px' },\r\n          isActive: false,\r\n          timerId: null,\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  methods: {\r\n    fetchMonitoringData(index) {\r\n      axios.get(`/api/threshold/tbsChkmon?index=${index}`)\r\n        .then(response => {\r\n          const events = response.data.map(item => ({\r\n            id: item.id,\r\n            message: `${item.dbName} DB의 사용률 ${item.chkRate}% 초과 여유공간 ${item.freeSize}Mb 남음`,\r\n          }));\r\n          this.monitoringItems[index].events = events;\r\n        })\r\n        .catch(error => {\r\n          console.error(`데이터 가져오기 실패 (index: ${index}):`, error);\r\n        });\r\n    },\r\n    toggleMonitoring(index) {\r\n      const item = this.monitoringItems[index];\r\n      if (item.isActive) {\r\n        clearInterval(item.timerId); // 타이머 중지\r\n        item.timerId = null;\r\n        item.isActive = false;\r\n      } else {\r\n        this.fetchMonitoringData(index); // 즉시 데이터 갱신\r\n        item.timerId = setInterval(() => this.fetchMonitoringData(index), 5000); // 5초 간격으로 갱신\r\n        item.isActive = true;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.dashboard {\r\n  position: relative;\r\n  height: 100vh;\r\n  background: #f9f9f9;\r\n  font-family: 'Arial', sans-serif;\r\n  overflow: hidden;\r\n}\r\n\r\n.monitoring-box {\r\n  background: white;\r\n  user-select: none;\r\n  border: 1px solid #ddd;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  padding: 15px;\r\n  cursor: grab;\r\n  transition: transform 0.2s ease, left 0.2s ease, top 0.2s ease;\r\n  position: absolute;\r\n  height: auto;\r\n  max-height: 300px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.monitoring-box h2 {\r\n  position: relative;\r\n  background: white;\r\n  z-index: 2;\r\n  font-size: 18px;\r\n  margin: 0;\r\n  color: #333;\r\n  border-bottom: 1px solid #ddd;\r\n  padding: 5px 0;\r\n}\r\n\r\n.monitoring-box .content {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding-top: 10px;\r\n}\r\n\r\n.monitoring-box ul {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.monitoring-box li {\r\n  padding: 5px 0;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  font-size: 14px;\r\n  color: #555;\r\n}\r\n\r\n.monitoring-box li:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.no-events {\r\n  font-size: 14px;\r\n  color: #999;\r\n  text-align: center;\r\n  padding: 10px 0;\r\n}\r\n\r\n/* 버튼을 오른쪽 상단에 배치 */\r\n.monitoring-box {\r\n  position: relative;\r\n}\r\n\r\n.monitoring-button {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  padding: 5px 15px; /* 기존 버튼 크기 그대로 유지 */\r\n  font-size: 12px;\r\n  background-color: #ddd;\r\n  border: none;\r\n  cursor: pointer;\r\n  /* 네모모양 스타일 제거 */\r\n}\r\n\r\n.monitoring-button.active {\r\n  background-color: #007bff;\r\n  color: white;\r\n}\r\n\r\n.monitoring-button:hover {\r\n  background-color: #0056b3;\r\n  color: white;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}