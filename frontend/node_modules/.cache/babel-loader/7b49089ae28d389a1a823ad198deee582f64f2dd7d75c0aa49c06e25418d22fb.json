{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { ref, onMounted, watch } from 'vue';\nimport Chart from 'chart.js/auto';\nexport default {\n  setup() {\n    const expandedDBType = ref(null);\n    const selectedDB = ref(null);\n    const chartRefs = ref({});\n    const chartInstances = ref({});\n    const oracleDBList = ref([{\n      name: 'ORACLE_DB1',\n      isLeaf: true\n    }, {\n      name: 'ORACLE_DB2',\n      isLeaf: true\n    }, {\n      name: 'ORACLE_DB3',\n      isLeaf: true\n    }]);\n    const tiberoDBList = ref([{\n      name: 'TIBERO_DB1',\n      isLeaf: true\n    }, {\n      name: 'TIBERO_DB2',\n      isLeaf: true\n    }, {\n      name: 'TIBERO_DB3',\n      isLeaf: true\n    }]);\n    const metrics = ref(['TRANSACTIONS', 'TOTAL_SESSION', 'ACTIVE_SESSION', 'BUFFER_NOWAIT_PCT', 'REDO_NOWAIT_PCT', 'BUFFER_HIT_PCT', 'LATCH_HIT_PCT', 'LIBRARY_HIT_PCT', 'SOFT_PARSE_PCT', 'EXECUTE_TO_PARSE_PCT', 'PARSE_CPU_TO_PARSE_ELAPSD', 'NON_PARSE_CPU', 'IN_MEMORY_SORT', 'DAILY_ARCH_CNT']);\n    const sampleData = {\n      'TRANSACTIONS': [120, 130, 140, 150, 160, 170],\n      'TOTAL_SESSION': [80, 85, 90, 100, 110, 120],\n      'ACTIVE_SESSION': [60, 65, 70, 80, 90, 100],\n      'BUFFER_NOWAIT_PCT': [10, 20, 25, 30, 35, 40],\n      'REDO_NOWAIT_PCT': [5, 10, 15, 20, 25, 30],\n      'BUFFER_HIT_PCT': [95, 93, 92, 90, 89, 88],\n      'LATCH_HIT_PCT': [98, 97, 96, 95, 94, 93],\n      'LIBRARY_HIT_PCT': [99, 98, 97, 96, 95, 94],\n      'SOFT_PARSE_PCT': [40, 45, 50, 55, 60, 65],\n      'EXECUTE_TO_PARSE_PCT': [75, 70, 65, 60, 55, 50],\n      'PARSE_CPU_TO_PARSE_ELAPSD': [20, 25, 30, 35, 40, 45],\n      'NON_PARSE_CPU': [100, 110, 120, 130, 140, 150],\n      'IN_MEMORY_SORT': [15, 10, 5, 3, 2, 1],\n      'DAILY_ARCH_CNT': [5, 10, 15, 20, 25, 30]\n    };\n    const toggleDBType = type => {\n      expandedDBType.value = expandedDBType.value === type ? null : type;\n    };\n    const selectDB = dbName => {\n      selectedDB.value = dbName;\n      createCharts();\n    };\n    const isLeafNode = db => {\n      return db.isLeaf; // 예시에서는 모든 DB가 리프 노드로 설정되어 있습니다.\n    };\n    const setChartRef = (el, metric) => {\n      if (el) {\n        chartRefs.value[metric] = el;\n      }\n    };\n    const createCharts = () => {\n      Object.keys(chartInstances.value).forEach(metric => {\n        if (chartInstances.value[metric]) {\n          chartInstances.value[metric].destroy();\n        }\n      });\n      metrics.value.forEach(metric => {\n        if (chartRefs.value[metric]) {\n          chartInstances.value[metric] = new Chart(chartRefs.value[metric], {\n            type: 'line',\n            data: {\n              labels: ['00:00', '01:00', '02:00', '03:00', '04:00', '05:00'],\n              datasets: [{\n                label: metric,\n                data: sampleData[metric],\n                borderColor: `hsl(${Math.random() * 360}, 70%, 50%)`,\n                fill: false\n              }]\n            },\n            options: {\n              responsive: true,\n              plugins: {\n                legend: {\n                  position: 'top'\n                }\n              }\n            }\n          });\n        }\n      });\n    };\n    watch(selectedDB, createCharts);\n    onMounted(() => {\n      if (selectedDB.value) {\n        createCharts();\n      }\n    });\n    return {\n      expandedDBType,\n      selectedDB,\n      oracleDBList,\n      tiberoDBList,\n      metrics,\n      setChartRef,\n      toggleDBType,\n      selectDB,\n      isLeafNode\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","watch","Chart","setup","expandedDBType","selectedDB","chartRefs","chartInstances","oracleDBList","name","isLeaf","tiberoDBList","metrics","sampleData","toggleDBType","type","value","selectDB","dbName","createCharts","isLeafNode","db","setChartRef","el","metric","Object","keys","forEach","destroy","data","labels","datasets","label","borderColor","Math","random","fill","options","responsive","plugins","legend","position"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DailyChk.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div class=\"content\">\r\n      <!-- 왼쪽 DB 트리 구조 -->\r\n      <div class=\"db-tree\">\r\n        <ul>\r\n          <li>\r\n            <span @click=\"toggleDBType('ORACLE')\">\r\n              {{ expandedDBType === 'ORACLE' ? '-' : '+' }} ORACLE\r\n            </span>\r\n            <ul v-if=\"expandedDBType === 'ORACLE'\">\r\n              <li v-for=\"db in oracleDBList\" :key=\"db.name\" class=\"db-item\">\r\n                <span>{{ db.name }} <span v-if=\"db.isLeaf\">ㄴ</span></span>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <span @click=\"toggleDBType('TIBERO')\">\r\n              {{ expandedDBType === 'TIBERO' ? '-' : '+' }} TIBERO\r\n            </span>\r\n            <ul v-if=\"expandedDBType === 'TIBERO'\">\r\n              <li v-for=\"db in tiberoDBList\" :key=\"db.name\" class=\"db-item\">\r\n                <span>{{ db.name }} <span v-if=\"db.isLeaf\">ㄴ</span></span>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <!-- 중앙 차트 -->\r\n      <div class=\"chart-container\" v-if=\"selectedDB\">\r\n        <h3>{{ selectedDB }} - Metrics</h3>\r\n        <div class=\"charts-row\">\r\n          <div v-for=\"metric in metrics\" :key=\"metric\" class=\"metric-chart\">\r\n            <h4>{{ metric }}</h4>\r\n            <canvas :ref=\"el => setChartRef(el, metric)\"></canvas>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, watch } from 'vue';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  setup() {\r\n    const expandedDBType = ref(null);\r\n    const selectedDB = ref(null);\r\n    const chartRefs = ref({});\r\n    const chartInstances = ref({});\r\n\r\n    const oracleDBList = ref([\r\n      { name: 'ORACLE_DB1', isLeaf: true },\r\n      { name: 'ORACLE_DB2', isLeaf: true },\r\n      { name: 'ORACLE_DB3', isLeaf: true }\r\n    ]);\r\n\r\n    const tiberoDBList = ref([\r\n      { name: 'TIBERO_DB1', isLeaf: true },\r\n      { name: 'TIBERO_DB2', isLeaf: true },\r\n      { name: 'TIBERO_DB3', isLeaf: true }\r\n    ]);\r\n\r\n    const metrics = ref([\r\n      'TRANSACTIONS', 'TOTAL_SESSION', 'ACTIVE_SESSION',\r\n      'BUFFER_NOWAIT_PCT', 'REDO_NOWAIT_PCT', 'BUFFER_HIT_PCT',\r\n      'LATCH_HIT_PCT', 'LIBRARY_HIT_PCT', 'SOFT_PARSE_PCT',\r\n      'EXECUTE_TO_PARSE_PCT', 'PARSE_CPU_TO_PARSE_ELAPSD',\r\n      'NON_PARSE_CPU', 'IN_MEMORY_SORT', 'DAILY_ARCH_CNT'\r\n    ]);\r\n\r\n    const sampleData = {\r\n      'TRANSACTIONS': [120, 130, 140, 150, 160, 170],\r\n      'TOTAL_SESSION': [80, 85, 90, 100, 110, 120],\r\n      'ACTIVE_SESSION': [60, 65, 70, 80, 90, 100],\r\n      'BUFFER_NOWAIT_PCT': [10, 20, 25, 30, 35, 40],\r\n      'REDO_NOWAIT_PCT': [5, 10, 15, 20, 25, 30],\r\n      'BUFFER_HIT_PCT': [95, 93, 92, 90, 89, 88],\r\n      'LATCH_HIT_PCT': [98, 97, 96, 95, 94, 93],\r\n      'LIBRARY_HIT_PCT': [99, 98, 97, 96, 95, 94],\r\n      'SOFT_PARSE_PCT': [40, 45, 50, 55, 60, 65],\r\n      'EXECUTE_TO_PARSE_PCT': [75, 70, 65, 60, 55, 50],\r\n      'PARSE_CPU_TO_PARSE_ELAPSD': [20, 25, 30, 35, 40, 45],\r\n      'NON_PARSE_CPU': [100, 110, 120, 130, 140, 150],\r\n      'IN_MEMORY_SORT': [15, 10, 5, 3, 2, 1],\r\n      'DAILY_ARCH_CNT': [5, 10, 15, 20, 25, 30]\r\n    };\r\n\r\n    const toggleDBType = (type) => {\r\n      expandedDBType.value = expandedDBType.value === type ? null : type;\r\n    };\r\n\r\n    const selectDB = (dbName) => {\r\n      selectedDB.value = dbName;\r\n      createCharts();\r\n    };\r\n\r\n    const isLeafNode = (db) => {\r\n      return db.isLeaf; // 예시에서는 모든 DB가 리프 노드로 설정되어 있습니다.\r\n    };\r\n\r\n    const setChartRef = (el, metric) => {\r\n      if (el) {\r\n        chartRefs.value[metric] = el;\r\n      }\r\n    };\r\n\r\n    const createCharts = () => {\r\n      Object.keys(chartInstances.value).forEach(metric => {\r\n        if (chartInstances.value[metric]) {\r\n          chartInstances.value[metric].destroy();\r\n        }\r\n      });\r\n\r\n      metrics.value.forEach(metric => {\r\n        if (chartRefs.value[metric]) {\r\n          chartInstances.value[metric] = new Chart(chartRefs.value[metric], {\r\n            type: 'line',\r\n            data: {\r\n              labels: ['00:00', '01:00', '02:00', '03:00', '04:00', '05:00'],\r\n              datasets: [{\r\n                label: metric,\r\n                data: sampleData[metric],\r\n                borderColor: `hsl(${Math.random() * 360}, 70%, 50%)`,\r\n                fill: false\r\n              }]\r\n            },\r\n            options: {\r\n              responsive: true,\r\n              plugins: { legend: { position: 'top' } }\r\n            }\r\n          });\r\n        }\r\n      });\r\n    };\r\n\r\n    watch(selectedDB, createCharts);\r\n\r\n    onMounted(() => {\r\n      if (selectedDB.value) {\r\n        createCharts();\r\n      }\r\n    });\r\n\r\n    return {\r\n      expandedDBType,\r\n      selectedDB,\r\n      oracleDBList,\r\n      tiberoDBList,\r\n      metrics,\r\n      setChartRef,\r\n      toggleDBType,\r\n      selectDB,\r\n      isLeafNode\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n.content {\r\n  display: flex;\r\n  width: 100%;\r\n  margin-top: 20px;\r\n}\r\n.db-tree {\r\n  width: 250px;\r\n  padding-right: 20px;\r\n  border-right: 2px solid #ddd;\r\n}\r\n.db-tree ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n.db-tree li {\r\n  cursor: pointer;\r\n  padding: 5px;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n.db-tree li:hover {\r\n  background: #f0f0f0;\r\n}\r\n.db-item {\r\n  padding-left: 20px; /* 들여쓰기 */\r\n}\r\n.chart-container {\r\n  flex-grow: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n.charts-row {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n}\r\n.metric-chart {\r\n  width: 100px;\r\n  height: 90px;\r\n  margin: 5px;\r\n}\r\n.metric-chart canvas {\r\n  width: 100px !important;\r\n  height: 90px !important;\r\n}\r\n.metric-chart h4 {\r\n  text-align: center;\r\n  font-size: 10px;\r\n  margin: 0;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}