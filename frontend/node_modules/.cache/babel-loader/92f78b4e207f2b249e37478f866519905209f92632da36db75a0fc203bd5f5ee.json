{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      smsHistories: [],\n      // 전체 데이터\n      filteredSmsHistories: [],\n      // 필터링된 데이터\n      day: 30,\n      // 기본 30일 기준\n      msgSearch: '',\n      // MSG 내용 검색 필드\n      isAutoFetchActive: false,\n      // 자동 조회 활성화 상태\n      autoFetchInterval: null // 자동 조회 간격\n    };\n  },\n  mounted() {\n    this.fetchSmsHistories(); // 기본적으로 30일 기준으로 데이터 조회\n  },\n  methods: {\n    fetchSmsHistories() {\n      axios.get(`/api/sms/all?day=${this.day}`).then(response => {\n        this.smsHistories = response.data;\n        this.smsHistories.sort((a, b) => {\n          const dateA = a.loc + a.assets; // INDATE + INTIME\n          const dateB = b.loc + b.assets; // INDATE + INTIME\n          if (dateA < dateB) {\n            return 1; // 역순\n          } else if (dateA > dateB) {\n            return -1;\n          }\n          return 0;\n        });\n        this.filteredSmsHistories = this.smsHistories;\n      }).catch(error => {\n        console.error('Error fetching SMS histories:', error);\n      });\n    },\n    filterSmsHistories() {\n      if (this.msgSearch) {\n        this.filteredSmsHistories = this.smsHistories.filter(history => history.msg && history.msg.includes(this.msgSearch));\n      } else {\n        this.filteredSmsHistories = this.smsHistories;\n      }\n    },\n    updateAllSmsHistories() {\n      axios.put('/api/sms/updateall').then(() => {\n        alert('전체 메시지 전송 처리가 완료되었습니다.');\n        this.fetchSmsHistories(); // 업데이트 후 리스트 다시 가져오기\n      }).catch(error => {\n        console.error('Error updating SMS histories:', error);\n      });\n    },\n    toggleAutoFetch() {\n      if (this.isAutoFetchActive) {\n        // 자동 조회 비활성화\n        clearInterval(this.autoFetchInterval);\n        this.autoFetchInterval = null;\n      } else {\n        // 자동 조회 활성화\n        this.autoFetchInterval = setInterval(() => {\n          this.fetchSmsHistories();\n        }, 60000); // 1분마다 조회\n      }\n      this.isAutoFetchActive = !this.isAutoFetchActive;\n    }\n  },\n  beforeUnmount() {\n    // 컴포넌트가 언마운트되기 전에 setInterval을 정리합니다.\n    if (this.autoFetchInterval) {\n      clearInterval(this.autoFetchInterval);\n    }\n  }\n};","map":{"version":3,"names":["axios","data","smsHistories","filteredSmsHistories","day","msgSearch","isAutoFetchActive","autoFetchInterval","mounted","fetchSmsHistories","methods","get","then","response","sort","a","b","dateA","loc","assets","dateB","catch","error","console","filterSmsHistories","filter","history","msg","includes","updateAllSmsHistories","put","alert","toggleAutoFetch","clearInterval","setInterval","beforeUnmount"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\SmsHistory.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>SMS 전송 히스토리</h1>\r\n\r\n    <!-- 일수 입력 필드, MSG 검색창, 대량 메시지 전송 버튼을 한 줄로 배치 -->\r\n    <div style=\"display: flex; align-items: center; gap: 10px; margin-bottom: 20px;\">\r\n      <label for=\"days\">조회할 일수: </label>\r\n      <input type=\"number\" id=\"days\" v-model=\"day\" min=\"1\" placeholder=\"일수를 입력하세요\" />\r\n      <button @click=\"fetchSmsHistories\">조회</button>\r\n\r\n      <label for=\"msgSearch\">MSG 내용 검색: </label>\r\n      <input type=\"text\" id=\"msgSearch\" v-model=\"msgSearch\" placeholder=\"MSG 내용을 입력하세요\" @input=\"filterSmsHistories\" />\r\n\r\n      <button @click=\"updateAllSmsHistories\">대량 메시지 전송 처리</button>\r\n    </div>\r\n\r\n    <!-- 1분마다 자동 조회 버튼 -->\r\n    <div style=\"margin-bottom: 20px;\">\r\n      <button\r\n        :style=\"buttonStyle\"\r\n        :disabled=\"isAutoFetchActive\"\r\n        @click=\"toggleAutoFetch\"\r\n      >\r\n        {{ isAutoFetchActive ? '자동 조회 중' : '자동 조회 시작' }}\r\n      </button>\r\n    </div>\r\n\r\n    <!-- 히스토리 테이블 -->\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>SEQNO</th>\r\n          <th>INDATE</th>\r\n          <th>INTIME</th>\r\n          <th>SENDNAME</th>\r\n          <th>RECVNAME</th>\r\n          <th>MSG</th>\r\n          <th>RESULT</th>\r\n          <th>KIND</th>\r\n          <th>ERRCODE</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"history in filteredSmsHistories\" :key=\"history.SEQNO\">\r\n          <td>{{ history.SEQNO }}</td>\r\n          <td>{{ history.loc }}</td>\r\n          <td>{{ history.assets }}</td>\r\n          <td>{{ history.dbDescript }}</td>\r\n          <td>{{ history.recName }}</td>\r\n          <td>{{ history.msg }}</td>\r\n          <td>{{ history.result }}</td>\r\n          <td>{{ history.kind }}</td>\r\n          <td>{{ history.errCode }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      smsHistories: [],  // 전체 데이터\r\n      filteredSmsHistories: [],  // 필터링된 데이터\r\n      day: 30,  // 기본 30일 기준\r\n      msgSearch: '',  // MSG 내용 검색 필드\r\n      isAutoFetchActive: false,  // 자동 조회 활성화 상태\r\n      autoFetchInterval: null,  // 자동 조회 간격\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchSmsHistories();  // 기본적으로 30일 기준으로 데이터 조회\r\n  },\r\n  methods: {\r\n    fetchSmsHistories() {\r\n      axios.get(`/api/sms/all?day=${this.day}`)\r\n        .then(response => {\r\n          this.smsHistories = response.data;\r\n          this.smsHistories.sort((a, b) => {\r\n            const dateA = a.loc + a.assets;  // INDATE + INTIME\r\n            const dateB = b.loc + b.assets;  // INDATE + INTIME\r\n            if (dateA < dateB) {\r\n              return 1;  // 역순\r\n            } else if (dateA > dateB) {\r\n              return -1;\r\n            }\r\n            return 0;\r\n          });\r\n          this.filteredSmsHistories = this.smsHistories;\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching SMS histories:', error);\r\n        });\r\n    },\r\n    filterSmsHistories() {\r\n      if (this.msgSearch) {\r\n        this.filteredSmsHistories = this.smsHistories.filter(history =>\r\n          history.msg && history.msg.includes(this.msgSearch)\r\n        );\r\n      } else {\r\n        this.filteredSmsHistories = this.smsHistories;\r\n      }\r\n    },\r\n    updateAllSmsHistories() {\r\n      axios.put('/api/sms/updateall')\r\n        .then(() => {\r\n          alert('전체 메시지 전송 처리가 완료되었습니다.');\r\n          this.fetchSmsHistories();  // 업데이트 후 리스트 다시 가져오기\r\n        })\r\n        .catch(error => {\r\n          console.error('Error updating SMS histories:', error);\r\n        });\r\n    },\r\n    toggleAutoFetch() {\r\n      if (this.isAutoFetchActive) {\r\n        // 자동 조회 비활성화\r\n        clearInterval(this.autoFetchInterval);\r\n        this.autoFetchInterval = null;\r\n      } else {\r\n        // 자동 조회 활성화\r\n        this.autoFetchInterval = setInterval(() => {\r\n          this.fetchSmsHistories();\r\n        }, 60000);  // 1분마다 조회\r\n      }\r\n\r\n      this.isAutoFetchActive = !this.isAutoFetchActive;\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    // 컴포넌트가 언마운트되기 전에 setInterval을 정리합니다.\r\n    if (this.autoFetchInterval) {\r\n      clearInterval(this.autoFetchInterval);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n/* 스타일은 자유롭게 설정 */\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-top: 20px; /* 테이블과 버튼 간의 여백 추가 */\r\n}\r\nth, td {\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  text-align: center;\r\n}\r\nbutton {\r\n  padding: 10px;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\ninput[type=\"number\"],\r\ninput[type=\"text\"] {\r\n  padding: 5px;\r\n  margin-right: 10px;\r\n  width: 150px; /* 적당한 너비로 설정 */\r\n}\r\n\r\n/* 동그란 버튼 스타일 */\r\nbutton {\r\n  border-radius: 50%;\r\n  width: 150px;\r\n  height: 150px;\r\n  font-size: 14px;\r\n}\r\n\r\nbutton:disabled {\r\n  background-color: #ddd;\r\n  cursor: not-allowed;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}