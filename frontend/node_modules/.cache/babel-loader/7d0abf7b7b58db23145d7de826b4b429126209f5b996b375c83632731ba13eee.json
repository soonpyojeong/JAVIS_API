{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, nextTick, onMounted } from 'vue';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nexport default {\n  setup() {\n    const expandedDBType = ref({\n      oracle: false,\n      tibero: false\n    });\n    const selectedDB = ref(null);\n    const selectedDBType = ref(\"\"); // 추가: DB 종류를 추적하기 위한 변수\n\n    const oracleDBList = ref([]); // ORACLE DB 리스트\n    const tiberoDBList = ref([]); // TIBERO DB 리스트\n\n    const metrics = ref([\n    // 사용할 지표 목록 (ORACLE용)\n    {\n      key: 'transaTions',\n      label: 'Transactions'\n    }, {\n      key: 'totalSess',\n      label: 'Total Sessions'\n    }, {\n      key: 'activeSess',\n      label: 'Active Sessions'\n    }, {\n      key: 'bufferpct',\n      label: 'Buffer Nowait Pct'\n    }, {\n      key: 'reDoPct',\n      label: 'Redo Nowait Pct'\n    }, {\n      key: 'buffHit',\n      label: 'Buffer Hit Pct'\n    }, {\n      key: 'latchHitPct',\n      label: 'Latch Hit Pct'\n    }, {\n      key: 'libHitPct',\n      label: 'Library Hit Pct'\n    }, {\n      key: 'softPct',\n      label: 'Soft Parse Pct'\n    }, {\n      key: 'executTopct',\n      label: 'Execute to Parse Pct'\n    }, {\n      key: 'parseCpuElapsd',\n      label: 'Parse CPU to Elapsed'\n    }, {\n      key: 'nonParseCpu',\n      label: 'Non Parse CPU'\n    }, {\n      key: 'inMemorySort',\n      label: 'In Memory Sort'\n    }, {\n      key: 'dailyArchCht',\n      label: 'Daily Archive Count'\n    }]);\n    const tbmetrics = ref([\n    // 사용할 지표 목록 (TIBERO용)\n    {\n      key: 'maxlSess',\n      label: 'Max Sessions'\n    }, {\n      key: 'totalSess',\n      label: 'Total Sessions'\n    }, {\n      key: 'runSess',\n      label: 'Active Sessions'\n    }, {\n      key: 'recSess',\n      label: 'Recover Session'\n    }, {\n      key: 'tsm',\n      label: 'TSM'\n    }, {\n      key: 'wpm',\n      label: 'WPM'\n    }, {\n      key: 'pgaSize',\n      label: 'PGA Size'\n    }, {\n      key: 'wpmPgadiff',\n      label: 'WPM PGA DIFF'\n    }, {\n      key: 'shardMem',\n      label: 'SHARED POOL MEMORY'\n    }, {\n      key: 'phyRead',\n      label: 'PHYSICAL READ'\n    }, {\n      key: 'logicRead',\n      label: 'LOGICAL READ'\n    }, {\n      key: 'buffHit',\n      label: 'BUFFER CACHE HIT'\n    }, {\n      key: 'libHit',\n      label: 'LIBRARY CACHE HIT'\n    }, {\n      key: 'dictHit',\n      label: 'DICTIONARY CACHE HIT'\n    }]);\n    const oracleFixedMetrics = ref([\n    // 고정된 ORACLE 지표들\n    {\n      key: 'totalSess',\n      label: 'Total Sessions'\n    }, {\n      key: 'activeSess',\n      label: 'Active Sessions'\n    }]);\n    const oracleMetrics = ref([\n    // 나머지 ORACLE 지표들\n    {\n      key: 'transaTions',\n      label: 'Transactions'\n    }, {\n      key: 'bufferpct',\n      label: 'Buffer Nowait Pct'\n    }, {\n      key: 'reDoPct',\n      label: 'Redo Nowait Pct'\n    }, {\n      key: 'buffHit',\n      label: 'Buffer Hit Pct'\n    }, {\n      key: 'latchHitPct',\n      label: 'Latch Hit Pct'\n    }, {\n      key: 'libHitPct',\n      label: 'Library Hit Pct'\n    }, {\n      key: 'softPct',\n      label: 'Soft Parse Pct'\n    }, {\n      key: 'executTopct',\n      label: 'Execute to Parse Pct'\n    }, {\n      key: 'parseCpuElapsd',\n      label: 'Parse CPU to Elapsed'\n    }, {\n      key: 'nonParseCpu',\n      label: 'Non Parse CPU'\n    }, {\n      key: 'inMemorySort',\n      label: 'In Memory Sort'\n    }, {\n      key: 'dailyArchCht',\n      label: 'Daily Archive Count'\n    }]);\n    const tbdbData = ref([]); // TIBERO DB 데이터\n    const dbData = ref([]); // ORACLE DB 데이터\n\n    const fetchDbList = async () => {\n      try {\n        const response = await axios.get('/api/dailychk/db-list');\n        const dbList = response.data;\n        oracleDBList.value = dbList.ORACLE || [];\n        tiberoDBList.value = dbList.TIBERO || [];\n      } catch (error) {\n        console.error(\"DB 목록을 불러오는 데 실패했습니다.\", error);\n      }\n    };\n    const selectDB = async (instanceName, dbType) => {\n      selectedDB.value = instanceName;\n      selectedDBType.value = dbType;\n      if (dbType === 'oracle') {\n        await fetchDbData(instanceName); // ORACLE 데이터 가져오기\n      } else if (dbType === 'tibero') {\n        await fetchTbDbData(instanceName); // TIBERO 데이터 가져오기\n      }\n      nextTick(() => {\n        renderCharts(); // 차트 렌더링\n      });\n    };\n    const fetchDbData = async instanceName => {\n      try {\n        const response = await axios.get(`/api/dailychk/${instanceName}/oradata`);\n        dbData.value = response.data;\n      } catch (error) {\n        console.error(\"ORACLE DB 데이터를 불러오는 데 실패했습니다.\", error);\n      }\n    };\n    const fetchTbDbData = async instanceName => {\n      try {\n        const response = await axios.get(`/api/dailychk/${instanceName}/tbdata`);\n        tbdbData.value = response.data;\n      } catch (error) {\n        console.error(\"TIBERO DB 데이터를 불러오는 데 실패했습니다.\", error);\n      }\n    };\n    const renderOracleCharts = () => {\n      // 고정 지표 차트 먼저 렌더링\n      renderFixedCharts(oracleFixedMetrics.value, dbData.value, 'oracleFixedChart');\n\n      // 나머지 ORACLE 지표 차트 렌더링\n      renderMetricsCharts(oracleMetrics.value, dbData.value, 'oracleChart');\n    };\n    const renderFixedCharts = (metricsList, dbData, prefix) => {\n      metricsList.forEach((metric, index) => {\n        const data = dbData.map(item => item[metric.key] !== undefined ? item[metric.key] : 0);\n        const canvas = document.getElementById(`${prefix}_${index}`);\n        if (canvas) {\n          if (canvas.chart) {\n            canvas.chart.destroy();\n          }\n          const chart = new Chart(canvas, {\n            type: 'line',\n            data: {\n              labels: dbData.map(item => item.id.chkDate),\n              datasets: [{\n                label: metric.label,\n                data,\n                borderColor: getRandomPastelColor(),\n                backgroundColor: getRandomPastelColor() + '50',\n                fill: false,\n                tension: 0.3\n              }]\n            },\n            options: {\n              responsive: true,\n              maintainAspectRatio: false,\n              scales: {\n                x: {\n                  title: {\n                    display: true,\n                    text: 'Date'\n                  }\n                },\n                y: {\n                  title: {\n                    display: true,\n                    text: 'Value'\n                  }\n                }\n              }\n            }\n          });\n          canvas.chart = chart;\n        }\n      });\n    };\n    const renderMetricsCharts = (metricsList, dbData, prefix) => {\n      metricsList.forEach((metric, index) => {\n        const data = dbData.map(item => item[metric.key] !== undefined ? item[metric.key] : 0);\n        const canvas = document.getElementById(`${prefix}_${index}`);\n        if (canvas) {\n          if (canvas.chart) {\n            canvas.chart.destroy();\n          }\n          const chart = new Chart(canvas, {\n            type: 'line',\n            data: {\n              labels: dbData.map(item => item.id.chkDate),\n              datasets: [{\n                label: metric.label,\n                data,\n                borderColor: getRandomPastelColor(),\n                backgroundColor: getRandomPastelColor() + '50',\n                fill: false,\n                tension: 0.3\n              }]\n            },\n            options: {\n              responsive: true,\n              maintainAspectRatio: false,\n              scales: {\n                x: {\n                  title: {\n                    display: true,\n                    text: 'Date'\n                  }\n                },\n                y: {\n                  title: {\n                    display: true,\n                    text: 'Value'\n                  }\n                }\n              }\n            }\n          });\n          canvas.chart = chart;\n        }\n      });\n    };\n    const getRandomPastelColor = () => {\n      const letters = '0123456789ABCDEF';\n      let color = '#';\n      for (let i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n      }\n      return color;\n    };\n    onMounted(() => {\n      fetchDbList(); // DB 목록을 가져오기\n    });\n    return {\n      oracleDBList,\n      tiberoDBList,\n      selectDB,\n      selectedDB,\n      selectedDBType,\n      oracleMetrics,\n      tbmetrics,\n      oracleFixedMetrics,\n      metrics,\n      expandedDBType,\n      renderCharts\n    };\n  }\n};","map":{"version":3,"names":["ref","nextTick","onMounted","axios","Chart","setup","expandedDBType","oracle","tibero","selectedDB","selectedDBType","oracleDBList","tiberoDBList","metrics","key","label","tbmetrics","oracleFixedMetrics","oracleMetrics","tbdbData","dbData","fetchDbList","response","get","dbList","data","value","ORACLE","TIBERO","error","console","selectDB","instanceName","dbType","fetchDbData","fetchTbDbData","renderCharts","renderOracleCharts","renderFixedCharts","renderMetricsCharts","metricsList","prefix","forEach","metric","index","map","item","undefined","canvas","document","getElementById","chart","destroy","type","labels","id","chkDate","datasets","borderColor","getRandomPastelColor","backgroundColor","fill","tension","options","responsive","maintainAspectRatio","scales","x","title","display","text","y","letters","color","i","Math","floor","random"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DailyChk.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 왼쪽 DB 트리 구조 -->\r\n    <div class=\"db-tree\">\r\n      <ul>\r\n        <li>\r\n          <span @click=\"toggleDBType('oracle')\" class=\"tree-node oracle\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.oracle ? '-' : '+' }}</span> ORACLE\r\n          </span>\r\n          <ul v-if=\"expandedDBType.oracle\" class=\"sub-tree\">\r\n            <li v-for=\"instance in oracleDBList\" :key=\"instance\" class=\"db-item\" :class=\"{ selected: selectedDB === instance }\">\r\n              <span @click=\"selectDB(instance, 'oracle')\">\r\n                <span class=\"leaf-icon\"></span> {{ instance }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n        <li>\r\n          <span @click=\"toggleDBType('tibero')\" class=\"tree-node tibero\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.tibero ? '-' : '+' }}</span> TIBERO\r\n          </span>\r\n          <ul v-if=\"expandedDBType.tibero\" class=\"sub-tree\">\r\n            <li v-for=\"instance in tiberoDBList\" :key=\"instance\" class=\"db-item\" :class=\"{ selected: selectedDB === instance }\">\r\n              <span @click=\"selectDB(instance, 'tibero')\">\r\n                <span class=\"leaf-icon\"></span> {{ instance }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <!-- 차트 영역 -->\r\n    <div class=\"chart-container\">\r\n      <div class=\"charts-wrapper\">\r\n        <template v-if=\"selectedDB && selectedDBType === 'tibero'\">\r\n          <!-- TIBERO 고정 지표 차트 -->\r\n          <div class=\"metric-chart\">\r\n            <canvas id=\"tiberoFixedChart\"></canvas>\r\n          </div>\r\n          <!-- 나머지 랜덤 차트들 -->\r\n          <div v-for=\"(metric, index) in randomMetrics\" :key=\"index\" class=\"metric-chart\">\r\n            <canvas :id=\"'chartRef_' + index\"></canvas>\r\n          </div>\r\n        </template>\r\n\r\n        <template v-if=\"selectedDB && selectedDBType === 'oracle'\">\r\n          <!-- ORACLE 고정 지표 차트 (Total Sessions, Active Sessions) -->\r\n          <div v-for=\"(metric, index) in oracleFixedMetrics\" :key=\"'oracleFixed_' + index\" class=\"metric-chart\">\r\n            <canvas :id=\"'oracleFixedChart_' + index\"></canvas>\r\n          </div>\r\n\r\n          <!-- ORACLE 나머지 지표 차트 -->\r\n          <div v-for=\"(metric, index) in oracleMetrics\" :key=\"'oracle_' + index\" class=\"metric-chart\">\r\n            <canvas :id=\"'oracleChart_' + index\"></canvas>\r\n          </div>\r\n        </template>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, nextTick, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  setup() {\r\n    const expandedDBType = ref({ oracle: false, tibero: false });\r\n    const selectedDB = ref(null);\r\n    const selectedDBType = ref(\"\"); // 추가: DB 종류를 추적하기 위한 변수\r\n\r\n    const oracleDBList = ref([]);  // ORACLE DB 리스트\r\n    const tiberoDBList = ref([]);  // TIBERO DB 리스트\r\n\r\n    const metrics = ref([  // 사용할 지표 목록 (ORACLE용)\r\n      { key: 'transaTions', label: 'Transactions' },\r\n      { key: 'totalSess', label: 'Total Sessions' },\r\n      { key: 'activeSess', label: 'Active Sessions' },\r\n      { key: 'bufferpct', label: 'Buffer Nowait Pct' },\r\n      { key: 'reDoPct', label: 'Redo Nowait Pct' },\r\n      { key: 'buffHit', label: 'Buffer Hit Pct' },\r\n      { key: 'latchHitPct', label: 'Latch Hit Pct' },\r\n      { key: 'libHitPct', label: 'Library Hit Pct' },\r\n      { key: 'softPct', label: 'Soft Parse Pct' },\r\n      { key: 'executTopct', label: 'Execute to Parse Pct' },\r\n      { key: 'parseCpuElapsd', label: 'Parse CPU to Elapsed' },\r\n      { key: 'nonParseCpu', label: 'Non Parse CPU' },\r\n      { key: 'inMemorySort', label: 'In Memory Sort' },\r\n      { key: 'dailyArchCht', label: 'Daily Archive Count' }\r\n    ]);\r\n\r\n    const tbmetrics = ref([  // 사용할 지표 목록 (TIBERO용)\r\n      { key: 'maxlSess', label: 'Max Sessions' },\r\n      { key: 'totalSess', label: 'Total Sessions' },\r\n      { key: 'runSess', label: 'Active Sessions' },\r\n      { key: 'recSess', label: 'Recover Session' },\r\n      { key: 'tsm', label: 'TSM' },\r\n      { key: 'wpm', label: 'WPM' },\r\n      { key: 'pgaSize', label: 'PGA Size' },\r\n      { key: 'wpmPgadiff', label: 'WPM PGA DIFF' },\r\n      { key: 'shardMem', label: 'SHARED POOL MEMORY' },\r\n      { key: 'phyRead', label: 'PHYSICAL READ' },\r\n      { key: 'logicRead', label: 'LOGICAL READ' },\r\n      { key: 'buffHit', label: 'BUFFER CACHE HIT' },\r\n      { key: 'libHit', label: 'LIBRARY CACHE HIT' },\r\n      { key: 'dictHit', label: 'DICTIONARY CACHE HIT' }\r\n    ]);\r\n\r\n    const oracleFixedMetrics = ref([  // 고정된 ORACLE 지표들\r\n      { key: 'totalSess', label: 'Total Sessions' },\r\n      { key: 'activeSess', label: 'Active Sessions' }\r\n    ]);\r\n\r\n    const oracleMetrics = ref([  // 나머지 ORACLE 지표들\r\n      { key: 'transaTions', label: 'Transactions' },\r\n      { key: 'bufferpct', label: 'Buffer Nowait Pct' },\r\n      { key: 'reDoPct', label: 'Redo Nowait Pct' },\r\n      { key: 'buffHit', label: 'Buffer Hit Pct' },\r\n      { key: 'latchHitPct', label: 'Latch Hit Pct' },\r\n      { key: 'libHitPct', label: 'Library Hit Pct' },\r\n      { key: 'softPct', label: 'Soft Parse Pct' },\r\n      { key: 'executTopct', label: 'Execute to Parse Pct' },\r\n      { key: 'parseCpuElapsd', label: 'Parse CPU to Elapsed' },\r\n      { key: 'nonParseCpu', label: 'Non Parse CPU' },\r\n      { key: 'inMemorySort', label: 'In Memory Sort' },\r\n      { key: 'dailyArchCht', label: 'Daily Archive Count' }\r\n    ]);\r\n\r\n    const tbdbData = ref([]);  // TIBERO DB 데이터\r\n    const dbData = ref([]);  // ORACLE DB 데이터\r\n\r\n    const fetchDbList = async () => {\r\n      try {\r\n        const response = await axios.get('/api/dailychk/db-list');\r\n        const dbList = response.data;\r\n        oracleDBList.value = dbList.ORACLE || [];\r\n        tiberoDBList.value = dbList.TIBERO || [];\r\n      } catch (error) {\r\n        console.error(\"DB 목록을 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    const selectDB = async (instanceName, dbType) => {\r\n      selectedDB.value = instanceName;\r\n      selectedDBType.value = dbType;\r\n\r\n      if (dbType === 'oracle') {\r\n        await fetchDbData(instanceName); // ORACLE 데이터 가져오기\r\n      } else if (dbType === 'tibero') {\r\n        await fetchTbDbData(instanceName); // TIBERO 데이터 가져오기\r\n      }\r\n\r\n      nextTick(() => {\r\n        renderCharts(); // 차트 렌더링\r\n      });\r\n    };\r\n\r\n    const fetchDbData = async (instanceName) => {\r\n      try {\r\n        const response = await axios.get(`/api/dailychk/${instanceName}/oradata`);\r\n        dbData.value = response.data;\r\n      } catch (error) {\r\n        console.error(\"ORACLE DB 데이터를 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    const fetchTbDbData = async (instanceName) => {\r\n      try {\r\n        const response = await axios.get(`/api/dailychk/${instanceName}/tbdata`);\r\n        tbdbData.value = response.data;\r\n      } catch (error) {\r\n        console.error(\"TIBERO DB 데이터를 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    const renderOracleCharts = () => {\r\n      // 고정 지표 차트 먼저 렌더링\r\n      renderFixedCharts(oracleFixedMetrics.value, dbData.value, 'oracleFixedChart');\r\n\r\n      // 나머지 ORACLE 지표 차트 렌더링\r\n      renderMetricsCharts(oracleMetrics.value, dbData.value, 'oracleChart');\r\n    };\r\n\r\n    const renderFixedCharts = (metricsList, dbData, prefix) => {\r\n      metricsList.forEach((metric, index) => {\r\n        const data = dbData.map(item => item[metric.key] !== undefined ? item[metric.key] : 0);\r\n        const canvas = document.getElementById(`${prefix}_${index}`);\r\n        if (canvas) {\r\n          if (canvas.chart) {\r\n            canvas.chart.destroy();\r\n          }\r\n          const chart = new Chart(canvas, {\r\n            type: 'line',\r\n            data: {\r\n              labels: dbData.map(item => item.id.chkDate),\r\n              datasets: [{\r\n                label: metric.label,\r\n                data,\r\n                borderColor: getRandomPastelColor(),\r\n                backgroundColor: getRandomPastelColor() + '50',\r\n                fill: false,\r\n                tension: 0.3,\r\n              }]\r\n            },\r\n            options: {\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              scales: {\r\n                x: { title: { display: true, text: 'Date' } },\r\n                y: { title: { display: true, text: 'Value' } }\r\n              }\r\n            }\r\n          });\r\n          canvas.chart = chart;\r\n        }\r\n      });\r\n    };\r\n\r\n    const renderMetricsCharts = (metricsList, dbData, prefix) => {\r\n      metricsList.forEach((metric, index) => {\r\n        const data = dbData.map(item => item[metric.key] !== undefined ? item[metric.key] : 0);\r\n        const canvas = document.getElementById(`${prefix}_${index}`);\r\n        if (canvas) {\r\n          if (canvas.chart) {\r\n            canvas.chart.destroy();\r\n          }\r\n          const chart = new Chart(canvas, {\r\n            type: 'line',\r\n            data: {\r\n              labels: dbData.map(item => item.id.chkDate),\r\n              datasets: [{\r\n                label: metric.label,\r\n                data,\r\n                borderColor: getRandomPastelColor(),\r\n                backgroundColor: getRandomPastelColor() + '50',\r\n                fill: false,\r\n                tension: 0.3,\r\n              }]\r\n            },\r\n            options: {\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              scales: {\r\n                x: { title: { display: true, text: 'Date' } },\r\n                y: { title: { display: true, text: 'Value' } }\r\n              }\r\n            }\r\n          });\r\n          canvas.chart = chart;\r\n        }\r\n      });\r\n    };\r\n\r\n    const getRandomPastelColor = () => {\r\n      const letters = '0123456789ABCDEF';\r\n      let color = '#';\r\n      for (let i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 16)];\r\n      }\r\n      return color;\r\n    };\r\n\r\n    onMounted(() => {\r\n      fetchDbList();  // DB 목록을 가져오기\r\n    });\r\n\r\n    return {\r\n      oracleDBList,\r\n      tiberoDBList,\r\n      selectDB,\r\n      selectedDB,\r\n      selectedDBType,\r\n      oracleMetrics,\r\n      tbmetrics,\r\n      oracleFixedMetrics,\r\n      metrics,expandedDBType,\r\n      renderCharts,\r\n\r\n\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.container {\r\n  display: flex;\r\n  height: 100vh;\r\n  background-color: #f4f4f4;\r\n}\r\n\r\n.db-tree {\r\n  width: 200px;\r\n  background-color: #fff;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  height: 100vh;\r\n  overflow-y: auto;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.tree-node {\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  padding: 8px;\r\n  background-color: #f0f0f0;\r\n  border-radius: 5px;\r\n  margin: 5px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.tree-node:hover {\r\n  background-color: #e1e1e1;\r\n}\r\n\r\n.toggle-icon {\r\n  margin-right: 10px;\r\n}\r\n\r\n.sub-tree {\r\n  padding-left: 20px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.db-item {\r\n  padding: 5px;\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.db-item:hover {\r\n  background-color: #e9f1f7;\r\n}\r\n\r\n.chart-container {\r\n  flex-grow: 1;\r\n  width: 1000px;\r\n  padding: 20px;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  min-height: 100vh; /* 기존 height: 100vh; 대신 min-height로 변경 */\r\n}\r\n\r\n.charts-wrapper {\r\n  flex-grow: 1; /* 내부 요소가 차지할 공간을 자동으로 확장 */\r\n  overflow-y: auto;\r\n  padding-right: 10px;\r\n}\r\n\r\n.metric-chart {\r\n  width: 100%;\r\n  height: 300px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .container {\r\n    flex-direction: column;\r\n  }\r\n  .db-tree {\r\n    width: 100%;\r\n    height: auto;\r\n  }\r\n  .metric-chart {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n.db-item.selected {\r\n  background-color: #d1e7fd;  /* 선택된 DB에 파란색 배경 */\r\n  color: #1d70b8;  /* 텍스트 색상 강조 */\r\n  font-weight: bold;  /* 텍스트 강조 */\r\n}\r\n\r\n.db-item.selected:hover {\r\n  background-color: #a6c8f7;  /* 호버 시 배경 색상 변경 */\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}