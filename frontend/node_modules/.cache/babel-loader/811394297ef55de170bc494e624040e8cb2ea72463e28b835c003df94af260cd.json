{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      dbList: []\n    };\n  },\n  methods: {\n    updateDbStatus(db, field) {\n      const newStatus = db[field] === 'Y' ? 'N' : 'Y'; // 상태를 반전시킴\n      db[field] = newStatus; // 로컬에서 상태 업데이트\n\n      // 서버로 상태 변경 요청 보내기\n      axios.put(`http://10.90.4.60:8080/api/db-list/update/${db.id}`, {\n        [field]: newStatus\n      }).then(response => {\n        console.log(`${field} 업데이트 성공`);\n      }).catch(error => {\n        console.error(`${field} 업데이트 실패`, error);\n        // 실패 시 상태를 원래 값으로 되돌림\n        db[field] = db[field] === 'Y' ? 'N' : 'Y';\n      });\n    }\n  },\n  mounted() {\n    axios.put(`http://10.90.4.60:8080/api/db-list/update/${db.id}`, {\n      [field]: newStatus\n    }).then(response => {\n      console.log(`${field} 업데이트 성공: `, response.data);\n    }).catch(error => {\n      console.error(`${field} 업데이트 실패`, error);\n      db[field] = db[field] === 'Y' ? 'N' : 'Y';\n    });\n  }\n};","map":{"version":3,"names":["axios","data","dbList","methods","updateDbStatus","db","field","newStatus","put","id","then","response","console","log","catch","error","mounted"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DBList.vue"],"sourcesContent":["<template>\r\n  <div class=\"db-list-container\">\r\n    <h2>DB 리스트</h2>\r\n    <table v-if=\"dbList.length > 0\" class=\"db-table\">\r\n      <thead>\r\n        <tr>\r\n          <th>ID</th>\r\n          <th>자산</th>\r\n          <th>설명</th>\r\n          <th>호스트</th>\r\n          <th>PubIP</th>\r\n          <th>VIP</th>\r\n          <th>DB 타입</th>\r\n          <th>DB 이름</th>\r\n          <th>생사관제</th>\r\n          <th>TBS수집</th>\r\n          <th>Sybase 트랜잭션</th>\r\n          <th>OBJSIZE 수집</th>\r\n          <th>일일 점검</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"db in dbList\" :key=\"db.id\">\r\n          <td>{{ db.id }}</td>\r\n          <td>{{ db.assets }}</td>\r\n          <td>{{ db.dbDescript }}</td>\r\n          <td>{{ db.hostname }}</td>\r\n          <td>{{ db.pubIp }}</td>\r\n          <td>{{ db.vip }}</td>\r\n          <td>{{ db.dbType }}</td>\r\n          <td>{{ db.dbName }}</td>\r\n          <td>\r\n            <button :class=\"db.liveChk === 'Y' ? 'btn-on' : 'btn-off'\" @click=\"updateDbStatus(db, 'liveChk')\">\r\n              {{ db.liveChk === 'Y' ? 'On' : 'Off' }}\r\n            </button>\r\n          </td>\r\n          <td>\r\n            <button :class=\"db.sizeChk === 'Y' ? 'btn-on' : 'btn-off'\" @click=\"updateDbStatus(db, 'sizeChk')\">\r\n              {{ db.sizeChk === 'Y' ? 'On' : 'Off' }}\r\n            </button>\r\n          </td>\r\n          <td>\r\n            <button :class=\"db.trnBakChk === 'Y' ? 'btn-on' : 'btn-off'\" @click=\"updateDbStatus(db, 'trnBakChk')\">\r\n              {{ db.trnBakChk === 'Y' ? 'On' : 'Off' }}\r\n            </button>\r\n          </td>\r\n          <td>\r\n            <button :class=\"db.objSegSizeChk === 'Y' ? 'btn-on' : 'btn-off'\" @click=\"updateDbStatus(db, 'objSegSizeChk')\">\r\n              {{ db.objSegSizeChk === 'Y' ? 'On' : 'Off' }}\r\n            </button>\r\n          </td>\r\n          <td>\r\n            <button :class=\"db.dailyChk === 'Y' ? 'btn-on' : 'btn-off'\" @click=\"updateDbStatus(db, 'dailyChk')\">\r\n              {{ db.dailyChk === 'Y' ? 'On' : 'Off' }}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <p v-else>데이터가 없습니다.</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      dbList: [],\r\n    };\r\n  },\r\n  methods: {\r\n    updateDbStatus(db, field) {\r\n      const newStatus = db[field] === 'Y' ? 'N' : 'Y'; // 상태를 반전시킴\r\n      db[field] = newStatus; // 로컬에서 상태 업데이트\r\n\r\n      // 서버로 상태 변경 요청 보내기\r\n      axios\r\n        .put(`http://10.90.4.60:8080/api/db-list/update/${db.id}`, { [field]: newStatus })\r\n        .then((response) => {\r\n          console.log(`${field} 업데이트 성공`);\r\n        })\r\n        .catch((error) => {\r\n          console.error(`${field} 업데이트 실패`, error);\r\n          // 실패 시 상태를 원래 값으로 되돌림\r\n          db[field] = db[field] === 'Y' ? 'N' : 'Y';\r\n        });\r\n    },\r\n  },\r\n  mounted() {\r\n    axios\r\n      .put(`http://10.90.4.60:8080/api/db-list/update/${db.id}`, { [field]: newStatus })\r\n      .then((response) => {\r\n        console.log(`${field} 업데이트 성공: `, response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(`${field} 업데이트 실패`, error);\r\n        db[field] = db[field] === 'Y' ? 'N' : 'Y';\r\n      });\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.db-list-container {\r\n  font-family: 'Arial', sans-serif;\r\n  padding: 20px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  font-size: 2em;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.db-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin: 20px 0;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.db-table th, .db-table td {\r\n  padding: 12px 15px;\r\n  text-align: center;\r\n  border: 1px solid #ddd;\r\n}\r\n\r\n.db-table th {\r\n  background-color: #f4f4f4;\r\n  font-weight: bold;\r\n}\r\n\r\n.db-table tr:nth-child(even) {\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.db-table tr:hover {\r\n  background-color: #f1f1f1;\r\n}\r\n\r\nbutton {\r\n  padding: 5px 10px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 0.9em;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.btn-on {\r\n  background-color: #4caf50;\r\n  color: white;\r\n}\r\n\r\n.btn-on:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.btn-off {\r\n  background-color: #f44336;\r\n  color: white;\r\n}\r\n\r\n.btn-off:hover {\r\n  background-color: #e53935;\r\n}\r\n\r\np {\r\n  text-align: center;\r\n  font-size: 1.2em;\r\n  color: #555;\r\n}\r\n</style>\r\n"],"mappings":"AAgEA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,cAAcA,CAACC,EAAE,EAAEC,KAAK,EAAE;MACxB,MAAMC,SAAQ,GAAIF,EAAE,CAACC,KAAK,MAAM,GAAE,GAAI,GAAE,GAAI,GAAG,EAAE;MACjDD,EAAE,CAACC,KAAK,IAAIC,SAAS,EAAE;;MAEvB;MACAP,KAAI,CACDQ,GAAG,CAAC,6CAA6CH,EAAE,CAACI,EAAE,EAAE,EAAE;QAAE,CAACH,KAAK,GAAGC;MAAU,CAAC,EAChFG,IAAI,CAAEC,QAAQ,IAAK;QAClBC,OAAO,CAACC,GAAG,CAAC,GAAGP,KAAK,UAAU,CAAC;MACjC,CAAC,EACAQ,KAAK,CAAEC,KAAK,IAAK;QAChBH,OAAO,CAACG,KAAK,CAAC,GAAGT,KAAK,UAAU,EAAES,KAAK,CAAC;QACxC;QACAV,EAAE,CAACC,KAAK,IAAID,EAAE,CAACC,KAAK,MAAM,GAAE,GAAI,GAAE,GAAI,GAAG;MAC3C,CAAC,CAAC;IACN;EACF,CAAC;EACDU,OAAOA,CAAA,EAAG;IACRhB,KAAI,CACDQ,GAAG,CAAC,6CAA6CH,EAAE,CAACI,EAAE,EAAE,EAAE;MAAE,CAACH,KAAK,GAAGC;IAAU,CAAC,EAChFG,IAAI,CAAEC,QAAQ,IAAK;MAClBC,OAAO,CAACC,GAAG,CAAC,GAAGP,KAAK,YAAY,EAAEK,QAAQ,CAACV,IAAI,CAAC;IAClD,CAAC,EACAa,KAAK,CAAEC,KAAK,IAAK;MAChBH,OAAO,CAACG,KAAK,CAAC,GAAGT,KAAK,UAAU,EAAES,KAAK,CAAC;MACxCV,EAAE,CAACC,KAAK,IAAID,EAAE,CAACC,KAAK,MAAM,GAAE,GAAI,GAAE,GAAI,GAAG;IAC3C,CAAC,CAAC;EACN;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}