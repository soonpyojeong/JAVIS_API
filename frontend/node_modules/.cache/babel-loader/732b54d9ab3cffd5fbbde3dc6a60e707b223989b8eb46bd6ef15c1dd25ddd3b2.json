{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"db-tree\"\n};\nconst _hoisted_3 = {\n  class: \"toggle-icon\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"sub-tree\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  class: \"toggle-icon\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"sub-tree\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  class: \"chart-container\"\n};\nconst _hoisted_10 = {\n  class: \"charts-wrapper\"\n};\nconst _hoisted_11 = [\"id\"];\nconst _hoisted_12 = [\"id\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 왼쪽 DB 트리 구조 \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"ul\", null, [_createElementVNode(\"li\", null, [_createElementVNode(\"span\", {\n    onClick: _cache[0] || (_cache[0] = $event => $setup.toggleDBType('oracle')),\n    class: \"tree-node oracle\"\n  }, [_createElementVNode(\"span\", _hoisted_3, _toDisplayString($setup.expandedDBType.oracle ? '-' : '+'), 1 /* TEXT */), _cache[2] || (_cache[2] = _createTextVNode(\" ORACLE \"))]), $setup.expandedDBType.oracle ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.oracleDBList, instance => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: instance,\n      class: _normalizeClass([\"db-item\", {\n        selected: $setup.selectedDB === instance\n      }])\n    }, [_createElementVNode(\"span\", {\n      onClick: $event => $setup.selectDB(instance, 'oracle')\n    }, [_cache[3] || (_cache[3] = _createElementVNode(\"span\", {\n      class: \"leaf-icon\"\n    }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(instance), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_5)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"li\", null, [_createElementVNode(\"span\", {\n    onClick: _cache[1] || (_cache[1] = $event => $setup.toggleDBType('tibero')),\n    class: \"tree-node tibero\"\n  }, [_createElementVNode(\"span\", _hoisted_6, _toDisplayString($setup.expandedDBType.tibero ? '-' : '+'), 1 /* TEXT */), _cache[4] || (_cache[4] = _createTextVNode(\" TIBERO \"))]), $setup.expandedDBType.tibero ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.tiberoDBList, instance => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: instance,\n      class: _normalizeClass([\"db-item\", {\n        selected: $setup.selectedDB === instance\n      }])\n    }, [_createElementVNode(\"span\", {\n      onClick: $event => $setup.selectDB(instance, 'tibero')\n    }, [_cache[5] || (_cache[5] = _createElementVNode(\"span\", {\n      class: \"leaf-icon\"\n    }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(instance), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_8)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)])])]), _createCommentVNode(\" 차트 영역 \"), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"div\", _hoisted_10, [$setup.selectedDB && $setup.selectedDBType === 'tibero' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 0\n  }, [_createCommentVNode(\" TIBERO 고정 지표 차트 \"), _cache[6] || (_cache[6] = _createElementVNode(\"div\", {\n    class: \"metric-chart\"\n  }, [_createElementVNode(\"canvas\", {\n    id: \"tiberoFixedChart\"\n  })], -1 /* HOISTED */)), _createCommentVNode(\" TIBERO 랜덤 지표 차트 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.randomMetrics, (metric, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"metric-chart\"\n    }, [_createElementVNode(\"canvas\", {\n      id: 'chartRef_' + index\n    }, null, 8 /* PROPS */, _hoisted_11)]);\n  }), 128 /* KEYED_FRAGMENT */))], 64 /* STABLE_FRAGMENT */)) : _createCommentVNode(\"v-if\", true), $setup.selectedDB && $setup.selectedDBType === 'oracle' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" ORACLE 고정 지표 차트 \"), _cache[7] || (_cache[7] = _createElementVNode(\"div\", {\n    class: \"metric-chart\"\n  }, [_createElementVNode(\"canvas\", {\n    id: \"oracleFixedChart\"\n  })], -1 /* HOISTED */)), _createCommentVNode(\" ORACLE 개별 지표 차트 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.oracleMetrics, (metric, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: 'oracle_' + index,\n      class: \"metric-chart\"\n    }, [_createElementVNode(\"canvas\", {\n      id: 'oracleChart_' + index\n    }, null, 8 /* PROPS */, _hoisted_12)]);\n  }), 128 /* KEYED_FRAGMENT */))], 64 /* STABLE_FRAGMENT */)) : _createCommentVNode(\"v-if\", true)])])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","onClick","_cache","$event","$setup","toggleDBType","_hoisted_3","_toDisplayString","expandedDBType","oracle","_createTextVNode","_hoisted_4","_Fragment","_renderList","oracleDBList","instance","_normalizeClass","selected","selectedDB","selectDB","_hoisted_5","_hoisted_6","tibero","_hoisted_7","tiberoDBList","_hoisted_8","_hoisted_9","_hoisted_10","selectedDBType","id","randomMetrics","metric","index","_hoisted_11","oracleMetrics","_hoisted_12"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DailyChk.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 왼쪽 DB 트리 구조 -->\r\n    <div class=\"db-tree\">\r\n      <ul>\r\n        <li>\r\n          <span @click=\"toggleDBType('oracle')\" class=\"tree-node oracle\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.oracle ? '-' : '+' }}</span> ORACLE\r\n          </span>\r\n          <ul v-if=\"expandedDBType.oracle\" class=\"sub-tree\">\r\n            <li\r\n              v-for=\"instance in oracleDBList\"\r\n              :key=\"instance\"\r\n              class=\"db-item\"\r\n              :class=\"{ selected: selectedDB === instance }\"\r\n            >\r\n              <span @click=\"selectDB(instance, 'oracle')\">\r\n                <span class=\"leaf-icon\"></span> {{ instance }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n        <li>\r\n          <span @click=\"toggleDBType('tibero')\" class=\"tree-node tibero\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.tibero ? '-' : '+' }}</span> TIBERO\r\n          </span>\r\n          <ul v-if=\"expandedDBType.tibero\" class=\"sub-tree\">\r\n            <li\r\n              v-for=\"instance in tiberoDBList\"\r\n              :key=\"instance\"\r\n              class=\"db-item\"\r\n              :class=\"{ selected: selectedDB === instance }\"\r\n            >\r\n              <span @click=\"selectDB(instance, 'tibero')\">\r\n                <span class=\"leaf-icon\"></span> {{ instance }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <!-- 차트 영역 -->\r\n    <div class=\"chart-container\">\r\n      <div class=\"charts-wrapper\">\r\n        <template v-if=\"selectedDB && selectedDBType === 'tibero'\">\r\n          <!-- TIBERO 고정 지표 차트 -->\r\n          <div class=\"metric-chart\">\r\n            <canvas id=\"tiberoFixedChart\"></canvas>\r\n          </div>\r\n          <!-- TIBERO 랜덤 지표 차트 -->\r\n          <div\r\n            v-for=\"(metric, index) in randomMetrics\"\r\n            :key=\"index\"\r\n            class=\"metric-chart\"\r\n          >\r\n            <canvas :id=\"'chartRef_' + index\"></canvas>\r\n          </div>\r\n        </template>\r\n\r\n        <template v-if=\"selectedDB && selectedDBType === 'oracle'\">\r\n          <!-- ORACLE 고정 지표 차트 -->\r\n          <div class=\"metric-chart\">\r\n            <canvas id=\"oracleFixedChart\"></canvas>\r\n          </div>\r\n          <!-- ORACLE 개별 지표 차트 -->\r\n          <div\r\n            v-for=\"(metric, index) in oracleMetrics\"\r\n            :key=\"'oracle_' + index\"\r\n            class=\"metric-chart\"\r\n          >\r\n            <canvas :id=\"'oracleChart_' + index\"></canvas>\r\n          </div>\r\n        </template>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport { ref, nextTick, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  setup() {\r\n    const expandedDBType = ref({ oracle: false, tibero: false });\r\n    const selectedDB = ref(null);\r\n    const selectedDBType = ref(null);\r\n\r\n    const oracleDBList = ref([]);\r\n    const tiberoDBList = ref([]);\r\n\r\n    const metrics = ref([\r\n      { key: 'transaTions', label: 'Transactions' },\r\n      { key: 'totalSess', label: 'Total Sessions' },\r\n      { key: 'activeSess', label: 'Active Sessions' },\r\n      { key: 'bufferpct', label: 'Buffer Nowait Pct' },\r\n      { key: 'reDoPct', label: 'Redo Nowait Pct' },\r\n      { key: 'buffHit', label: 'Buffer Hit Pct' },\r\n      { key: 'latchHitPct', label: 'Latch Hit Pct' },\r\n      { key: 'libHitPct', label: 'Library Hit Pct' },\r\n      { key: 'softPct', label: 'Soft Parse Pct' },\r\n      { key: 'executTopct', label: 'Execute to Parse Pct' },\r\n      { key: 'parseCpuElapsd', label: 'Parse CPU to Elapsed' },\r\n      { key: 'nonParseCpu', label: 'Non Parse CPU' },\r\n      { key: 'inMemorySort', label: 'In Memory Sort' },\r\n      { key: 'dailyArchCht', label: 'Daily Archive Count' }\r\n    ]);\r\n\r\n    const tbmetrics = ref([\r\n      { key: 'maxlSess', label: 'Max Sessions' },\r\n      { key: 'totalSess', label: 'Total Sessions' },\r\n      { key: 'runSess', label: 'Active Sessions' },\r\n      { key: 'recSess', label: 'Recover Session' },\r\n      { key: 'tsm', label: 'TSM' },\r\n      { key: 'wpm', label: 'WPM' },\r\n      { key: 'pgaSize', label: 'PGA Size' },\r\n      { key: 'wpmPgadiff', label: 'WPM PGA DIFF' },\r\n      { key: 'shardMem', label: 'SHARED POOL MEMORY' },\r\n      { key: 'phyRead', label: 'PHYSICAL READ' },\r\n      { key: 'logicRead', label: 'LOGICAL READ' },\r\n      { key: 'buffHit', label: 'BUFFER CACHE HIT' },\r\n      { key: 'libHit', label: 'LIBRARY CACHE HIT' },\r\n      { key: 'dictHit', label: 'DICTIONARY CACHE HIT' }\r\n    ]);\r\n\r\n    const dbData = ref([]);\r\n    const tbdbData = ref([]);\r\n    const metricsToUse = ref(metrics.value);\r\n\r\n    const fixedMetrics = ['maxlSess', 'totalSess', 'runSess'];\r\n    const orafixedMetrics = ['totalSess', 'activeSess', 'transaTions'];\r\n\r\n    const randomMetrics = ref([]);\r\n    const oracleMetrics = ref([]);\r\n\r\n    const fetchDbList = async () => {\r\n      try {\r\n        const response = await axios.get('/api/dailychk/db-list');\r\n        const dbList = response.data;\r\n        oracleDBList.value = dbList.ORACLE || [];\r\n        tiberoDBList.value = dbList.TIBERO || [];\r\n      } catch (error) {\r\n        console.error(\"DB 목록을 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    const toggleDBType = (type) => {\r\n      expandedDBType.value[type] = !expandedDBType.value[type];\r\n    };\r\n\r\n    const selectDB = async (instanceName, dbType) => {\r\n      selectedDB.value = instanceName;\r\n      selectedDBType.value = dbType;\r\n\r\n      if (dbType === 'oracle') {\r\n        await fetchDbData(instanceName);\r\n        metricsToUse.value = metrics.value;\r\n        oracleMetrics.value = metrics.value;\r\n        randomMetrics.value = [];\r\n      } else if (dbType === 'tibero') {\r\n        await fetchTbDbData(instanceName);\r\n        metricsToUse.value = tbmetrics.value;\r\n        randomMetrics.value = tbmetrics.value.filter(metric => !fixedMetrics.includes(metric.key));\r\n        oracleMetrics.value = [];\r\n      }\r\n\r\n      nextTick(() => {\r\n        renderCharts();\r\n      });\r\n    };\r\n\r\n    const fetchDbData = async (instanceName) => {\r\n      try {\r\n        const response = await axios.get(`/api/dailychk/${instanceName}/oradata`);\r\n        dbData.value = response.data;\r\n      } catch (error) {\r\n        console.error(\"ORACLE DB 데이터를 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    const fetchTbDbData = async (instanceName) => {\r\n      try {\r\n        const response = await axios.get(`/api/dailychk/${instanceName}/tbdata`);\r\n        tbdbData.value = response.data;\r\n      } catch (error) {\r\n        console.error(\"TIBERO DB 데이터를 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    const getRandomPastelColor = () => {\r\n      const hue = Math.floor(Math.random() * 360);\r\n      const saturation = 70 + Math.random() * 30;\r\n      const lightness = 70 + Math.random() * 10;\r\n      return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\r\n    };\r\n\r\n    const renderRandomOraCharts = () => {\r\n      if (!dbData.value || dbData.value.length === 0) return;\r\n\r\n      dbData.value.sort((a, b) => new Date(a.id.chkDate) - new Date(b.id.chkDate));\r\n      const labels = dbData.value.map(item => item.id.chkDate);\r\n\r\n      // 고정 metric을 제외한 metric만 대상으로 필터링\r\n      const dynamicOracleMetrics = oracleMetrics.value.filter(metric => !orafixedMetrics.includes(metric.key));\r\n\r\n      dynamicOracleMetrics.forEach((metric, index) => {\r\n        const data = dbData.value.map(item => {\r\n          const value = item[metric.key] ?? 0;\r\n\r\n          // Buffer-related metrics에 대해 max값을 100으로 고정\r\n          if (['bufferpct', 'reDoPct', 'buffHit', 'latchHitPct', 'libHitPct', 'softPct','inMemorySort','nonParseCpu'].includes(metric.key)) {\r\n            return Math.min(value, 100);  // 100을 초과하는 값은 100으로 설정\r\n          }\r\n\r\n          return value;  // 나머지 지표는 정상적으로 표시\r\n        });\r\n\r\n        const canvas = document.getElementById(`oracleChart_${index}`);\r\n\r\n        if (canvas) {\r\n          if (canvas.chart) canvas.chart.destroy();\r\n\r\n          const chart = new Chart(canvas, {\r\n            type: 'line',\r\n            data: {\r\n              labels,\r\n              datasets: [{\r\n                label: metric.label,\r\n                data,\r\n                borderColor: getRandomPastelColor(),\r\n                backgroundColor: getRandomPastelColor() + '50',\r\n                fill: false,\r\n                tension: 0.3,\r\n              }]\r\n            },\r\n            options: {\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              scales: {\r\n                x: { title: { display: true, text: 'Date' } },\r\n                y: {\r\n                  title: { display: true, text: 'Value' },\r\n                  // bufferpct 관련 지표들만 Y축 max 값을 100으로 설정하고, 나머지 지표는 자동으로 설정\r\n                  stepsize:5,\r\n                  max: ['bufferpct', 'reDoPct', 'buffHit', 'latchHitPct', 'libHitPct', 'softPct','inMemorySort','nonParseCpu'].includes(metric.key) ? 100 : undefined,\r\n                }\r\n              }\r\n            }\r\n          });\r\n\r\n          canvas.chart = chart;\r\n        }\r\n      });\r\n    };\r\n\r\n\r\n\r\n\r\n    const renderOracleFixedChart = () => {\r\n      if (!dbData.value || dbData.value.length === 0) return;\r\n\r\n      dbData.value.sort((a, b) => new Date(a.id.chkDate) - new Date(b.id.chkDate));\r\n      const labels = dbData.value.map(item => item.id.chkDate);\r\n\r\n      // 현재 시간 추가\r\n      const currentTime = new Date().toISOString().slice(0, 19).replace(\"T\", \" \");\r\n      labels.push(currentTime);\r\n\r\n      const datasets = orafixedMetrics.map((key) => {\r\n        const data = dbData.value.map(item => item[key] ?? 0);\r\n        return {\r\n          label: key,\r\n          data,\r\n          borderColor: getRandomPastelColor(),\r\n          backgroundColor: getRandomPastelColor() + '50',\r\n          fill: false,\r\n          tension: 0.3,\r\n        };\r\n      });\r\n\r\n      const canvas = document.getElementById('oracleFixedChart');\r\n      if (canvas) {\r\n        if (canvas.chart) canvas.chart.destroy();\r\n\r\n        const chart = new Chart(canvas, {\r\n          type: 'line',\r\n          data: { labels, datasets },\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            scales: {\r\n              x: { title: { display: true, text: 'Date' } },\r\n              y: { title: { display: true, text: 'Value' } }\r\n            }\r\n          }\r\n        });\r\n\r\n        canvas.chart = chart;\r\n      }\r\n    };\r\n\r\n    const renderTiberoFixedChart = () => {\r\n      if (!tbdbData.value || tbdbData.value.length === 0) return;\r\n\r\n      tbdbData.value.sort((a, b) => new Date(a.id.chkDate) - new Date(b.id.chkDate));\r\n      const labels = tbdbData.value.map(item => item.id.chkDate);\r\n\r\n      const datasets = fixedMetrics.map((key) => {\r\n        const data = tbdbData.value.map(item => item[key] ?? 0);\r\n        return {\r\n          label: key,\r\n          data,\r\n          borderColor: getRandomPastelColor(),\r\n          backgroundColor: getRandomPastelColor() + '50',\r\n          fill: false,\r\n          tension: 0.3,\r\n        };\r\n      });\r\n\r\n      const canvas = document.getElementById('tiberoFixedChart');\r\n      if (canvas) {\r\n        if (canvas.chart) canvas.chart.destroy();\r\n\r\n        const chart = new Chart(canvas, {\r\n          type: 'line',\r\n          data: { labels, datasets },\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            scales: {\r\n              x: { title: { display: true, text: 'Date' } },\r\n              y: { title: { display: true, text: 'Value' } }\r\n            }\r\n          }\r\n        });\r\n\r\n        canvas.chart = chart;\r\n      }\r\n    };\r\n\r\n    const renderRandomTbCharts = () => {\r\n      randomMetrics.value.forEach((metric, index) => {\r\n        const canvas = document.getElementById(`chartRef_${index}`);\r\n        if (canvas) {\r\n          if (canvas.chart) canvas.chart.destroy();\r\n\r\n          const data = tbdbData.value.map(item => {\r\n            const value = item[metric.key] ?? 0;\r\n\r\n            // bufferHit, libHit, dictHit 지표에 대해 max값을 100으로 고정\r\n            if (['buffHit', 'libHit', 'dictHit'].includes(metric.key)) {\r\n              return Math.min(value, 100);  // 100을 초과하는 값은 100으로 설정\r\n            }\r\n\r\n            return value;  // 나머지 지표는 제한 없이 정상적으로 표시\r\n          });\r\n\r\n          const chartOptions = {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            scales: {\r\n              x: { title: { display: true, text: 'Date' } },\r\n              y: {\r\n                title: { display: true, text: 'Value' },\r\n              }\r\n            }\r\n          };\r\n\r\n          // bufferHit, libHit, dictHit 지표에 대해서만 max값을 100으로 고정하고 stepSize를 5로 설정\r\n          if (['buffHit', 'libHit', 'dictHit'].includes(metric.key)) {\r\n            chartOptions.scales.y.max = 100;\r\n          } else {\r\n            // 나머지 지표는 Y축의 제한 없이 출력되도록 설정\r\n            chartOptions.scales.y.max = undefined;  // max 제한 없애기\r\n          }\r\n\r\n          const chart = new Chart(canvas, {\r\n            type: 'line',\r\n            data: {\r\n              labels: tbdbData.value.map(item => item.id.chkDate),\r\n              datasets: [{\r\n                label: metric.label,\r\n                data,\r\n                borderColor: getRandomPastelColor(),\r\n                backgroundColor: getRandomPastelColor() + '50',\r\n                fill: false,\r\n                tension: 0.3,\r\n              }]\r\n            },\r\n            options: chartOptions\r\n          });\r\n\r\n          canvas.chart = chart;\r\n        }\r\n      });\r\n    };\r\n\r\n\r\n\r\n    const renderCharts = () => {\r\n      if (selectedDBType.value === 'oracle') {\r\n        renderOracleFixedChart();\r\n        renderRandomOraCharts();\r\n      } else if (selectedDBType.value === 'tibero') {\r\n        renderTiberoFixedChart();\r\n        renderRandomTbCharts();\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      fetchDbList();\r\n    });\r\n\r\n    return {\r\n      expandedDBType,\r\n      selectedDB,\r\n      selectedDBType,\r\n      oracleDBList,\r\n      tiberoDBList,\r\n      metricsToUse,\r\n      dbData,\r\n      tbdbData,\r\n      randomMetrics,\r\n      oracleMetrics,\r\n      toggleDBType,\r\n      selectDB,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 전체 컨테이너 스타일 */\r\n.container {\r\n  display: flex;\r\n  height: 100%; /* 전체 컨테이너 높이 100%로 설정, 필요에 따라 조정 가능 */\r\n  background-color: #f4f4f4;\r\n}\r\n\r\n/* DB 트리 스타일 */\r\n.db-tree {\r\n  width: 250px; /* DB 트리의 너비를 조정 (기본값은 200px) */\r\n  background-color: #fff;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  height: 100vh; /* DB 트리의 높이를 화면에 맞게 설정 */\r\n  overflow-y: auto;\r\n  flex-shrink: 0;\r\n}\r\n\r\n/* 트리 노드 스타일 */\r\n.tree-node {\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  padding: 8px;\r\n  background-color: #f0f0f0;\r\n  border-radius: 5px;\r\n  margin: 5px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.tree-node:hover {\r\n  background-color: #e1e1e1;\r\n}\r\n\r\n/* 토글 아이콘 여백 */\r\n.toggle-icon {\r\n  margin-right: 10px;\r\n}\r\n\r\n/* 서브 트리 스타일 */\r\n.sub-tree {\r\n  padding-left: 20px;\r\n  margin-top: 10px;\r\n}\r\n\r\n/* DB 항목 스타일 */\r\n.db-item {\r\n  padding: 5px;\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.db-item:hover {\r\n  background-color: #e9f1f7;\r\n}\r\n\r\n/* 차트 컨테이너 스타일 */\r\n.chart-container {\r\n  flex-grow: 1;\r\n  width: 900px; /* 차트 컨테이너의 기본 너비, 필요에 따라 수정 */\r\n  padding: 20px;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  min-height: 100vh; /* 컨테이너가 최소 100vh 높이를 갖도록 설정 */\r\n  /* height: 100vh; */\r\n}\r\n\r\n/* 차트 래퍼 스타일 */\r\n.charts-wrapper {\r\n  flex-grow: 1; /* 내부 요소가 차지할 공간을 자동으로 확장 */\r\n  overflow-y: auto;\r\n  padding-right: 10px;\r\n}\r\n\r\n/* 개별 차트 스타일 */\r\n.metric-chart {\r\n  width: 100%;\r\n  height: 300px; /* 차트의 높이 설정 */\r\n  margin-bottom: 20px;\r\n}\r\n\r\n/* 반응형 스타일 */\r\n@media (max-width: 768px) {\r\n  .container {\r\n    flex-direction: column;\r\n  }\r\n  .db-tree {\r\n    width: 100%; /* 모바일에서 DB 트리의 너비를 100%로 설정 */\r\n    height: auto; /* 모바일에서 DB 트리의 높이를 자동으로 조정 */\r\n  }\r\n  .metric-chart {\r\n    width: 100%; /* 차트의 너비를 100%로 설정 */\r\n  }\r\n}\r\n\r\n/* 선택된 DB 항목 스타일 */\r\n.db-item.selected {\r\n  background-color: #d1e7fd;  /* 선택된 DB에 파란색 배경 */\r\n  color: #1d70b8;  /* 텍스트 색상 강조 */\r\n  font-weight: bold;  /* 텍스트 강조 */\r\n}\r\n\r\n/* 선택된 DB 항목 호버 스타일 */\r\n.db-item.selected:hover {\r\n  background-color: #a6c8f7;  /* 호버 시 배경 색상 변경 */\r\n}\r\n</style>\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}