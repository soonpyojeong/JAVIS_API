{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"db-tree\"\n};\nconst _hoisted_3 = {\n  class: \"toggle-icon\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"sub-tree\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  class: \"toggle-icon\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"sub-tree\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  class: \"chart-container\"\n};\nconst _hoisted_10 = {\n  class: \"charts-wrapper\"\n};\nconst _hoisted_11 = [\"id\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 왼쪽 DB 트리 구조 \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"ul\", null, [_createElementVNode(\"li\", null, [_createElementVNode(\"span\", {\n    onClick: _cache[0] || (_cache[0] = $event => $setup.toggleDBType('oracle')),\n    class: \"tree-node oracle\"\n  }, [_createElementVNode(\"span\", _hoisted_3, _toDisplayString($setup.expandedDBType.oracle ? '-' : '+'), 1 /* TEXT */), _cache[2] || (_cache[2] = _createTextVNode(\" ORACLE \"))]), $setup.expandedDBType.oracle ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.oracleDBList, instance => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: instance,\n      class: \"db-item\"\n    }, [_createElementVNode(\"span\", {\n      onClick: $event => $setup.selectDB(instance, 'oracle')\n    }, [_cache[3] || (_cache[3] = _createElementVNode(\"span\", {\n      class: \"leaf-icon\"\n    }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(instance), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"li\", null, [_createElementVNode(\"span\", {\n    onClick: _cache[1] || (_cache[1] = $event => $setup.toggleDBType('tibero')),\n    class: \"tree-node tibero\"\n  }, [_createElementVNode(\"span\", _hoisted_6, _toDisplayString($setup.expandedDBType.tibero ? '-' : '+'), 1 /* TEXT */), _cache[4] || (_cache[4] = _createTextVNode(\" TIBERO \"))]), $setup.expandedDBType.tibero ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.tiberoDBList, instance => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: instance,\n      class: \"db-item\"\n    }, [_createElementVNode(\"span\", {\n      onClick: $event => $setup.selectDB(instance, 'tibero')\n    }, [_cache[5] || (_cache[5] = _createElementVNode(\"span\", {\n      class: \"leaf-icon\"\n    }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(instance), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_8)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)])])]), _createCommentVNode(\" 차트 영역 \"), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"div\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.metricsToUse, (metric, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"metric-chart\"\n    }, [_createElementVNode(\"canvas\", {\n      id: 'chartRef_' + index\n    }, null, 8 /* PROPS */, _hoisted_11)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","onClick","_cache","$event","$setup","toggleDBType","_hoisted_3","_toDisplayString","expandedDBType","oracle","_createTextVNode","_hoisted_4","_Fragment","_renderList","oracleDBList","instance","selectDB","_hoisted_5","_hoisted_6","tibero","_hoisted_7","tiberoDBList","_hoisted_8","_hoisted_9","_hoisted_10","metricsToUse","metric","index","id","_hoisted_11"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DailyChk.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 왼쪽 DB 트리 구조 -->\r\n    <div class=\"db-tree\">\r\n      <ul>\r\n        <li>\r\n          <span @click=\"toggleDBType('oracle')\" class=\"tree-node oracle\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.oracle ? '-' : '+' }}</span> ORACLE\r\n          </span>\r\n          <ul v-if=\"expandedDBType.oracle\" class=\"sub-tree\">\r\n            <li v-for=\"instance in oracleDBList\" :key=\"instance\" class=\"db-item\">\r\n              <span @click=\"selectDB(instance, 'oracle')\">\r\n                <span class=\"leaf-icon\"></span> {{ instance }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n        <li>\r\n          <span @click=\"toggleDBType('tibero')\" class=\"tree-node tibero\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.tibero ? '-' : '+' }}</span> TIBERO\r\n          </span>\r\n          <ul v-if=\"expandedDBType.tibero\" class=\"sub-tree\">\r\n            <li v-for=\"instance in tiberoDBList\" :key=\"instance\" class=\"db-item\">\r\n              <span @click=\"selectDB(instance, 'tibero')\">\r\n                <span class=\"leaf-icon\"></span> {{ instance }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <!-- 차트 영역 -->\r\n    <div class=\"chart-container\">\r\n      <div class=\"charts-wrapper\">\r\n        <div v-for=\"(metric, index) in metricsToUse\" :key=\"index\" class=\"metric-chart\">\r\n          <canvas :id=\"'chartRef_' + index\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, nextTick, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  setup() {\r\n    const expandedDBType = ref({ oracle: false, tibero: false });\r\n    const selectedDB = ref(null);\r\n    const oracleDBList = ref([]);  // ORACLE DB 리스트\r\n    const tiberoDBList = ref([]);  // TIBERO DB 리스트\r\n\r\n    const metrics = ref([  // 사용할 지표 목록 (ORACLE용)\r\n      { key: 'transaTions', label: 'Transactions' },\r\n      { key: 'totalSess', label: 'Total Sessions' },\r\n      { key: 'activeSess', label: 'Active Sessions' },\r\n      { key: 'bufferpct', label: 'Buffer Nowait Pct' },\r\n      { key: 'reDoPct', label: 'Redo Nowait Pct' },\r\n      { key: 'buffHit', label: 'Buffer Hit Pct' },\r\n      { key: 'latchHitPct', label: 'Latch Hit Pct' },\r\n      { key: 'libHitPct', label: 'Library Hit Pct' },\r\n      { key: 'softPct', label: 'Soft Parse Pct' },\r\n      { key: 'executTopct', label: 'Execute to Parse Pct' },\r\n      { key: 'parseCpuElapsd', label: 'Parse CPU to Elapsed' },\r\n      { key: 'nonParseCpu', label: 'Non Parse CPU' },\r\n      { key: 'inMemorySort', label: 'In Memory Sort' },\r\n      { key: 'dailyArchCht', label: 'Daily Archive Count' }\r\n    ]);\r\n\r\n    const tbmetrics = ref([  // 사용할 지표 목록 (TIBERO용)\r\n      { key: 'maxlSess', label: 'Max Sessions' },\r\n      { key: 'totalSess', label: 'Total Sessions' },\r\n      { key: 'runSess', label: 'Active Sessions' },\r\n      { key: 'recSess', label: 'Recover Session' },\r\n      { key: 'tsm', label: 'TSM' },\r\n      { key: 'wpm', label: 'WPM' },\r\n      { key: 'pgaSize', label: 'PGA Size' },\r\n      { key: 'wpmPgadiff', label: 'WPM PGA DIFF' },\r\n      { key: 'shardMem', label: 'SHARED POOL MEMORY' },\r\n      { key: 'phyRead', label: 'PHYSICAL READ' },\r\n      { key: 'logicRead', label: 'LOGICAL READ' },\r\n      { key: 'buffHit', label: 'BUFFER CACHE HIT' },\r\n      { key: 'libHit', label: 'LIBRARY CACHE HIT' },\r\n      { key: 'dictHit', label: 'DICTIONARY CACHE HIT' }\r\n    ]);\r\n\r\n    const dbData = ref([]);  // ORACLE DB 데이터\r\n    const tbdbData = ref([]);  // TIBERO DB 데이터\r\n    const metricsToUse = ref(metrics.value);  // 사용될 지표 목록 (동적으로 변경될 예정)\r\n\r\n    // DB 목록을 불러오는 함수\r\n    const fetchDbList = async () => {\r\n      try {\r\n        const response = await axios.get('/api/dailychk/db-list');\r\n        const dbList = response.data;\r\n        oracleDBList.value = dbList.ORACLE || [];\r\n        tiberoDBList.value = dbList.TIBERO || [];\r\n      } catch (error) {\r\n        console.error(\"DB 목록을 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    // DB 종류별 트리 토글\r\n    const toggleDBType = (type) => {\r\n      expandedDBType.value[type] = !expandedDBType.value[type];\r\n    };\r\n\r\n    // DB 선택 시 데이터 받아오기\r\n    const selectDB = async (instanceName, dbType) => {\r\n      selectedDB.value = instanceName;\r\n\r\n      if (dbType === 'oracle') {\r\n        await fetchDbData(instanceName); // ORACLE 데이터 가져오기\r\n        metricsToUse.value = metrics.value; // ORACLE 지표 목록\r\n      } else if (dbType === 'tibero') {\r\n        await fetchTbDbData(instanceName); // TIBERO 데이터 가져오기\r\n        metricsToUse.value = tbmetrics.value; // TIBERO 지표 목록\r\n      }\r\n\r\n      nextTick(() => {\r\n        renderCharts(); // 차트 렌더링\r\n      });\r\n    };\r\n\r\n    // ORACLE DB 데이터 가져오는 함수\r\n    const fetchDbData = async (instanceName) => {\r\n      try {\r\n        const response = await axios.get(`/api/dailychk/${instanceName}/oradata`);\r\n        dbData.value = response.data;\r\n      } catch (error) {\r\n        console.error(\"ORACLE DB 데이터를 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    // TIBERO DB 데이터 가져오는 함수\r\n    const fetchTbDbData = async (instanceName) => {\r\n      try {\r\n        const response = await axios.get(`/api/dailychk/${instanceName}/tbdata`);\r\n        tbdbData.value = response.data;\r\n      } catch (error) {\r\n        console.error(\"TIBERO DB 데이터를 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    // 차트 렌더링 함수\r\n    const getRandomPastelColor = () => {\r\n      const hue = Math.floor(Math.random() * 360);\r\n      const saturation = 70 + Math.random() * 30;\r\n      const lightness = 70 + Math.random() * 10;\r\n      return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\r\n    };\r\n\r\n    // ORACLE 전용 차트 렌더링 함수\r\n    const renderOracleCharts = () => {\r\n      if (!dbData.value || dbData.value.length === 0) {\r\n        console.warn('ORACLE DB 데이터가 없습니다.');\r\n        return;\r\n      }\r\n\r\n      // chkDate 기준으로 정렬 (오름차순)\r\n      dbData.value.sort((a, b) => new Date(a.id.chkDate) - new Date(b.id.chkDate));\r\n\r\n      metrics.value.forEach((metric, index) => {\r\n        const canvas = document.getElementById(`chartRef_${index}`);\r\n        if (canvas) {\r\n          if (canvas.chart) {\r\n            canvas.chart.destroy(); // 기존 차트 삭제\r\n          }\r\n\r\n          const labels = dbData.value.map(item => item.id.chkDate);\r\n          const data = dbData.value.map(item => item[metric.key] !== undefined ? item[metric.key] : 0);\r\n\r\n          if (labels.length === 0 || data.length === 0) {\r\n            console.warn(`${metric.label} 데이터가 없습니다.`);\r\n            return;\r\n          }\r\n\r\n          const borderColor = getRandomPastelColor();\r\n\r\n          const chart = new Chart(canvas, {\r\n            type: 'line',\r\n            data: {\r\n              labels,\r\n              datasets: [{\r\n                label: `${metric.label}`,\r\n                data,\r\n                borderColor,\r\n                backgroundColor: borderColor + '50',\r\n                fill: false,\r\n                tension: 0.3,\r\n              }]\r\n            },\r\n            options: {\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              scales: {\r\n                x: { title: { display: true, text: 'Date' } },\r\n                y: { title: { display: true, text: metric.label } }\r\n              }\r\n            }\r\n          });\r\n\r\n          canvas.chart = chart;\r\n        }\r\n      });\r\n    };\r\n\r\n    // TIBERO 전용 차트 렌더링 함수\r\n    const renderTiberoCharts = () => {\r\n      if (!tbdbData.value || tbdbData.value.length === 0) {\r\n        console.warn('TIBERO DB 데이터가 없습니다.');\r\n        return;\r\n      }\r\n\r\n      // chkDate 기준으로 정렬 (오름차순)\r\n      tbdbData.value.sort((a, b) => new Date(a.id.chkDate) - new Date(b.id.chkDate));\r\n\r\n      tbmetrics.value.forEach((metric, index) => {\r\n        const canvas = document.getElementById(`chartRef_${index}`);\r\n        if (canvas) {\r\n          if (canvas.chart) {\r\n            canvas.chart.destroy(); // 기존 차트 삭제\r\n          }\r\n\r\n          const labels = tbdbData.value.map(item => item.id.chkDate);\r\n          const data = tbdbData.value.map(item => item[metric.key] !== undefined ? item[metric.key] : 0);\r\n\r\n          if (labels.length === 0 || data.length === 0) {\r\n            console.warn(`${metric.label} 데이터가 없습니다.`);\r\n            return;\r\n          }\r\n\r\n          const borderColor = getRandomPastelColor();\r\n\r\n          const chart = new Chart(canvas, {\r\n            type: 'line',\r\n            data: {\r\n              labels,\r\n              datasets: [{\r\n                label: `${metric.label}`,\r\n                data,\r\n                borderColor,\r\n                backgroundColor: borderColor + '50',\r\n                fill: false,\r\n                tension: 0.3,\r\n              }]\r\n            },\r\n            options: {\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              scales: {\r\n                x: { title: { display: true, text: 'Date' } },\r\n                y: { title: { display: true, text: metric.label } }\r\n              }\r\n            }\r\n          });\r\n\r\n          canvas.chart = chart;\r\n        }\r\n      });\r\n    };\r\n\r\n    // 공통 차트 렌더링 함수 (ORACLE, TIBERO에 맞게 렌더링)\r\n    const renderCharts = () => {\r\n      if (selectedDB.value) {\r\n        if (metricsToUse.value === metrics.value) {\r\n          renderOracleCharts();\r\n        } else if (metricsToUse.value === tbmetrics.value) {\r\n          renderTiberoCharts();\r\n        }\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      fetchDbList();\r\n    });\r\n\r\n    return {\r\n      expandedDBType,\r\n      selectedDB,\r\n      oracleDBList,\r\n      tiberoDBList,\r\n      dbData,\r\n      tbdbData,\r\n      metricsToUse,\r\n      renderCharts,\r\n      toggleDBType,  // 여기 추가\r\n      selectDB       // 여기 추가\r\n    };\r\n  }\r\n};\r\n</script>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAW;;EAEfA,KAAK,EAAC;AAAS;;EAINA,KAAK,EAAC;AAAa;;EAPrCC,GAAA;EAS2CD,KAAK,EAAC;;mBATjD;;EAmBkBA,KAAK,EAAC;AAAa;;EAnBrCC,GAAA;EAqB2CD,KAAK,EAAC;;mBArBjD;;EAiCSA,KAAK,EAAC;AAAiB;;EACrBA,KAAK,EAAC;AAAgB;oBAlCjC;;uBACEE,mBAAA,CAuCM,OAvCNC,UAuCM,GAtCJC,mBAAA,iBAAoB,EACpBC,mBAAA,CA2BM,OA3BNC,UA2BM,GA1BJD,mBAAA,CAyBK,aAxBHA,mBAAA,CAWK,aAVHA,mBAAA,CAEO;IAFAE,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,MAAA,CAAAC,YAAY;IAAYX,KAAK,EAAC;MAC1CK,mBAAA,CAAwE,QAAxEO,UAAwE,EAAAC,gBAAA,CAA3CH,MAAA,CAAAI,cAAc,CAACC,MAAM,8B,0BAP9DC,gBAAA,CAOoF,UAC1E,G,GACUN,MAAA,CAAAI,cAAc,CAACC,MAAM,I,cAA/Bb,mBAAA,CAMK,MANLe,UAMK,I,kBALHf,mBAAA,CAIKgB,SAAA,QAdjBC,WAAA,CAUmCT,MAAA,CAAAU,YAAY,EAAxBC,QAAQ;yBAAnBnB,mBAAA,CAIK;MAJiCD,GAAG,EAAEoB,QAAQ;MAAErB,KAAK,EAAC;QACzDK,mBAAA,CAEO;MAFAE,OAAK,EAAAE,MAAA,IAAEC,MAAA,CAAAY,QAAQ,CAACD,QAAQ;kCAC7BhB,mBAAA,CAA+B;MAAzBL,KAAK,EAAC;IAAW,6BAZvCgB,gBAAA,CAY+C,GAAC,GAAAH,gBAAA,CAAGQ,QAAQ,iB,iBAZ3DE,UAAA,E;sCAAAnB,mBAAA,e,GAiBQC,mBAAA,CAWK,aAVHA,mBAAA,CAEO;IAFAE,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,MAAA,CAAAC,YAAY;IAAYX,KAAK,EAAC;MAC1CK,mBAAA,CAAwE,QAAxEmB,UAAwE,EAAAX,gBAAA,CAA3CH,MAAA,CAAAI,cAAc,CAACW,MAAM,8B,0BAnB9DT,gBAAA,CAmBoF,UAC1E,G,GACUN,MAAA,CAAAI,cAAc,CAACW,MAAM,I,cAA/BvB,mBAAA,CAMK,MANLwB,UAMK,I,kBALHxB,mBAAA,CAIKgB,SAAA,QA1BjBC,WAAA,CAsBmCT,MAAA,CAAAiB,YAAY,EAAxBN,QAAQ;yBAAnBnB,mBAAA,CAIK;MAJiCD,GAAG,EAAEoB,QAAQ;MAAErB,KAAK,EAAC;QACzDK,mBAAA,CAEO;MAFAE,OAAK,EAAAE,MAAA,IAAEC,MAAA,CAAAY,QAAQ,CAACD,QAAQ;kCAC7BhB,mBAAA,CAA+B;MAAzBL,KAAK,EAAC;IAAW,6BAxBvCgB,gBAAA,CAwB+C,GAAC,GAAAH,gBAAA,CAAGQ,QAAQ,iB,iBAxB3DO,UAAA,E;sCAAAxB,mBAAA,e,OAgCIA,mBAAA,WAAc,EACdC,mBAAA,CAMM,OANNwB,UAMM,GALJxB,mBAAA,CAIM,OAJNyB,WAIM,I,kBAHJ5B,mBAAA,CAEMgB,SAAA,QArCdC,WAAA,CAmCuCT,MAAA,CAAAqB,YAAY,EAnCnD,CAmCqBC,MAAM,EAAEC,KAAK;yBAA1B/B,mBAAA,CAEM;MAFwCD,GAAG,EAAEgC,KAAK;MAAEjC,KAAK,EAAC;QAC9DK,mBAAA,CAA2C;MAAlC6B,EAAE,gBAAgBD;4BApCrCE,WAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}