{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, nextTick, onMounted } from 'vue';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nexport default {\n  setup() {\n    const expandedDBType = ref({\n      oracle: false,\n      tibero: false\n    });\n    const selectedDB = ref(null);\n    const oracleDBList = ref([]); // ORACLE DB Î¶¨Ïä§Ìä∏\n    const tiberoDBList = ref([]); // TIBERO DB Î¶¨Ïä§Ìä∏\n    const metrics = ref([\n    // ÏÇ¨Ïö©Ìï† ÏßÄÌëú Î™©Î°ù\n    'TRANSACTIONS', 'TOTAL_SESSION', 'ACTIVE_SESSION', 'BUFFER_NOWAIT_PCT', 'REDO_NOWAIT_PCT', 'BUFFER_HIT_PCT', 'LATCH_HIT_PCT', 'LIBRARY_HIT_PCT', 'SOFT_PARSE_PCT', 'EXECUTE_TO_PARSE_PCT', 'PARSE_CPU_TO_PARSE_ELAPSD', 'NON_PARSE_CPU', 'IN_MEMORY_SORT', 'DAILY_ARCH_CNT']);\n    const dbData = ref([]); // DB Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•\n\n    // DB Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ìï®Ïàò\n    const fetchDbList = async () => {\n      try {\n        const response = await axios.get('/api/dailychk/db-list');\n        const dbList = response.data;\n        oracleDBList.value = dbList.ORACLE || [];\n        tiberoDBList.value = dbList.TIBERO || [];\n      } catch (error) {\n        console.error(\"DB Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.\", error);\n      }\n    };\n\n    // DB Ï¢ÖÎ•òÎ≥Ñ Ìä∏Î¶¨ ÌÜ†Í∏Ä\n    const toggleDBType = type => {\n      expandedDBType.value[type] = !expandedDBType.value[type];\n    };\n\n    // DB ÏÑ†ÌÉù Ïãú Îç∞Ïù¥ÌÑ∞ Î∞õÏïÑÏò§Í∏∞\n    const selectDB = async dbName => {\n      selectedDB.value = dbName;\n      await fetchDbData(dbName); // Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞\n      nextTick(() => {\n        renderCharts();\n      });\n    };\n\n    // ORACLE type ÏÑ†ÌÉùÌïú DBÏóê ÎåÄÌïú Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò\n    const fetchDbData = async dbName => {\n      console.log(\"Fetching data for DB:\", dbName); // Î°úÍ∑∏ Ï∂îÍ∞Ä\n      if (!dbName) {\n        console.error(\"Error: dbName is undefined or empty!\");\n        return;\n      }\n      try {\n        const response = await axios.get(`/api/dailychk/${dbName}/oradata`);\n        dbData.value = response.data;\n        console.log(\"üìå API ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:\", response.data); // Í∞í Ï∂úÎ†•\n      } catch (error) {\n        console.error(\"DB Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.\", error);\n      }\n    };\n\n    // Ï∞®Ìä∏ Î†åÎçîÎßÅ Ìï®Ïàò\n    const renderCharts = () => {\n      metrics.value.forEach((metric, index) => {\n        const canvas = document.querySelector(`[ref=\"chartRef_${index}\"]`);\n        if (canvas) {\n          if (canvas.chart) {\n            canvas.chart.destroy();\n          }\n\n          // XÏ∂ï(ÏãúÍ∞Ñ), YÏ∂ï(Í∞Å ÏßÄÌëú)Ïùò Í∞í Ï∂îÏ∂ú\n          const labels = dbData.value.map(item => item.id.chkDate); // ÎÇ†ÏßúÎ•º XÏ∂ï Î†àÏù¥Î∏îÎ°ú ÏÑ§Ï†ï\n          const data = dbData.value.map(item => item[metric]); // ÏßÄÌëúÏùò Í∞íÏùÑ YÏ∂ï Îç∞Ïù¥ÌÑ∞Î°ú ÏÑ§Ï†ï\n\n          // Ï∞®Ìä∏ ÏÉùÏÑ±\n          canvas.chart = new Chart(canvas, {\n            type: 'line',\n            data: {\n              labels,\n              // XÏ∂ïÏùÄ ÎÇ†Ïßú\n              datasets: [{\n                label: `${metric}`,\n                data: data,\n                // YÏ∂ïÏùÄ Ìï¥Îãπ ÏßÄÌëú Í∞í\n                borderColor: 'blue',\n                fill: false\n              }]\n            },\n            options: {\n              responsive: true,\n              maintainAspectRatio: false,\n              width: 100,\n              height: 90\n            }\n          });\n        }\n      });\n    };\n    onMounted(() => {\n      fetchDbList();\n    });\n    return {\n      expandedDBType,\n      selectedDB,\n      oracleDBList,\n      tiberoDBList,\n      metrics,\n      dbData,\n      toggleDBType,\n      selectDB\n    };\n  }\n};","map":{"version":3,"names":["ref","nextTick","onMounted","axios","Chart","setup","expandedDBType","oracle","tibero","selectedDB","oracleDBList","tiberoDBList","metrics","dbData","fetchDbList","response","get","dbList","data","value","ORACLE","TIBERO","error","console","toggleDBType","type","selectDB","dbName","fetchDbData","renderCharts","log","forEach","metric","index","canvas","document","querySelector","chart","destroy","labels","map","item","id","chkDate","datasets","label","borderColor","fill","options","responsive","maintainAspectRatio","width","height"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DailyChk.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- ÏôºÏ™Ω DB Ìä∏Î¶¨ Íµ¨Ï°∞ -->\r\n    <div class=\"db-tree\">\r\n      <ul>\r\n        <li>\r\n          <span @click=\"toggleDBType('oracle')\" class=\"tree-node\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.oracle ? '-' : '+' }}</span> ORACLE\r\n          </span>\r\n          <ul v-if=\"expandedDBType.oracle\" class=\"sub-tree\">\r\n            <li v-for=\"db in oracleDBList\" :key=\"db\" class=\"db-item\">\r\n              <span @click=\"selectDB(db)\">\r\n                <span class=\"leaf-icon\"></span> {{ db }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n        <li>\r\n          <span @click=\"toggleDBType('tibero')\" class=\"tree-node\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.tibero ? '-' : '+' }}</span> TIBERO\r\n          </span>\r\n          <ul v-if=\"expandedDBType.tibero\" class=\"sub-tree\">\r\n            <li v-for=\"db in tiberoDBList\" :key=\"db\" class=\"db-item\">\r\n              <span @click=\"selectDB(db)\">\r\n                <span class=\"leaf-icon\"></span> {{ db }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <!-- Ï§ëÏïô Ï∞®Ìä∏ (Ìä∏Î¶¨ Ïò§Î•∏Ï™ΩÏóê Ïò§ÎèÑÎ°ù ÏÑ§Ï†ï) -->\r\n    <div class=\"chart-container\" v-if=\"selectedDB\">\r\n      <h3>{{ selectedDB }} - Metrics</h3>\r\n      <div class=\"charts-row\">\r\n        <div v-for=\"(metric, index) in metrics\" :key=\"metric\" class=\"metric-chart\">\r\n          <h4>{{ metric }}</h4>\r\n          <canvas :ref=\"`chartRef_${index}`\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, nextTick, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  setup() {\r\n    const expandedDBType = ref({ oracle: false, tibero: false });\r\n    const selectedDB = ref(null);\r\n    const oracleDBList = ref([]);  // ORACLE DB Î¶¨Ïä§Ìä∏\r\n    const tiberoDBList = ref([]);  // TIBERO DB Î¶¨Ïä§Ìä∏\r\n    const metrics = ref([  // ÏÇ¨Ïö©Ìï† ÏßÄÌëú Î™©Î°ù\r\n      'TRANSACTIONS', 'TOTAL_SESSION', 'ACTIVE_SESSION',\r\n      'BUFFER_NOWAIT_PCT', 'REDO_NOWAIT_PCT', 'BUFFER_HIT_PCT',\r\n      'LATCH_HIT_PCT', 'LIBRARY_HIT_PCT', 'SOFT_PARSE_PCT',\r\n      'EXECUTE_TO_PARSE_PCT', 'PARSE_CPU_TO_PARSE_ELAPSD', 'NON_PARSE_CPU',\r\n      'IN_MEMORY_SORT', 'DAILY_ARCH_CNT'\r\n    ]);\r\n    const dbData = ref([]);  // DB Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•\r\n\r\n    // DB Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ìï®Ïàò\r\n    const fetchDbList = async () => {\r\n      try {\r\n        const response = await axios.get('/api/dailychk/db-list');\r\n        const dbList = response.data;\r\n        oracleDBList.value = dbList.ORACLE || [];\r\n        tiberoDBList.value = dbList.TIBERO || [];\r\n      } catch (error) {\r\n        console.error(\"DB Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.\", error);\r\n      }\r\n    };\r\n\r\n    // DB Ï¢ÖÎ•òÎ≥Ñ Ìä∏Î¶¨ ÌÜ†Í∏Ä\r\n    const toggleDBType = (type) => {\r\n      expandedDBType.value[type] = !expandedDBType.value[type];\r\n    };\r\n\r\n    // DB ÏÑ†ÌÉù Ïãú Îç∞Ïù¥ÌÑ∞ Î∞õÏïÑÏò§Í∏∞\r\n    const selectDB = async (dbName) => {\r\n      selectedDB.value = dbName;\r\n      await fetchDbData(dbName); // Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞\r\n      nextTick(() => {\r\n        renderCharts();\r\n      });\r\n    };\r\n\r\n    // ORACLE type ÏÑ†ÌÉùÌïú DBÏóê ÎåÄÌïú Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò\r\n    const fetchDbData = async (dbName) => {\r\n      console.log(\"Fetching data for DB:\", dbName); // Î°úÍ∑∏ Ï∂îÍ∞Ä\r\n      if (!dbName) {\r\n        console.error(\"Error: dbName is undefined or empty!\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.get(`/api/dailychk/${dbName}/oradata`);\r\n        dbData.value = response.data;\r\n        console.log(\"üìå API ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:\", response.data);  // Í∞í Ï∂úÎ†•\r\n      } catch (error) {\r\n        console.error(\"DB Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.\", error);\r\n      }\r\n    };\r\n\r\n    // Ï∞®Ìä∏ Î†åÎçîÎßÅ Ìï®Ïàò\r\n    const renderCharts = () => {\r\n      metrics.value.forEach((metric, index) => {\r\n        const canvas = document.querySelector(`[ref=\"chartRef_${index}\"]`);\r\n        if (canvas) {\r\n          if (canvas.chart) {\r\n            canvas.chart.destroy();\r\n          }\r\n\r\n          // XÏ∂ï(ÏãúÍ∞Ñ), YÏ∂ï(Í∞Å ÏßÄÌëú)Ïùò Í∞í Ï∂îÏ∂ú\r\n          const labels = dbData.value.map(item => item.id.chkDate); // ÎÇ†ÏßúÎ•º XÏ∂ï Î†àÏù¥Î∏îÎ°ú ÏÑ§Ï†ï\r\n          const data = dbData.value.map(item => item[metric]); // ÏßÄÌëúÏùò Í∞íÏùÑ YÏ∂ï Îç∞Ïù¥ÌÑ∞Î°ú ÏÑ§Ï†ï\r\n\r\n          // Ï∞®Ìä∏ ÏÉùÏÑ±\r\n          canvas.chart = new Chart(canvas, {\r\n            type: 'line',\r\n            data: {\r\n              labels,  // XÏ∂ïÏùÄ ÎÇ†Ïßú\r\n              datasets: [\r\n                {\r\n                  label: `${metric}`,\r\n                  data: data,  // YÏ∂ïÏùÄ Ìï¥Îãπ ÏßÄÌëú Í∞í\r\n                  borderColor: 'blue',\r\n                  fill: false,\r\n                }\r\n              ]\r\n            },\r\n            options: {\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              width: 100,\r\n              height: 90,\r\n            }\r\n          });\r\n        }\r\n      });\r\n    };\r\n\r\n    onMounted(() => {\r\n      fetchDbList();\r\n    });\r\n\r\n    return {\r\n      expandedDBType,\r\n      selectedDB,\r\n      oracleDBList,\r\n      tiberoDBList,\r\n      metrics,\r\n      dbData,\r\n      toggleDBType,\r\n      selectDB\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 20px;\r\n}\r\n\r\n.db-tree {\r\n  width: 250px;\r\n}\r\n\r\n.chart-container {\r\n  flex-grow: 1;\r\n}\r\n\r\n.charts-row {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n}\r\n\r\n.metric-chart {\r\n  width: 400px;\r\n  height: 300px;\r\n}\r\n\r\n.tree-node {\r\n  cursor: pointer;\r\n}\r\n\r\n.sub-tree {\r\n  padding-left: 20px;\r\n}\r\n\r\n.leaf-icon {\r\n  margin-right: 8px;\r\n}\r\n\r\n.toggle-icon {\r\n  margin-right: 8px;\r\n}\r\n</style>\r\n"],"mappings":";;;AA8CA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAQ,QAAS,KAAK;AAC9C,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,KAAI,MAAO,eAAe;AAEjC,eAAe;EACbC,KAAKA,CAAA,EAAG;IACN,MAAMC,cAAa,GAAIN,GAAG,CAAC;MAAEO,MAAM,EAAE,KAAK;MAAEC,MAAM,EAAE;IAAM,CAAC,CAAC;IAC5D,MAAMC,UAAS,GAAIT,GAAG,CAAC,IAAI,CAAC;IAC5B,MAAMU,YAAW,GAAIV,GAAG,CAAC,EAAE,CAAC,EAAG;IAC/B,MAAMW,YAAW,GAAIX,GAAG,CAAC,EAAE,CAAC,EAAG;IAC/B,MAAMY,OAAM,GAAIZ,GAAG,CAAC;IAAG;IACrB,cAAc,EAAE,eAAe,EAAE,gBAAgB,EACjD,mBAAmB,EAAE,iBAAiB,EAAE,gBAAgB,EACxD,eAAe,EAAE,iBAAiB,EAAE,gBAAgB,EACpD,sBAAsB,EAAE,2BAA2B,EAAE,eAAe,EACpE,gBAAgB,EAAE,gBAAe,CAClC,CAAC;IACF,MAAMa,MAAK,GAAIb,GAAG,CAAC,EAAE,CAAC,EAAG;;IAEzB;IACA,MAAMc,WAAU,GAAI,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMZ,KAAK,CAACa,GAAG,CAAC,uBAAuB,CAAC;QACzD,MAAMC,MAAK,GAAIF,QAAQ,CAACG,IAAI;QAC5BR,YAAY,CAACS,KAAI,GAAIF,MAAM,CAACG,MAAK,IAAK,EAAE;QACxCT,YAAY,CAACQ,KAAI,GAAIF,MAAM,CAACI,MAAK,IAAK,EAAE;MAC1C,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;;IAED;IACA,MAAME,YAAW,GAAKC,IAAI,IAAK;MAC7BnB,cAAc,CAACa,KAAK,CAACM,IAAI,IAAI,CAACnB,cAAc,CAACa,KAAK,CAACM,IAAI,CAAC;IAC1D,CAAC;;IAED;IACA,MAAMC,QAAO,GAAI,MAAOC,MAAM,IAAK;MACjClB,UAAU,CAACU,KAAI,GAAIQ,MAAM;MACzB,MAAMC,WAAW,CAACD,MAAM,CAAC,EAAE;MAC3B1B,QAAQ,CAAC,MAAM;QACb4B,YAAY,CAAC,CAAC;MAChB,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAMD,WAAU,GAAI,MAAOD,MAAM,IAAK;MACpCJ,OAAO,CAACO,GAAG,CAAC,uBAAuB,EAAEH,MAAM,CAAC,EAAE;MAC9C,IAAI,CAACA,MAAM,EAAE;QACXJ,OAAO,CAACD,KAAK,CAAC,sCAAsC,CAAC;QACrD;MACF;MAEA,IAAI;QACF,MAAMP,QAAO,GAAI,MAAMZ,KAAK,CAACa,GAAG,CAAC,iBAAiBW,MAAM,UAAU,CAAC;QACnEd,MAAM,CAACM,KAAI,GAAIJ,QAAQ,CAACG,IAAI;QAC5BK,OAAO,CAACO,GAAG,CAAC,gBAAgB,EAAEf,QAAQ,CAACG,IAAI,CAAC,EAAG;MACjD,EAAE,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;;IAED;IACA,MAAMO,YAAW,GAAIA,CAAA,KAAM;MACzBjB,OAAO,CAACO,KAAK,CAACY,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;QACvC,MAAMC,MAAK,GAAIC,QAAQ,CAACC,aAAa,CAAC,kBAAkBH,KAAK,IAAI,CAAC;QAClE,IAAIC,MAAM,EAAE;UACV,IAAIA,MAAM,CAACG,KAAK,EAAE;YAChBH,MAAM,CAACG,KAAK,CAACC,OAAO,CAAC,CAAC;UACxB;;UAEA;UACA,MAAMC,MAAK,GAAI1B,MAAM,CAACM,KAAK,CAACqB,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACC,EAAE,CAACC,OAAO,CAAC,EAAE;UAC1D,MAAMzB,IAAG,GAAIL,MAAM,CAACM,KAAK,CAACqB,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACT,MAAM,CAAC,CAAC,EAAE;;UAErD;UACAE,MAAM,CAACG,KAAI,GAAI,IAAIjC,KAAK,CAAC8B,MAAM,EAAE;YAC/BT,IAAI,EAAE,MAAM;YACZP,IAAI,EAAE;cACJqB,MAAM;cAAG;cACTK,QAAQ,EAAE,CACR;gBACEC,KAAK,EAAE,GAAGb,MAAM,EAAE;gBAClBd,IAAI,EAAEA,IAAI;gBAAG;gBACb4B,WAAW,EAAE,MAAM;gBACnBC,IAAI,EAAE;cACR;YAEJ,CAAC;YACDC,OAAO,EAAE;cACPC,UAAU,EAAE,IAAI;cAChBC,mBAAmB,EAAE,KAAK;cAC1BC,KAAK,EAAE,GAAG;cACVC,MAAM,EAAE;YACV;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC;IAEDlD,SAAS,CAAC,MAAM;MACdY,WAAW,CAAC,CAAC;IACf,CAAC,CAAC;IAEF,OAAO;MACLR,cAAc;MACdG,UAAU;MACVC,YAAY;MACZC,YAAY;MACZC,OAAO;MACPC,MAAM;MACNW,YAAY;MACZE;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}