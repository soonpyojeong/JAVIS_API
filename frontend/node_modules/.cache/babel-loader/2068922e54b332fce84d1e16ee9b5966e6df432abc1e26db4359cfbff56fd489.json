{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"db-tree\"\n};\nconst _hoisted_3 = {\n  class: \"toggle-icon\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"sub-tree\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  class: \"toggle-icon\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"sub-tree\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  key: 0,\n  class: \"chart-container\"\n};\nconst _hoisted_10 = {\n  class: \"charts-row\"\n};\nconst _hoisted_11 = [\"id\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 왼쪽 DB 트리 구조 \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"ul\", null, [_createElementVNode(\"li\", null, [_createElementVNode(\"span\", {\n    onClick: _cache[0] || (_cache[0] = $event => $setup.toggleDBType('oracle')),\n    class: \"tree-node\"\n  }, [_createElementVNode(\"span\", _hoisted_3, _toDisplayString($setup.expandedDBType.oracle ? '-' : '+'), 1 /* TEXT */), _cache[2] || (_cache[2] = _createTextVNode(\" ORACLE \"))]), $setup.expandedDBType.oracle ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.oracleDBList, db => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: db,\n      class: \"db-item\"\n    }, [_createElementVNode(\"span\", {\n      onClick: $event => $setup.selectDB(db)\n    }, [_cache[3] || (_cache[3] = _createElementVNode(\"span\", {\n      class: \"leaf-icon\"\n    }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(db), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"li\", null, [_createElementVNode(\"span\", {\n    onClick: _cache[1] || (_cache[1] = $event => $setup.toggleDBType('tibero')),\n    class: \"tree-node\"\n  }, [_createElementVNode(\"span\", _hoisted_6, _toDisplayString($setup.expandedDBType.tibero ? '-' : '+'), 1 /* TEXT */), _cache[4] || (_cache[4] = _createTextVNode(\" TIBERO \"))]), $setup.expandedDBType.tibero ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.tiberoDBList, db => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: db,\n      class: \"db-item\"\n    }, [_createElementVNode(\"span\", {\n      onClick: $event => $setup.selectDB(db)\n    }, [_cache[5] || (_cache[5] = _createElementVNode(\"span\", {\n      class: \"leaf-icon\"\n    }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(db), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_8)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)])])]), _createCommentVNode(\" 중앙 차트 (트리 오른쪽에 오도록 설정) \"), $setup.selectedDB ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_createElementVNode(\"h3\", null, _toDisplayString($setup.selectedDB) + \" - Metrics\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.metrics, (metric, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: metric,\n      class: \"metric-chart\"\n    }, [_createElementVNode(\"h4\", null, _toDisplayString(metric), 1 /* TEXT */), _createElementVNode(\"canvas\", {\n      id: `chartRef_${index}`\n    }, null, 8 /* PROPS */, _hoisted_11)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","onClick","_cache","$event","$setup","toggleDBType","_hoisted_3","_toDisplayString","expandedDBType","oracle","_createTextVNode","_hoisted_4","_Fragment","_renderList","oracleDBList","db","selectDB","_hoisted_5","_hoisted_6","tibero","_hoisted_7","tiberoDBList","_hoisted_8","selectedDB","_hoisted_9","_hoisted_10","metrics","metric","index","id","_hoisted_11"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DailyChk.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 왼쪽 DB 트리 구조 -->\r\n    <div class=\"db-tree\">\r\n      <ul>\r\n        <li>\r\n          <span @click=\"toggleDBType('oracle')\" class=\"tree-node\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.oracle ? '-' : '+' }}</span> ORACLE\r\n          </span>\r\n          <ul v-if=\"expandedDBType.oracle\" class=\"sub-tree\">\r\n            <li v-for=\"db in oracleDBList\" :key=\"db\" class=\"db-item\">\r\n              <span @click=\"selectDB(db)\">\r\n                <span class=\"leaf-icon\"></span> {{ db }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n        <li>\r\n          <span @click=\"toggleDBType('tibero')\" class=\"tree-node\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.tibero ? '-' : '+' }}</span> TIBERO\r\n          </span>\r\n          <ul v-if=\"expandedDBType.tibero\" class=\"sub-tree\">\r\n            <li v-for=\"db in tiberoDBList\" :key=\"db\" class=\"db-item\">\r\n              <span @click=\"selectDB(db)\">\r\n                <span class=\"leaf-icon\"></span> {{ db }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <!-- 중앙 차트 (트리 오른쪽에 오도록 설정) -->\r\n    <div class=\"chart-container\" v-if=\"selectedDB\">\r\n      <h3>{{ selectedDB }} - Metrics</h3>\r\n      <div class=\"charts-row\">\r\n        <div v-for=\"(metric, index) in metrics\" :key=\"metric\" class=\"metric-chart\">\r\n          <h4>{{ metric }}</h4>\r\n          <canvas :id=\"`chartRef_${index}`\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, nextTick, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  setup() {\r\n    const expandedDBType = ref({ oracle: false, tibero: false });\r\n    const selectedDB = ref(null);\r\n    const oracleDBList = ref([]);  // ORACLE DB 리스트\r\n    const tiberoDBList = ref([]);  // TIBERO DB 리스트\r\n    const metrics = ref([  // 사용할 지표 목록\r\n      'TRANSACTIONS', 'TOTAL_SESSION', 'ACTIVE_SESSION',\r\n      'BUFFER_NOWAIT_PCT', 'REDO_NOWAIT_PCT', 'BUFFER_HIT_PCT',\r\n      'LATCH_HIT_PCT', 'LIBRARY_HIT_PCT', 'SOFT_PARSE_PCT',\r\n      'EXECUTE_TO_PARSE_PCT', 'PARSE_CPU_TO_PARSE_ELAPSD', 'NON_PARSE_CPU',\r\n      'IN_MEMORY_SORT', 'DAILY_ARCH_CNT'\r\n    ]);\r\n    const dbData = ref([]);  // DB 데이터 저장\r\n\r\n    // DB 목록을 불러오는 함수\r\n    const fetchDbList = async () => {\r\n      try {\r\n        const response = await axios.get('/api/dailychk/db-list');\r\n        const dbList = response.data;\r\n        oracleDBList.value = dbList.ORACLE || [];\r\n        tiberoDBList.value = dbList.TIBERO || [];\r\n      } catch (error) {\r\n        console.error(\"DB 목록을 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    // DB 종류별 트리 토글\r\n    const toggleDBType = (type) => {\r\n      expandedDBType.value[type] = !expandedDBType.value[type];\r\n    };\r\n\r\n    // DB 선택 시 데이터 받아오기\r\n    const selectDB = async (dbName) => {\r\n      selectedDB.value = dbName;\r\n      await fetchDbData(dbName); // 데이터 불러오기\r\n      nextTick(() => {\r\n        renderCharts();\r\n      });\r\n    };\r\n\r\n    // ORACLE type 선택한 DB에 대한 데이터를 가져오는 함수\r\n    const fetchDbData = async (dbName) => {\r\n      console.log(\"Fetching data for DB:\", dbName); // 로그 추가\r\n      if (!dbName) {\r\n        console.error(\"Error: dbName is undefined or empty!\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.get(`/api/dailychk/${dbName}/oradata`);\r\n        dbData.value = response.data;\r\n        console.log(\"📌 API 응답 데이터:\", response.data);  // 값 출력\r\n      } catch (error) {\r\n        console.error(\"DB 데이터를 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    // 차트 렌더링 함수\r\n    const renderCharts = () => {\r\n      metrics.value.forEach((metric, index) => {\r\n        const canvas = document.getElementById(`chartRef_${index}`);\r\n        if (canvas) {\r\n          if (canvas.chart) {\r\n            canvas.chart.destroy();\r\n          }\r\n\r\n          // X축(시간), Y축(각 지표)의 값 추출\r\n          const labels = dbData.value.map(item => item.id.chkDate); // 날짜를 X축 레이블로 설정\r\n          const data = dbData.value.map(item => item[metric]); // 지표의 값을 Y축 데이터로 설정\r\n          console.log(\"📌 Chart 데이터:\", data);  // 값 출력\r\n          // 데이터가 없으면 차트를 그리지 않음\r\n          if (labels.length === 0 || data.length === 0) {\r\n            console.warn(`${metric} 데이터가 없습니다.`);\r\n            return;\r\n          }\r\n\r\n          // 차트 생성\r\n          const chart = new Chart(canvas, {\r\n            type: 'line',\r\n            data: {\r\n              labels,  // X축은 날짜\r\n              datasets: [\r\n                {\r\n                  label: `${metric}`,\r\n                  data: data,  // Y축은 해당 지표 값\r\n                  borderColor: 'blue',\r\n                  fill: false,\r\n                }\r\n              ]\r\n            },\r\n            options: {\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              width: 100,\r\n              height: 90,\r\n            }\r\n          });\r\n\r\n          // 차트를 DOM 요소에 저장\r\n          canvas.chart = chart;\r\n        }\r\n      });\r\n    };\r\n\r\n    onMounted(() => {\r\n      fetchDbList();\r\n    });\r\n\r\n    return {\r\n      expandedDBType,\r\n      selectedDB,\r\n      oracleDBList,\r\n      tiberoDBList,\r\n      metrics,\r\n      dbData,\r\n      toggleDBType,\r\n      selectDB\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 20px;\r\n}\r\n\r\n.db-tree {\r\n  width: 250px;\r\n}\r\n\r\n.chart-container {\r\n  flex-grow: 1;\r\n}\r\n\r\n.charts-row {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n}\r\n\r\n.metric-chart {\r\n  width: 400px;\r\n  height: 300px;\r\n}\r\n\r\n.tree-node {\r\n  cursor: pointer;\r\n}\r\n\r\n.sub-tree {\r\n  padding-left: 20px;\r\n}\r\n\r\n.leaf-icon {\r\n  margin-right: 8px;\r\n}\r\n\r\n.toggle-icon {\r\n  margin-right: 8px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}