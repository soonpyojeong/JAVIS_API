{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport axios from \"axios\";\nimport { Chart } from \"chart.js\";\nexport default {\n  data() {\n    return {\n      selectedDb: null,\n      tbList: [],\n      tablespaces: [],\n      searchQuery: \"\",\n      sortKey: \"tsName\",\n      sortOrder: 1,\n      showModal: false,\n      // 모달 표시 여부\n      showChart: false,\n      // 차트 표시 여부\n      recentData: [],\n      // 최근 3개월 데이터\n      selectedTsName: \"\",\n      // 선택된 테이블스페이스 이름\n      chartInstance: null // Chart.js 인스턴스\n    };\n  },\n  methods: {\n    fetchDbList() {\n      axios.get(\"/api/tb/list\").then(res => {\n        this.tbList = res.data;\n        if (this.tbList.length > 0) {\n          this.selectedDb = this.tbList[0];\n          this.fetchTablespaces(this.selectedDb);\n        }\n      }).catch(error => {\n        console.error(\"Error fetching DB list:\", error);\n      });\n    },\n    fetchTablespaces(dbName) {\n      axios.get(`/api/tb/${dbName}/tablespaces`).then(res => {\n        this.tablespaces = res.data || [];\n      }).catch(error => {\n        console.error(\"테이블스페이스 데이터 가져오기 실패:\", error);\n      });\n    },\n    fetchRecentData(selectedDb, tsName) {\n      if (!selectedDb || !tsName) {\n        console.error(\"selectedDb 또는 tsName이 유효하지 않습니다.\");\n        return;\n      }\n      axios.get(`/api/tb/${selectedDb}/${tsName}/recent`).then(res => {\n        this.recentData = res.data || [];\n        this.showModal = true; // 모달 열기\n      }).catch(error => {\n        console.error(\"최근 데이터 가져오기 실패:\", error);\n      });\n    },\n    closeModal() {\n      this.showModal = false;\n      this.showChart = false;\n\n      // 차트 인스턴스 제거\n      if (this.chartInstance) {\n        this.chartInstance.destroy();\n        this.chartInstance = null;\n      }\n    },\n    generateChartData() {\n      this.showChart = true;\n\n      // `recentData`를 기준으로 라벨과 데이터 준비\n      const labels = this.recentData.map(data => `${data.id.chkDate} ${data.id.chkTime}`);\n      const dataValues = this.recentData.map(data => data.usedRate);\n\n      // 기존 차트 제거 (중복 방지)\n      if (this.chartInstance) {\n        this.chartInstance.destroy();\n      }\n\n      // Chart.js 생성\n      const ctx = document.getElementById(\"lineChart\").getContext(\"2d\");\n      this.chartInstance = new Chart(ctx, {\n        type: \"line\",\n        data: {\n          labels: labels,\n          // x축 라벨\n          datasets: [{\n            label: \"Used Rate (%)\",\n            data: dataValues,\n            // y축 데이터\n            borderColor: \"rgba(75, 192, 192, 1)\",\n            backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n            tension: 0.4,\n            // 곡선의 부드러움\n            borderWidth: 2,\n            fill: true\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              display: true,\n              position: \"top\"\n            }\n          },\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: \"Check Date & Time\"\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: \"Used Rate (%)\"\n              },\n              min: 0,\n              max: 100\n            }\n          }\n        }\n      });\n    }\n  },\n  mounted() {\n    this.fetchDbList();\n  }\n};","map":{"version":3,"names":["axios","Chart","data","selectedDb","tbList","tablespaces","searchQuery","sortKey","sortOrder","showModal","showChart","recentData","selectedTsName","chartInstance","methods","fetchDbList","get","then","res","length","fetchTablespaces","catch","error","console","dbName","fetchRecentData","tsName","closeModal","destroy","generateChartData","labels","map","id","chkDate","chkTime","dataValues","usedRate","ctx","document","getElementById","getContext","type","datasets","label","borderColor","backgroundColor","tension","borderWidth","fill","options","responsive","plugins","legend","display","position","scales","x","title","text","y","min","max","mounted"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\TablespacesList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>{{ selectedDb }} DB - 테이블스페이스 리스트</h2>\r\n\r\n    <!-- DB 목록을 보여주는 드롭다운 -->\r\n    <select v-model=\"selectedDb\" @change=\"fetchTablespaces(selectedDb)\">\r\n      <option v-for=\"(db, index) in tbList\" :key=\"index\" :value=\"db\">\r\n        {{ db }}\r\n      </option>\r\n    </select>\r\n\r\n    <!-- 검색 입력 필드 -->\r\n    <input\r\n      v-model=\"searchQuery\"\r\n      type=\"text\"\r\n      placeholder=\"테이블스페이스 검색\"\r\n      style=\"margin-bottom: 10px; padding: 5px; width: 300px;\"\r\n    />\r\n\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th @click=\"sortData('id.tsName')\">Tablespace 이름</th>\r\n          <th @click=\"sortData('totalSize')\">총 크기 (MB)</th>\r\n          <th @click=\"sortData('usedSize')\">사용량 (MB)</th>\r\n          <th @click=\"sortData('freeSize')\">남은 크기 (MB)</th>\r\n          <th @click=\"sortData('usedRate')\">사용률 (%)</th>\r\n          <th @click=\"sortData('id.chkDate')\">체크 날짜</th>\r\n          <th @click=\"sortData('id.chkTime')\">체크 시간</th>\r\n          <th @click=\"sortData('autoExtensCntFile')\">자동 확장 파일 수</th>\r\n          <th @click=\"sortData('maxMbBytes')\">최대 MB 바이트</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr\r\n          v-for=\"ts in filteredTablespaces\"\r\n          :key=\"ts.id.tsName\"\r\n          @click=\"fetchRecentData(selectedDb, ts.id.tsName)\"\r\n        >\r\n          <td>{{ ts.id.tsName }}</td>\r\n          <td>{{ ts.totalSize }}</td>\r\n          <td>{{ ts.usedSize }}</td>\r\n          <td>{{ ts.freeSize }}</td>\r\n          <td>{{ ts.usedRate }}</td>\r\n          <td>{{ ts.id.chkDate }}</td>\r\n          <td>{{ ts.id.chkTime }}</td>\r\n          <td>{{ ts.autoExtensCntFile }}</td>\r\n          <td>{{ ts.maxMbBytes }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <p v-if=\"filteredTablespaces.length === 0\">검색 결과가 없습니다.</p>\r\n     <!-- 모달 -->\r\n     <div v-if=\"showModal\" class=\"modal-overlay\" @click.self=\"closeModal\">\r\n       <div class=\"modal-content\">\r\n         <h3>최근 3개월 데이터: {{ selectedTsName }}</h3>\r\n         <button class=\"close-btn\" @click=\"closeModal\">닫기</button>\r\n         <button class=\"chart-btn\" @click=\"generateChartData\">Line Chart 보기</button>\r\n\r\n         <!-- 차트 영역 -->\r\n         <canvas v-if=\"showChart\" id=\"lineChart\" width=\"400\" height=\"200\"></canvas>\r\n       </div>\r\n     </div>\r\n   </div>\r\n </template>\r\n\r\n <script>\r\n import axios from \"axios\";\r\n import { Chart } from \"chart.js\";\r\n\r\n export default {\r\n   data() {\r\n     return {\r\n       selectedDb: null,\r\n       tbList: [],\r\n       tablespaces: [],\r\n       searchQuery: \"\",\r\n       sortKey: \"tsName\",\r\n       sortOrder: 1,\r\n       showModal: false, // 모달 표시 여부\r\n       showChart: false, // 차트 표시 여부\r\n       recentData: [], // 최근 3개월 데이터\r\n       selectedTsName: \"\", // 선택된 테이블스페이스 이름\r\n       chartInstance: null, // Chart.js 인스턴스\r\n     };\r\n   },\r\n   methods: {\r\n     fetchDbList() {\r\n       axios\r\n         .get(\"/api/tb/list\")\r\n         .then((res) => {\r\n           this.tbList = res.data;\r\n           if (this.tbList.length > 0) {\r\n             this.selectedDb = this.tbList[0];\r\n             this.fetchTablespaces(this.selectedDb);\r\n           }\r\n         })\r\n         .catch((error) => {\r\n           console.error(\"Error fetching DB list:\", error);\r\n         });\r\n     },\r\n     fetchTablespaces(dbName) {\r\n       axios\r\n         .get(`/api/tb/${dbName}/tablespaces`)\r\n         .then((res) => {\r\n           this.tablespaces = res.data || [];\r\n         })\r\n         .catch((error) => {\r\n           console.error(\"테이블스페이스 데이터 가져오기 실패:\", error);\r\n         });\r\n     },\r\n     fetchRecentData(selectedDb, tsName) {\r\n       if (!selectedDb || !tsName) {\r\n         console.error(\"selectedDb 또는 tsName이 유효하지 않습니다.\");\r\n         return;\r\n       }\r\n\r\n       axios\r\n         .get(`/api/tb/${selectedDb}/${tsName}/recent`)\r\n         .then((res) => {\r\n           this.recentData = res.data || [];\r\n           this.showModal = true; // 모달 열기\r\n         })\r\n         .catch((error) => {\r\n           console.error(\"최근 데이터 가져오기 실패:\", error);\r\n         });\r\n     },\r\n     closeModal() {\r\n       this.showModal = false;\r\n       this.showChart = false;\r\n\r\n       // 차트 인스턴스 제거\r\n       if (this.chartInstance) {\r\n         this.chartInstance.destroy();\r\n         this.chartInstance = null;\r\n       }\r\n     },\r\n     generateChartData() {\r\n       this.showChart = true;\r\n\r\n       // `recentData`를 기준으로 라벨과 데이터 준비\r\n       const labels = this.recentData.map(\r\n         (data) => `${data.id.chkDate} ${data.id.chkTime}`\r\n       );\r\n       const dataValues = this.recentData.map((data) => data.usedRate);\r\n\r\n       // 기존 차트 제거 (중복 방지)\r\n       if (this.chartInstance) {\r\n         this.chartInstance.destroy();\r\n       }\r\n\r\n       // Chart.js 생성\r\n       const ctx = document.getElementById(\"lineChart\").getContext(\"2d\");\r\n       this.chartInstance = new Chart(ctx, {\r\n         type: \"line\",\r\n         data: {\r\n           labels: labels, // x축 라벨\r\n           datasets: [\r\n             {\r\n               label: \"Used Rate (%)\",\r\n               data: dataValues, // y축 데이터\r\n               borderColor: \"rgba(75, 192, 192, 1)\",\r\n               backgroundColor: \"rgba(75, 192, 192, 0.2)\",\r\n               tension: 0.4, // 곡선의 부드러움\r\n               borderWidth: 2,\r\n               fill: true,\r\n             },\r\n           ],\r\n         },\r\n         options: {\r\n           responsive: true,\r\n           plugins: {\r\n             legend: {\r\n               display: true,\r\n               position: \"top\",\r\n             },\r\n           },\r\n           scales: {\r\n             x: {\r\n               title: {\r\n                 display: true,\r\n                 text: \"Check Date & Time\",\r\n               },\r\n             },\r\n             y: {\r\n               title: {\r\n                 display: true,\r\n                 text: \"Used Rate (%)\",\r\n               },\r\n               min: 0,\r\n               max: 100,\r\n             },\r\n           },\r\n         },\r\n       });\r\n     },\r\n   },\r\n   mounted() {\r\n     this.fetchDbList();\r\n   },\r\n };\r\n </script>\r\n\r\n <style scoped>\r\n .modal-overlay {\r\n   position: fixed;\r\n   top: 0;\r\n   left: 0;\r\n   width: 100%;\r\n   height: 100%;\r\n   background: rgba(0, 0, 0, 0.5);\r\n   display: flex;\r\n   align-items: center;\r\n   justify-content: center;\r\n   z-index: 1000;\r\n }\r\n\r\n .modal-content {\r\n   background: white;\r\n   padding: 20px;\r\n   border-radius: 10px;\r\n   width: 80%;\r\n   max-width: 800px;\r\n   overflow-y: auto;\r\n }\r\n\r\n .chart-btn {\r\n   background: green;\r\n   color: white;\r\n   padding: 10px;\r\n   border: none;\r\n   cursor: pointer;\r\n   margin-bottom: 10px;\r\n }\r\n </style>\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}