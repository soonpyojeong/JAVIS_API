{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, nextTick, onMounted } from 'vue';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nexport default {\n  setup() {\n    const expandedDBType = ref({\n      oracle: false,\n      tibero: false\n    });\n    const selectedDB = ref(null);\n    const oracleDBList = ref([]); // ORACLE DB 리스트\n    const tiberoDBList = ref([]); // TIBERO DB 리스트\n    const metrics = ref([\n    // 사용할 지표 목록\n    {\n      key: 'transaTions',\n      label: 'Transactions'\n    }, {\n      key: 'totalSess',\n      label: 'Total Sessions'\n    }, {\n      key: 'activeSess',\n      label: 'Active Sessions'\n    }, {\n      key: 'bufferpct',\n      label: 'Buffer Nowait Pct'\n    }, {\n      key: 'reDoPct',\n      label: 'Redo Nowait Pct'\n    }, {\n      key: 'buffHit',\n      label: 'Buffer Hit Pct'\n    }, {\n      key: 'latchHitPct',\n      label: 'Latch Hit Pct'\n    }, {\n      key: 'libHitPct',\n      label: 'Library Hit Pct'\n    }, {\n      key: 'softPct',\n      label: 'Soft Parse Pct'\n    }, {\n      key: 'executTopct',\n      label: 'Execute to Parse Pct'\n    }, {\n      key: 'parseCpuElapsd',\n      label: 'Parse CPU to Elapsed'\n    }, {\n      key: 'nonParseCpu',\n      label: 'Non Parse CPU'\n    }, {\n      key: 'inMemorySort',\n      label: 'In Memory Sort'\n    }, {\n      key: 'dailyArchCht',\n      label: 'Daily Archive Count'\n    }]);\n    const dbData = ref([]); // DB 데이터 저장\n\n    // DB 목록을 불러오는 함수\n    const fetchDbList = async () => {\n      try {\n        const response = await axios.get('/api/dailychk/db-list');\n        const dbList = response.data;\n        oracleDBList.value = dbList.ORACLE || [];\n        tiberoDBList.value = dbList.TIBERO || [];\n      } catch (error) {\n        console.error(\"DB 목록을 불러오는 데 실패했습니다.\", error);\n      }\n    };\n\n    // DB 종류별 트리 토글\n    const toggleDBType = type => {\n      expandedDBType.value[type] = !expandedDBType.value[type];\n    };\n\n    // DB 선택 시 데이터 받아오기\n    const selectDB = async dbName => {\n      selectedDB.value = dbName;\n      await fetchDbData(dbName); // 데이터 불러오기\n      nextTick(() => {\n        renderCharts();\n      });\n    };\n\n    // ORACLE type 선택한 DB에 대한 데이터를 가져오는 함수\n    const fetchDbData = async dbName => {\n      console.log(\"Fetching data for DB:\", dbName); // 로그 추가\n      if (!dbName) {\n        console.error(\"Error: dbName is undefined or empty!\");\n        return;\n      }\n      try {\n        const response = await axios.get(`/api/dailychk/${dbName}/oradata`);\n        dbData.value = response.data;\n        console.log(\"📌 API 응답 데이터:\", response.data); // 값 출력\n      } catch (error) {\n        console.error(\"DB 데이터를 불러오는 데 실패했습니다.\", error);\n      }\n    };\n\n    // 차트 렌더링 함수\n    const renderCharts = () => {\n      metrics.value.forEach((metric, index) => {\n        const canvas = document.getElementById(`chartRef_${index}`);\n        if (canvas) {\n          if (canvas.chart) {\n            canvas.chart.destroy();\n          }\n\n          // chkDate를 X축으로 설정\n          const labels = dbData.value.map(item => item.id.chkDate);\n\n          // 해당 metric.key에 맞는 Y축 값 추출\n          const data = dbData.value.map(item => item[metric.key] !== undefined ? item[metric.key] : 0);\n\n          // 데이터가 없으면 차트를 그리지 않음\n          if (labels.length === 0 || data.length === 0) {\n            console.warn(`${metric.label} 데이터가 없습니다.`);\n            return;\n          }\n\n          // 차트 생성\n          const chart = new Chart(canvas, {\n            type: 'line',\n            data: {\n              labels,\n              datasets: [{\n                label: `${metric.label}`,\n                // UI에 표시할 이름\n                data: data,\n                borderColor: 'blue',\n                fill: false\n              }]\n            },\n            options: {\n              responsive: true,\n              maintainAspectRatio: false,\n              scales: {\n                x: {\n                  title: {\n                    display: true,\n                    text: 'Date'\n                  }\n                },\n                y: {\n                  title: {\n                    display: true,\n                    text: metric.label\n                  }\n                }\n              }\n            }\n          });\n\n          // 차트를 DOM 요소에 저장\n          canvas.chart = chart;\n        }\n      });\n    };\n    onMounted(() => {\n      fetchDbList();\n    });\n    return {\n      expandedDBType,\n      selectedDB,\n      oracleDBList,\n      tiberoDBList,\n      metrics,\n      dbData,\n      toggleDBType,\n      selectDB\n    };\n  }\n};","map":{"version":3,"names":["ref","nextTick","onMounted","axios","Chart","setup","expandedDBType","oracle","tibero","selectedDB","oracleDBList","tiberoDBList","metrics","key","label","dbData","fetchDbList","response","get","dbList","data","value","ORACLE","TIBERO","error","console","toggleDBType","type","selectDB","dbName","fetchDbData","renderCharts","log","forEach","metric","index","canvas","document","getElementById","chart","destroy","labels","map","item","id","chkDate","undefined","length","warn","datasets","borderColor","fill","options","responsive","maintainAspectRatio","scales","x","title","display","text","y"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DailyChk.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 왼쪽 DB 트리 구조 -->\r\n    <div class=\"db-tree\">\r\n      <ul>\r\n        <li>\r\n          <span @click=\"toggleDBType('oracle')\" class=\"tree-node\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.oracle ? '-' : '+' }}</span> ORACLE\r\n          </span>\r\n          <ul v-if=\"expandedDBType.oracle\" class=\"sub-tree\">\r\n            <li v-for=\"db in oracleDBList\" :key=\"db\" class=\"db-item\">\r\n              <span @click=\"selectDB(db)\">\r\n                <span class=\"leaf-icon\"></span> {{ db }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n        <li>\r\n          <span @click=\"toggleDBType('tibero')\" class=\"tree-node\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.tibero ? '-' : '+' }}</span> TIBERO\r\n          </span>\r\n          <ul v-if=\"expandedDBType.tibero\" class=\"sub-tree\">\r\n            <li v-for=\"db in tiberoDBList\" :key=\"db\" class=\"db-item\">\r\n              <span @click=\"selectDB(db)\">\r\n                <span class=\"leaf-icon\"></span> {{ db }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <!-- 중앙 차트 (트리 오른쪽에 오도록 설정) -->\r\n    <div class=\"chart-container\" v-if=\"selectedDB\">\r\n      <h3>{{ selectedDB }} - Metrics</h3>\r\n      <div class=\"charts-row\">\r\n        <div v-for=\"(metric, index) in metrics\" :key=\"metric\" class=\"metric-chart\">\r\n          <h4>{{ metric }}</h4>\r\n          <canvas :id=\"`chartRef_${index}`\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, nextTick, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  setup() {\r\n    const expandedDBType = ref({ oracle: false, tibero: false });\r\n    const selectedDB = ref(null);\r\n    const oracleDBList = ref([]);  // ORACLE DB 리스트\r\n    const tiberoDBList = ref([]);  // TIBERO DB 리스트\r\n    const metrics = ref([  // 사용할 지표 목록\r\n      { key: 'transaTions', label: 'Transactions' },\r\n        { key: 'totalSess', label: 'Total Sessions' },\r\n        { key: 'activeSess', label: 'Active Sessions' },\r\n        { key: 'bufferpct', label: 'Buffer Nowait Pct' },\r\n        { key: 'reDoPct', label: 'Redo Nowait Pct' },\r\n        { key: 'buffHit', label: 'Buffer Hit Pct' },\r\n        { key: 'latchHitPct', label: 'Latch Hit Pct' },\r\n        { key: 'libHitPct', label: 'Library Hit Pct' },\r\n        { key: 'softPct', label: 'Soft Parse Pct' },\r\n        { key: 'executTopct', label: 'Execute to Parse Pct' },\r\n        { key: 'parseCpuElapsd', label: 'Parse CPU to Elapsed' },\r\n        { key: 'nonParseCpu', label: 'Non Parse CPU' },\r\n        { key: 'inMemorySort', label: 'In Memory Sort' },\r\n        { key: 'dailyArchCht', label: 'Daily Archive Count' }\r\n      ]);\r\n    const dbData = ref([]);  // DB 데이터 저장\r\n\r\n    // DB 목록을 불러오는 함수\r\n    const fetchDbList = async () => {\r\n      try {\r\n        const response = await axios.get('/api/dailychk/db-list');\r\n        const dbList = response.data;\r\n        oracleDBList.value = dbList.ORACLE || [];\r\n        tiberoDBList.value = dbList.TIBERO || [];\r\n      } catch (error) {\r\n        console.error(\"DB 목록을 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    // DB 종류별 트리 토글\r\n    const toggleDBType = (type) => {\r\n      expandedDBType.value[type] = !expandedDBType.value[type];\r\n    };\r\n\r\n    // DB 선택 시 데이터 받아오기\r\n    const selectDB = async (dbName) => {\r\n      selectedDB.value = dbName;\r\n      await fetchDbData(dbName); // 데이터 불러오기\r\n      nextTick(() => {\r\n        renderCharts();\r\n      });\r\n    };\r\n\r\n    // ORACLE type 선택한 DB에 대한 데이터를 가져오는 함수\r\n    const fetchDbData = async (dbName) => {\r\n      console.log(\"Fetching data for DB:\", dbName); // 로그 추가\r\n      if (!dbName) {\r\n        console.error(\"Error: dbName is undefined or empty!\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.get(`/api/dailychk/${dbName}/oradata`);\r\n        dbData.value = response.data;\r\n        console.log(\"📌 API 응답 데이터:\", response.data);  // 값 출력\r\n      } catch (error) {\r\n        console.error(\"DB 데이터를 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    // 차트 렌더링 함수\r\n    const renderCharts = () => {\r\n      metrics.value.forEach((metric, index) => {\r\n        const canvas = document.getElementById(`chartRef_${index}`);\r\n        if (canvas) {\r\n          if (canvas.chart) {\r\n            canvas.chart.destroy();\r\n          }\r\n\r\n          // chkDate를 X축으로 설정\r\n          const labels = dbData.value.map(item => item.id.chkDate);\r\n\r\n          // 해당 metric.key에 맞는 Y축 값 추출\r\n          const data = dbData.value.map(item => item[metric.key] !== undefined ? item[metric.key] : 0);\r\n\r\n          // 데이터가 없으면 차트를 그리지 않음\r\n          if (labels.length === 0 || data.length === 0) {\r\n            console.warn(`${metric.label} 데이터가 없습니다.`);\r\n            return;\r\n          }\r\n\r\n          // 차트 생성\r\n          const chart = new Chart(canvas, {\r\n            type: 'line',\r\n            data: {\r\n              labels,\r\n              datasets: [\r\n                {\r\n                  label: `${metric.label}`,  // UI에 표시할 이름\r\n                  data: data,\r\n                  borderColor: 'blue',\r\n                  fill: false,\r\n                }\r\n              ]\r\n            },\r\n            options: {\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              scales: {\r\n                x: { title: { display: true, text: 'Date' } },\r\n                y: { title: { display: true, text: metric.label } }\r\n              }\r\n            }\r\n          });\r\n\r\n          // 차트를 DOM 요소에 저장\r\n          canvas.chart = chart;\r\n        }\r\n      });\r\n    };\r\n\r\n\r\n    onMounted(() => {\r\n      fetchDbList();\r\n    });\r\n\r\n    return {\r\n      expandedDBType,\r\n      selectedDB,\r\n      oracleDBList,\r\n      tiberoDBList,\r\n      metrics,\r\n      dbData,\r\n      toggleDBType,\r\n      selectDB\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 20px;\r\n}\r\n\r\n.db-tree {\r\n  width: 250px;\r\n}\r\n\r\n.chart-container {\r\n  flex-grow: 1;\r\n}\r\n\r\n.charts-row {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n}\r\n\r\n.metric-chart {\r\n  width: 400px;\r\n  height: 300px;\r\n}\r\n\r\n.tree-node {\r\n  cursor: pointer;\r\n}\r\n\r\n.sub-tree {\r\n  padding-left: 20px;\r\n}\r\n\r\n.leaf-icon {\r\n  margin-right: 8px;\r\n}\r\n\r\n.toggle-icon {\r\n  margin-right: 8px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}