{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      selectedTb: null,\n      // 선택된 DB 이름\n      tbList: [],\n      // DB 목록\n      tablespaces: [],\n      // 테이블스페이스 데이터\n      searchQuery: \"\",\n      // 검색어\n      sortKey: \"tsName\",\n      // 정렬 키\n      sortOrder: 1 // 정렬 순서 (1: 오름차순, -1: 내림차순)\n    };\n  },\n  computed: {\n    filteredTablespaces() {\n      console.log(\"검색어:\", this.searchQuery); // 검색어가 어떻게 입력되는지 확인\n      let result = this.tablespaces.filter(ts => ts.tsName && ts.tsName.toLowerCase().includes(this.searchQuery.toLowerCase()) // ts.tsName이 undefined가 아니면 검색\n      );\n      console.log(\"filteredTablespaces:\", result); // 필터링된 데이터 확인\n      return result.sort((a, b) => {\n        const aValue = a[this.sortKey];\n        const bValue = b[this.sortKey];\n\n        // 숫자 비교 시 안전하게 처리\n        if (aValue === undefined) return 1 * this.sortOrder;\n        if (bValue === undefined) return -1 * this.sortOrder;\n        if (aValue < bValue) return -1 * this.sortOrder;\n        if (aValue > bValue) return 1 * this.sortOrder;\n        return 0;\n      });\n    }\n  },\n  methods: {\n    // DB 목록을 가져오는 함수\n    fetchDbList() {\n      axios.get(\"/api/tb/list\").then(response => {\n        this.tbList = response.data;\n        if (this.tbList.length > 0) {\n          this.selectedTb = this.tbList[0]; // 첫 번째 DB를 선택하도록 설정\n          this.fetchTablespaces(this.selectedTb); // 초기 DB 선택 시 테이블스페이스도 가져옴\n        }\n      }).catch(error => {\n        console.error(\"Error fetching DB list:\", error);\n      });\n    },\n    // 선택된 DB에 해당하는 테이블스페이스 데이터 가져오는 함수\n    fetchTablespaces(tbName) {\n      this.selectedTb = tbName;\n      this.tablespaces = []; // 이전 데이터를 초기화\n\n      axios.get(`/api/tb/${dbName}/tablespaces`).then(res => {\n        console.log(\"서버에서 받은 데이터:\", res.data); // 서버에서 받은 데이터 확인\n        if (Array.isArray(res.data) && res.data.length > 0) {\n          this.tablespaces = res.data; // 받은 데이터를 tablespaces에 할당\n          console.log(\"tablespaces에 저장된 데이터:\", this.tablespaces);\n        } else {\n          console.log(\"받은 데이터가 비어있거나 배열 형식이 아닙니다.\");\n        }\n      }).catch(error => {\n        console.error(\"테이블스페이스 데이터 가져오기 실패:\", error);\n      });\n    },\n    // 테이블 데이터 정렬\n    sortData(key) {\n      if (this.sortKey === key) {\n        this.sortOrder *= -1; // 동일 키를 클릭하면 정렬 순서 변경\n      } else {\n        this.sortKey = key; // 새 키로 정렬\n        this.sortOrder = 1;\n      }\n    }\n  },\n  mounted() {\n    this.fetchDbList(); // 컴포넌트가 마운트되면 DB 목록을 가져옵니다.\n  }\n};","map":{"version":3,"names":["axios","data","selectedTb","tbList","tablespaces","searchQuery","sortKey","sortOrder","computed","filteredTablespaces","console","log","result","filter","ts","tsName","toLowerCase","includes","sort","a","b","aValue","bValue","undefined","methods","fetchDbList","get","then","response","length","fetchTablespaces","catch","error","tbName","dbName","res","Array","isArray","sortData","key","mounted"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\TablespacesList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>{{ selectedTb }} - 테이블스페이스 리스트</h2>\r\n\r\n    <!-- DB 목록을 보여주는 드롭다운 -->\r\n    <select v-model=\"selectedTb\" @change=\"fetchTablespaces(selectedTb)\">\r\n      <option v-for=\"(tb, index) in tbList\" :key=\"index\" :value=\"tb\">\r\n        {{ tb }}\r\n      </option>\r\n    </select>\r\n\r\n    <!-- 검색 입력 필드 -->\r\n    <input\r\n      v-model=\"searchQuery\"\r\n      type=\"text\"\r\n      placeholder=\"테이블스페이스 검색\"\r\n      style=\"margin-bottom: 10px; padding: 5px; width: 300px;\"\r\n    />\r\n\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th @click=\"sortData('tsName')\">Tablespace 이름</th>\r\n          <th @click=\"sortData('totalSize')\">총 크기 (MB)</th>\r\n          <th @click=\"sortData('usedSize')\">사용량 (MB)</th>\r\n          <th @click=\"sortData('freeSize')\">남은 크기 (MB)</th>\r\n          <th @click=\"sortData('usedRate')\">사용률 (%)</th>\r\n          <th @click=\"sortData('chkDate')\">체크 날짜</th>\r\n          <th @click=\"sortData('chkTime')\">체크 시간</th>\r\n          <th @click=\"sortData('autoExtensCntFile')\">자동 확장 파일 수</th>\r\n          <th @click=\"sortData('maxMbBytes')\">최대 MB 바이트</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(ts, index) in filteredTablespaces\" :key=\"index\">\r\n          <td>{{ ts.tsName }}</td>\r\n          <td>{{ ts.totalSize }}</td>\r\n          <td>{{ ts.usedSize }}</td>\r\n          <td>{{ ts.freeSize }}</td>\r\n          <td>{{ ts.usedRate }}</td>\r\n          <td>{{ ts.chkDate }}</td>\r\n          <td>{{ ts.chkTime }}</td>\r\n          <td>{{ ts.autoExtensCntFile }}</td>\r\n          <td>{{ ts.maxMbBytes }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <p v-if=\"filteredTablespaces.length === 0\">검색 결과가 없습니다.</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedTb: null, // 선택된 DB 이름\r\n      tbList: [], // DB 목록\r\n      tablespaces: [], // 테이블스페이스 데이터\r\n      searchQuery: \"\", // 검색어\r\n      sortKey: \"tsName\", // 정렬 키\r\n      sortOrder: 1, // 정렬 순서 (1: 오름차순, -1: 내림차순)\r\n    };\r\n  },\r\n  computed: {\r\n    filteredTablespaces() {\r\n      console.log(\"검색어:\", this.searchQuery); // 검색어가 어떻게 입력되는지 확인\r\n      let result = this.tablespaces.filter((ts) =>\r\n        ts.tsName && ts.tsName.toLowerCase().includes(this.searchQuery.toLowerCase()) // ts.tsName이 undefined가 아니면 검색\r\n      );\r\n      console.log(\"filteredTablespaces:\", result); // 필터링된 데이터 확인\r\n      return result.sort((a, b) => {\r\n        const aValue = a[this.sortKey];\r\n        const bValue = b[this.sortKey];\r\n\r\n        // 숫자 비교 시 안전하게 처리\r\n        if (aValue === undefined) return 1 * this.sortOrder;\r\n        if (bValue === undefined) return -1 * this.sortOrder;\r\n\r\n        if (aValue < bValue) return -1 * this.sortOrder;\r\n        if (aValue > bValue) return 1 * this.sortOrder;\r\n        return 0;\r\n      });\r\n    }\r\n  },\r\n  methods: {\r\n    // DB 목록을 가져오는 함수\r\n    fetchDbList() {\r\n      axios\r\n        .get(\"/api/tb/list\")\r\n        .then((response) => {\r\n          this.tbList = response.data;\r\n          if (this.tbList.length > 0) {\r\n            this.selectedTb = this.tbList[0]; // 첫 번째 DB를 선택하도록 설정\r\n            this.fetchTablespaces(this.selectedTb); // 초기 DB 선택 시 테이블스페이스도 가져옴\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching DB list:\", error);\r\n        });\r\n    },\r\n\r\n    // 선택된 DB에 해당하는 테이블스페이스 데이터 가져오는 함수\r\n    fetchTablespaces(tbName) {\r\n      this.selectedTb = tbName;\r\n      this.tablespaces = []; // 이전 데이터를 초기화\r\n\r\n      axios.get(`/api/tb/${dbName}/tablespaces`)\r\n        .then((res) => {\r\n          console.log(\"서버에서 받은 데이터:\", res.data); // 서버에서 받은 데이터 확인\r\n          if (Array.isArray(res.data) && res.data.length > 0) {\r\n            this.tablespaces = res.data; // 받은 데이터를 tablespaces에 할당\r\n            console.log(\"tablespaces에 저장된 데이터:\", this.tablespaces);\r\n          } else {\r\n            console.log(\"받은 데이터가 비어있거나 배열 형식이 아닙니다.\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"테이블스페이스 데이터 가져오기 실패:\", error);\r\n        });\r\n    }\r\n,\r\n\r\n    // 테이블 데이터 정렬\r\n    sortData(key) {\r\n      if (this.sortKey === key) {\r\n        this.sortOrder *= -1; // 동일 키를 클릭하면 정렬 순서 변경\r\n      } else {\r\n        this.sortKey = key; // 새 키로 정렬\r\n        this.sortOrder = 1;\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchDbList(); // 컴포넌트가 마운트되면 DB 목록을 가져옵니다.\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}