{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, nextTick, onMounted } from 'vue';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nexport default {\n  setup() {\n    const expandedDBType = ref({\n      oracle: false,\n      tibero: false\n    });\n    const selectedDB = ref(null);\n    const selectedDBType = ref(null); // 선택된 DB 타입 (ORACLE 또는 TIBERO)\n\n    const oracleDBList = ref([]); // ORACLE DB 리스트\n    const tiberoDBList = ref([]); // TIBERO DB 리스트\n\n    // ORACLE 고정 지표\n    const fixedOraMetrics = ['totalSess', 'activeSess'];\n    const metrics = ref([\n    // 사용할 지표 목록 (ORACLE용)\n    {\n      key: 'transaTions',\n      label: 'Transactions'\n    }, {\n      key: 'totalSess',\n      label: 'Total Sessions'\n    }, {\n      key: 'activeSess',\n      label: 'Active Sessions'\n    }, {\n      key: 'bufferpct',\n      label: 'Buffer Nowait Pct'\n    }, {\n      key: 'reDoPct',\n      label: 'Redo Nowait Pct'\n    }, {\n      key: 'buffHit',\n      label: 'Buffer Hit Pct'\n    }, {\n      key: 'latchHitPct',\n      label: 'Latch Hit Pct'\n    }, {\n      key: 'libHitPct',\n      label: 'Library Hit Pct'\n    }, {\n      key: 'softPct',\n      label: 'Soft Parse Pct'\n    }, {\n      key: 'executTopct',\n      label: 'Execute to Parse Pct'\n    }, {\n      key: 'parseCpuElapsd',\n      label: 'Parse CPU to Elapsed'\n    }, {\n      key: 'nonParseCpu',\n      label: 'Non Parse CPU'\n    }, {\n      key: 'inMemorySort',\n      label: 'In Memory Sort'\n    }, {\n      key: 'dailyArchCht',\n      label: 'Daily Archive Count'\n    }]);\n    const tbmetrics = ref([\n    // 사용할 지표 목록 (TIBERO용)\n    {\n      key: 'maxlSess',\n      label: 'Max Sessions'\n    }, {\n      key: 'totalSess',\n      label: 'Total Sessions'\n    }, {\n      key: 'runSess',\n      label: 'Active Sessions'\n    }, {\n      key: 'recSess',\n      label: 'Recover Session'\n    }, {\n      key: 'tsm',\n      label: 'TSM'\n    }, {\n      key: 'wpm',\n      label: 'WPM'\n    }, {\n      key: 'pgaSize',\n      label: 'PGA Size'\n    }, {\n      key: 'wpmPgadiff',\n      label: 'WPM PGA DIFF'\n    }, {\n      key: 'shardMem',\n      label: 'SHARED POOL MEMORY'\n    }, {\n      key: 'phyRead',\n      label: 'PHYSICAL READ'\n    }, {\n      key: 'logicRead',\n      label: 'LOGICAL READ'\n    }, {\n      key: 'buffHit',\n      label: 'BUFFER CACHE HIT'\n    }, {\n      key: 'libHit',\n      label: 'LIBRARY CACHE HIT'\n    }, {\n      key: 'dictHit',\n      label: 'DICTIONARY CACHE HIT'\n    }]);\n    const dbData = ref([]); // ORACLE DB 데이터\n    const tbdbData = ref([]); // TIBERO DB 데이터\n    const metricsToUse = ref(metrics.value); // 사용될 지표 목록 (동적으로 변경될 예정)\n\n    // TIBERO에서 고정된 지표들\n    const fixedMetrics = ['maxlSess', 'totalSess', 'runSess'];\n\n    // TIBERO에서 나머지 지표들 (랜덤으로 차트 생성)\n    const randomMetrics = ref([]);\n\n    // ORACLE에서 사용할 지표들\n    const oracleMetrics = ref([]);\n\n    // DB 목록을 불러오는 함수\n    const fetchDbList = async () => {\n      try {\n        const response = await axios.get('/api/dailychk/db-list');\n        const dbList = response.data;\n        oracleDBList.value = dbList.ORACLE || [];\n        tiberoDBList.value = dbList.TIBERO || [];\n      } catch (error) {\n        console.error(\"DB 목록을 불러오는 데 실패했습니다.\", error);\n      }\n    };\n\n    // DB 종류별 트리 토글\n    const toggleDBType = type => {\n      expandedDBType.value[type] = !expandedDBType.value[type];\n    };\n\n    // DB 선택 시 데이터 받아오기\n    const selectDB = async (instanceName, dbType) => {\n      selectedDB.value = instanceName;\n      selectedDBType.value = dbType; // DB 타입 저장\n\n      if (dbType === 'oracle') {\n        await fetchDbData(instanceName); // ORACLE 데이터 가져오기\n        metricsToUse.value = metrics.value; // ORACLE 지표 목록\n        oracleMetrics.value = metrics.value; // ORACLE에서 사용할 지표 목록\n        randomMetrics.value = []; // TIBERO 고유 차트 지표 없애기\n      } else if (dbType === 'tibero') {\n        await fetchTbDbData(instanceName); // TIBERO 데이터 가져오기\n        metricsToUse.value = tbmetrics.value; // TIBERO 지표 목록\n        randomMetrics.value = tbmetrics.value.filter(metric => !fixedMetrics.includes(metric.key)); // 고정 지표 제외\n        oracleMetrics.value = []; // ORACLE 고유 차트 지표 없애기\n      }\n      nextTick(() => {\n        renderCharts(); // 차트 렌더링\n      });\n    };\n\n    // ORACLE DB 데이터 가져오는 함수\n    const fetchDbData = async instanceName => {\n      try {\n        const response = await axios.get(`/api/dailychk/${instanceName}/oradata`);\n        dbData.value = response.data;\n      } catch (error) {\n        console.error(\"ORACLE DB 데이터를 불러오는 데 실패했습니다.\", error);\n      }\n    };\n\n    // TIBERO DB 데이터 가져오는 함수\n    const fetchTbDbData = async instanceName => {\n      try {\n        const response = await axios.get(`/api/dailychk/${instanceName}/tbdata`);\n        tbdbData.value = response.data;\n      } catch (error) {\n        console.error(\"TIBERO DB 데이터를 불러오는 데 실패했습니다.\", error);\n      }\n    };\n\n    // 차트 렌더링 함수\n    const getRandomPastelColor = () => {\n      const hue = Math.floor(Math.random() * 360);\n      const saturation = 70 + Math.random() * 30;\n      const lightness = 70 + Math.random() * 10;\n      return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n    };\n    const renderCharts = () => {\n      if (selectedDBType.value === 'oracle') {\n        renderOracleCharts();\n      } else if (selectedDBType.value === 'tibero') {\n        renderTiberoFixedChart();\n        renderRandomTbCharts();\n      }\n    };\n\n    // ORACLE 차트 그리기\n    const renderOracleCharts = () => {\n      // 고정된 차트\n      const fixedChartCtx = document.getElementById('oracleFixedChart').getContext('2d');\n      const fixedChart = new Chart(fixedChartCtx, {\n        type: 'line',\n        data: {\n          labels: dbData.value.map(item => item.time),\n          datasets: [{\n            label: 'Total Sessions',\n            data: dbData.value.map(item => item.totalSess),\n            borderColor: getRandomPastelColor(),\n            fill: false\n          }, {\n            label: 'Active Sessions',\n            data: dbData.value.map(item => item.activeSess),\n            borderColor: getRandomPastelColor(),\n            fill: false\n          }]\n        }\n      });\n\n      // 나머지 차트들\n      metricsToUse.value.forEach(metric => {\n        const metricData = dbData.value.map(item => item[metric.key]);\n        const chartId = `oracleChart_${metric.key}`;\n        const chartCtx = document.getElementById(chartId).getContext('2d');\n        new Chart(chartCtx, {\n          type: 'line',\n          data: {\n            labels: dbData.value.map(item => item.time),\n            datasets: [{\n              label: metric.label,\n              data: metricData,\n              borderColor: getRandomPastelColor(),\n              fill: false\n            }]\n          }\n        });\n      });\n    };\n\n    // TIBERO 고정 차트 그리기\n    const renderTiberoFixedChart = () => {\n      const fixedChartCtx = document.getElementById('tiberoFixedChart').getContext('2d');\n      const fixedChart = new Chart(fixedChartCtx, {\n        type: 'line',\n        data: {\n          labels: tbdbData.value.map(item => item.time),\n          datasets: [{\n            label: 'Max Sessions',\n            data: tbdbData.value.map(item => item.maxlSess),\n            borderColor: getRandomPastelColor(),\n            fill: false\n          }, {\n            label: 'Total Sessions',\n            data: tbdbData.value.map(item => item.totalSess),\n            borderColor: getRandomPastelColor(),\n            fill: false\n          }, {\n            label: 'Active Sessions',\n            data: tbdbData.value.map(item => item.runSess),\n            borderColor: getRandomPastelColor(),\n            fill: false\n          }]\n        }\n      });\n    };\n\n    // TIBERO 나머지 차트 그리기\n    const renderRandomTbCharts = () => {\n      randomMetrics.value.forEach(metric => {\n        const metricData = tbdbData.value.map(item => item[metric.key]);\n        const chartId = `chartRef_${metric.key}`;\n        const chartCtx = document.getElementById(chartId).getContext('2d');\n        new Chart(chartCtx, {\n          type: 'line',\n          data: {\n            labels: tbdbData.value.map(item => item.time),\n            datasets: [{\n              label: metric.label,\n              data: metricData,\n              borderColor: getRandomPastelColor(),\n              fill: false\n            }]\n          }\n        });\n      });\n    };\n    onMounted(() => {\n      fetchDbList(); // DB 목록 불러오기\n    });\n    return {\n      expandedDBType,\n      selectedDB,\n      selectedDBType,\n      oracleDBList,\n      tiberoDBList,\n      metrics,\n      tbmetrics,\n      dbData,\n      tbdbData,\n      randomMetrics,\n      oracleMetrics,\n      toggleDBType,\n      selectDB\n    };\n  }\n};","map":{"version":3,"names":["ref","nextTick","onMounted","axios","Chart","setup","expandedDBType","oracle","tibero","selectedDB","selectedDBType","oracleDBList","tiberoDBList","fixedOraMetrics","metrics","key","label","tbmetrics","dbData","tbdbData","metricsToUse","value","fixedMetrics","randomMetrics","oracleMetrics","fetchDbList","response","get","dbList","data","ORACLE","TIBERO","error","console","toggleDBType","type","selectDB","instanceName","dbType","fetchDbData","fetchTbDbData","filter","metric","includes","renderCharts","getRandomPastelColor","hue","Math","floor","random","saturation","lightness","renderOracleCharts","renderTiberoFixedChart","renderRandomTbCharts","fixedChartCtx","document","getElementById","getContext","fixedChart","labels","map","item","time","datasets","totalSess","borderColor","fill","activeSess","forEach","metricData","chartId","chartCtx","maxlSess","runSess"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DailyChk.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 왼쪽 DB 트리 구조 -->\r\n    <div class=\"db-tree\">\r\n      <ul>\r\n        <li>\r\n          <span @click=\"toggleDBType('oracle')\" class=\"tree-node oracle\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.oracle ? '-' : '+' }}</span> ORACLE\r\n          </span>\r\n          <ul v-if=\"expandedDBType.oracle\" class=\"sub-tree\">\r\n            <li v-for=\"instance in oracleDBList\" :key=\"instance\" class=\"db-item\" :class=\"{ selected: selectedDB === instance }\">\r\n              <span @click=\"selectDB(instance, 'oracle')\">\r\n                <span class=\"leaf-icon\"></span> {{ instance }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n        <li>\r\n          <span @click=\"toggleDBType('tibero')\" class=\"tree-node tibero\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.tibero ? '-' : '+' }}</span> TIBERO\r\n          </span>\r\n          <ul v-if=\"expandedDBType.tibero\" class=\"sub-tree\">\r\n            <li v-for=\"instance in tiberoDBList\" :key=\"instance\" class=\"db-item\" :class=\"{ selected: selectedDB === instance }\">\r\n              <span @click=\"selectDB(instance, 'tibero')\">\r\n                <span class=\"leaf-icon\"></span> {{ instance }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <!-- 차트 영역 -->\r\n    <div class=\"chart-container\">\r\n      <div class=\"charts-wrapper\">\r\n        <template v-if=\"selectedDB && selectedDBType === 'oracle'\">\r\n          <!-- ORACLE 고정 지표 차트 -->\r\n          <div class=\"metric-chart\">\r\n            <canvas id=\"oracleFixedChart\"></canvas>\r\n          </div>\r\n          <!-- 나머지 ORACLE 차트들 -->\r\n          <div v-for=\"(metric, index) in oracleMetrics\" :key=\"'oracle_' + index\" class=\"metric-chart\">\r\n            <canvas :id=\"'oracleChart_' + index\"></canvas>\r\n          </div>\r\n        </template>\r\n\r\n        <template v-if=\"selectedDB && selectedDBType === 'tibero'\">\r\n          <!-- TIBERO 고정 지표 차트 -->\r\n          <div class=\"metric-chart\">\r\n            <canvas id=\"tiberoFixedChart\"></canvas>\r\n          </div>\r\n          <!-- 나머지 랜덤 차트들 -->\r\n          <div v-for=\"(metric, index) in randomMetrics\" :key=\"index\" class=\"metric-chart\">\r\n            <canvas :id=\"'chartRef_' + index\"></canvas>\r\n          </div>\r\n        </template>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, nextTick, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  setup() {\r\n    const expandedDBType = ref({ oracle: false, tibero: false });\r\n    const selectedDB = ref(null);\r\n    const selectedDBType = ref(null); // 선택된 DB 타입 (ORACLE 또는 TIBERO)\r\n\r\n    const oracleDBList = ref([]);  // ORACLE DB 리스트\r\n    const tiberoDBList = ref([]);  // TIBERO DB 리스트\r\n\r\n    // ORACLE 고정 지표\r\n    const fixedOraMetrics = ['totalSess', 'activeSess'];\r\n\r\n    const metrics = ref([  // 사용할 지표 목록 (ORACLE용)\r\n      { key: 'transaTions', label: 'Transactions' },\r\n      { key: 'totalSess', label: 'Total Sessions' },\r\n      { key: 'activeSess', label: 'Active Sessions' },\r\n      { key: 'bufferpct', label: 'Buffer Nowait Pct' },\r\n      { key: 'reDoPct', label: 'Redo Nowait Pct' },\r\n      { key: 'buffHit', label: 'Buffer Hit Pct' },\r\n      { key: 'latchHitPct', label: 'Latch Hit Pct' },\r\n      { key: 'libHitPct', label: 'Library Hit Pct' },\r\n      { key: 'softPct', label: 'Soft Parse Pct' },\r\n      { key: 'executTopct', label: 'Execute to Parse Pct' },\r\n      { key: 'parseCpuElapsd', label: 'Parse CPU to Elapsed' },\r\n      { key: 'nonParseCpu', label: 'Non Parse CPU' },\r\n      { key: 'inMemorySort', label: 'In Memory Sort' },\r\n      { key: 'dailyArchCht', label: 'Daily Archive Count' }\r\n    ]);\r\n\r\n    const tbmetrics = ref([  // 사용할 지표 목록 (TIBERO용)\r\n      { key: 'maxlSess', label: 'Max Sessions' },\r\n      { key: 'totalSess', label: 'Total Sessions' },\r\n      { key: 'runSess', label: 'Active Sessions' },\r\n      { key: 'recSess', label: 'Recover Session' },\r\n      { key: 'tsm', label: 'TSM' },\r\n      { key: 'wpm', label: 'WPM' },\r\n      { key: 'pgaSize', label: 'PGA Size' },\r\n      { key: 'wpmPgadiff', label: 'WPM PGA DIFF' },\r\n      { key: 'shardMem', label: 'SHARED POOL MEMORY' },\r\n      { key: 'phyRead', label: 'PHYSICAL READ' },\r\n      { key: 'logicRead', label: 'LOGICAL READ' },\r\n      { key: 'buffHit', label: 'BUFFER CACHE HIT' },\r\n      { key: 'libHit', label: 'LIBRARY CACHE HIT' },\r\n      { key: 'dictHit', label: 'DICTIONARY CACHE HIT' }\r\n    ]);\r\n\r\n    const dbData = ref([]);  // ORACLE DB 데이터\r\n    const tbdbData = ref([]);  // TIBERO DB 데이터\r\n    const metricsToUse = ref(metrics.value);  // 사용될 지표 목록 (동적으로 변경될 예정)\r\n\r\n    // TIBERO에서 고정된 지표들\r\n    const fixedMetrics = ['maxlSess', 'totalSess', 'runSess'];\r\n\r\n    // TIBERO에서 나머지 지표들 (랜덤으로 차트 생성)\r\n    const randomMetrics = ref([]);\r\n\r\n    // ORACLE에서 사용할 지표들\r\n    const oracleMetrics = ref([]);\r\n\r\n    // DB 목록을 불러오는 함수\r\n    const fetchDbList = async () => {\r\n      try {\r\n        const response = await axios.get('/api/dailychk/db-list');\r\n        const dbList = response.data;\r\n        oracleDBList.value = dbList.ORACLE || [];\r\n        tiberoDBList.value = dbList.TIBERO || [];\r\n      } catch (error) {\r\n        console.error(\"DB 목록을 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    // DB 종류별 트리 토글\r\n    const toggleDBType = (type) => {\r\n      expandedDBType.value[type] = !expandedDBType.value[type];\r\n    };\r\n\r\n    // DB 선택 시 데이터 받아오기\r\n    const selectDB = async (instanceName, dbType) => {\r\n      selectedDB.value = instanceName;\r\n      selectedDBType.value = dbType; // DB 타입 저장\r\n\r\n      if (dbType === 'oracle') {\r\n        await fetchDbData(instanceName); // ORACLE 데이터 가져오기\r\n        metricsToUse.value = metrics.value; // ORACLE 지표 목록\r\n        oracleMetrics.value = metrics.value; // ORACLE에서 사용할 지표 목록\r\n        randomMetrics.value = []; // TIBERO 고유 차트 지표 없애기\r\n      } else if (dbType === 'tibero') {\r\n        await fetchTbDbData(instanceName); // TIBERO 데이터 가져오기\r\n        metricsToUse.value = tbmetrics.value; // TIBERO 지표 목록\r\n        randomMetrics.value = tbmetrics.value.filter(metric => !fixedMetrics.includes(metric.key)); // 고정 지표 제외\r\n        oracleMetrics.value = []; // ORACLE 고유 차트 지표 없애기\r\n      }\r\n\r\n      nextTick(() => {\r\n        renderCharts(); // 차트 렌더링\r\n      });\r\n    };\r\n\r\n    // ORACLE DB 데이터 가져오는 함수\r\n    const fetchDbData = async (instanceName) => {\r\n      try {\r\n        const response = await axios.get(`/api/dailychk/${instanceName}/oradata`);\r\n        dbData.value = response.data;\r\n      } catch (error) {\r\n        console.error(\"ORACLE DB 데이터를 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    // TIBERO DB 데이터 가져오는 함수\r\n    const fetchTbDbData = async (instanceName) => {\r\n      try {\r\n        const response = await axios.get(`/api/dailychk/${instanceName}/tbdata`);\r\n        tbdbData.value = response.data;\r\n      } catch (error) {\r\n        console.error(\"TIBERO DB 데이터를 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    // 차트 렌더링 함수\r\n    const getRandomPastelColor = () => {\r\n      const hue = Math.floor(Math.random() * 360);\r\n      const saturation = 70 + Math.random() * 30;\r\n      const lightness = 70 + Math.random() * 10;\r\n      return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\r\n    };\r\n\r\n    const renderCharts = () => {\r\n      if (selectedDBType.value === 'oracle') {\r\n        renderOracleCharts();\r\n      } else if (selectedDBType.value === 'tibero') {\r\n        renderTiberoFixedChart();\r\n        renderRandomTbCharts();\r\n      }\r\n    };\r\n\r\n    // ORACLE 차트 그리기\r\n    const renderOracleCharts = () => {\r\n      // 고정된 차트\r\n      const fixedChartCtx = document.getElementById('oracleFixedChart').getContext('2d');\r\n      const fixedChart = new Chart(fixedChartCtx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: dbData.value.map(item => item.time),\r\n          datasets: [\r\n            {\r\n              label: 'Total Sessions',\r\n              data: dbData.value.map(item => item.totalSess),\r\n              borderColor: getRandomPastelColor(),\r\n              fill: false\r\n            },\r\n            {\r\n              label: 'Active Sessions',\r\n              data: dbData.value.map(item => item.activeSess),\r\n              borderColor: getRandomPastelColor(),\r\n              fill: false\r\n            }\r\n          ]\r\n        }\r\n      });\r\n\r\n      // 나머지 차트들\r\n      metricsToUse.value.forEach((metric) => {\r\n        const metricData = dbData.value.map(item => item[metric.key]);\r\n        const chartId = `oracleChart_${metric.key}`;\r\n        const chartCtx = document.getElementById(chartId).getContext('2d');\r\n        new Chart(chartCtx, {\r\n          type: 'line',\r\n          data: {\r\n            labels: dbData.value.map(item => item.time),\r\n            datasets: [\r\n              {\r\n                label: metric.label,\r\n                data: metricData,\r\n                borderColor: getRandomPastelColor(),\r\n                fill: false\r\n              }\r\n            ]\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n    // TIBERO 고정 차트 그리기\r\n    const renderTiberoFixedChart = () => {\r\n      const fixedChartCtx = document.getElementById('tiberoFixedChart').getContext('2d');\r\n      const fixedChart = new Chart(fixedChartCtx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: tbdbData.value.map(item => item.time),\r\n          datasets: [\r\n            {\r\n              label: 'Max Sessions',\r\n              data: tbdbData.value.map(item => item.maxlSess),\r\n              borderColor: getRandomPastelColor(),\r\n              fill: false\r\n            },\r\n            {\r\n              label: 'Total Sessions',\r\n              data: tbdbData.value.map(item => item.totalSess),\r\n              borderColor: getRandomPastelColor(),\r\n              fill: false\r\n            },\r\n            {\r\n              label: 'Active Sessions',\r\n              data: tbdbData.value.map(item => item.runSess),\r\n              borderColor: getRandomPastelColor(),\r\n              fill: false\r\n            }\r\n          ]\r\n        }\r\n      });\r\n    };\r\n\r\n    // TIBERO 나머지 차트 그리기\r\n    const renderRandomTbCharts = () => {\r\n      randomMetrics.value.forEach((metric) => {\r\n        const metricData = tbdbData.value.map(item => item[metric.key]);\r\n        const chartId = `chartRef_${metric.key}`;\r\n        const chartCtx = document.getElementById(chartId).getContext('2d');\r\n        new Chart(chartCtx, {\r\n          type: 'line',\r\n          data: {\r\n            labels: tbdbData.value.map(item => item.time),\r\n            datasets: [\r\n              {\r\n                label: metric.label,\r\n                data: metricData,\r\n                borderColor: getRandomPastelColor(),\r\n                fill: false\r\n              }\r\n            ]\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n    onMounted(() => {\r\n      fetchDbList(); // DB 목록 불러오기\r\n    });\r\n\r\n    return {\r\n      expandedDBType,\r\n      selectedDB,\r\n      selectedDBType,\r\n      oracleDBList,\r\n      tiberoDBList,\r\n      metrics,\r\n      tbmetrics,\r\n      dbData,\r\n      tbdbData,\r\n      randomMetrics,\r\n      oracleMetrics,\r\n      toggleDBType,\r\n      selectDB\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  height: 100vh;\r\n  width: 100%;\r\n}\r\n\r\n.db-tree {\r\n  width: 25%;\r\n  padding: 20px;\r\n  background-color: #f4f4f4;\r\n  border-right: 2px solid #ddd;\r\n  height: 100vh;\r\n  overflow-y: auto;\r\n}\r\n\r\n.chart-container {\r\n  flex-grow: 1;\r\n  padding: 20px;\r\n  background-color: #fff;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  min-height: 100%;\r\n}\r\n\r\n.charts-wrapper {\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n  padding-right: 10px;\r\n}\r\n\r\n.metric-chart {\r\n  width: 100%;\r\n  height: 300px; /* 차트 높이 */\r\n  margin-bottom: 20px;\r\n}\r\n\r\ncanvas {\r\n  width: 100%; /* 차트 영역에 맞춰 canvas 크기 설정 */\r\n  height: 100%; /* canvas 높이 설정 */\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .container {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .db-tree {\r\n    width: 100%;\r\n    height: auto;\r\n  }\r\n\r\n  .metric-chart {\r\n    width: 100%;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}