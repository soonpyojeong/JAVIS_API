{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nimport _imports_0 from '@/assets/DBMS_dashboard.png';\nconst _hoisted_1 = {\n  class: \"main-container\"\n};\nconst _hoisted_2 = {\n  class: \"tablespace-filter-container\"\n};\nconst _hoisted_3 = {\n  class: \"control-panel\"\n};\nconst _hoisted_4 = {\n  class: \"tablespace-table\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"error-message\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[6] || (_cache[6] = _createElementVNode(\"h1\", null, \"관제 시스템\", -1 /* HOISTED */)), _cache[7] || (_cache[7] = _createElementVNode(\"img\", {\n    src: _imports_0,\n    alt: \"DBMS Dashboard\",\n    class: \"dashboard-image\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" 테이블스페이스 85% 이상 테이블 리스트 \"), _createElementVNode(\"div\", _hoisted_2, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"임계치 85% 이상 테이블스페이스\", -1 /* HOISTED */)), _createCommentVNode(\" 시간 주기 설정 버튼 \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.startAutoUpdate(10)),\n    class: \"interval-button\"\n  }, \"10분 간격\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.startAutoUpdate(30)),\n    class: \"interval-button\"\n  }, \"30분 간격\"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => _ctx.startAutoUpdate(60)),\n    class: \"interval-button\"\n  }, \"1시간 간격\"), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => _ctx.stopAutoUpdate && _ctx.stopAutoUpdate(...args)),\n    class: \"interval-button\"\n  }, \"자동 갱신 끄기\")]), _createElementVNode(\"table\", _hoisted_4, [_cache[4] || (_cache[4] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"DB 이름\"), _createElementVNode(\"th\", null, \"Tablespace 이름\"), _createElementVNode(\"th\", null, \"TOTAL(MB)\"), _createElementVNode(\"th\", null, \"USED(MB)\"), _createElementVNode(\"th\", null, \"사용률 (%)\"), _createElementVNode(\"th\", null, \"FREE(MB)\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.filteredTablespaces, ts => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: ts.id.tsName\n    }, [_createElementVNode(\"td\", null, _toDisplayString(ts.dbName), 1 /* TEXT */), _createCommentVNode(\" DB 이름 \"), _createElementVNode(\"td\", null, _toDisplayString(ts.id.tsName), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(_ctx.formatNumber(ts.totalSize)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(_ctx.formatNumber(ts.usedSize)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(ts.usedRate) + \"%\", 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(_ctx.formatNumber(ts.freeSize)), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]), _createCommentVNode(\" 오류 메시지 \"), _ctx.errorMessage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, _toDisplayString(_ctx.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_imports_0","class","key","_createElementBlock","_hoisted_1","_createElementVNode","src","alt","_createCommentVNode","_hoisted_2","_hoisted_3","onClick","_cache","$event","_ctx","startAutoUpdate","args","stopAutoUpdate","_hoisted_4","_Fragment","_renderList","filteredTablespaces","ts","id","tsName","_toDisplayString","dbName","formatNumber","totalSize","usedSize","usedRate","freeSize","errorMessage","_hoisted_5"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\MainPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"main-container\">\r\n    <h1>관제 시스템</h1>\r\n    <img src=\"@/assets/DBMS_dashboard.png\" alt=\"DBMS Dashboard\" class=\"dashboard-image\" />\r\n\r\n    <!-- 테이블스페이스 85% 이상 테이블 리스트 -->\r\n    <div class=\"tablespace-filter-container\">\r\n      <h2>임계치 85% 이상 테이블스페이스</h2>\r\n       <!-- 시간 주기 설정 버튼 -->\r\n  <div class=\"control-panel\">\r\n    <button @click=\"startAutoUpdate(10)\" class=\"interval-button\">10분 간격</button>\r\n    <button @click=\"startAutoUpdate(30)\" class=\"interval-button\">30분 간격</button>\r\n    <button @click=\"startAutoUpdate(60)\" class=\"interval-button\">1시간 간격</button>\r\n    <button @click=\"stopAutoUpdate\" class=\"interval-button\">자동 갱신 끄기</button>\r\n  </div>\r\n      <table class=\"tablespace-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>DB 이름</th>\r\n            <th>Tablespace 이름</th>\r\n            <th>TOTAL(MB)</th>\r\n            <th>USED(MB)</th>\r\n            <th>사용률 (%)</th>\r\n            <th>FREE(MB)</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"ts in filteredTablespaces\" :key=\"ts.id.tsName\">\r\n            <td>{{ ts.dbName }}</td> <!-- DB 이름 -->\r\n            <td>{{ ts.id.tsName }}</td>\r\n            <td>{{ formatNumber(ts.totalSize) }}</td>\r\n            <td>{{ formatNumber(ts.usedSize) }}</td>\r\n            <td>{{ ts.usedRate }}%</td>\r\n            <td>{{ formatNumber(ts.freeSize) }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n\r\n\r\n    <!-- 오류 메시지 -->\r\n    <div v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</div>\r\n  </div>\r\n</template>\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedDb: null,\r\n      tbList: [],\r\n      tablespaces: [],\r\n      filteredTablespaces: [],\r\n      autoUpdateInterval: null, // 자동 갱신을 위한 인터벌 ID\r\n      errorMessage: '',\r\n      intervalTimes: [10, 30, 60], // 시간 단위\r\n      errorMessage: \"\"  // 초기값 설정\r\n    };\r\n  },\r\n  computed: {\r\n    filteredTablespaces() {\r\n      // 사용률이 85% 이상인 테이블스페이스만 필터링\r\n      return this.tablespaces.filter((ts) => ts.usedRate >= 85);\r\n    },\r\n  },\r\n  methods: {\r\n    formatNumber(number) {\r\n      return number.toLocaleString(); // 천 단위 구분 기호 추가\r\n    },\r\n    fetchDbList() {\r\n      axios\r\n        .get(\"/api/tb/list\")\r\n        .then((res) => {\r\n          this.tbList = res.data;\r\n          if (this.tbList.length > 0) {\r\n            this.selectedDb = this.tbList[0];\r\n            this.fetchTablespaces(this.selectedDb);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching DB list:\", error);\r\n        });\r\n    },\r\n    fetchTablespaces(dbName) {\r\n      axios\r\n        .get(`/api/tb/${dbName}/tablespaces`)\r\n        .then((res) => {\r\n          // DB 이름을 각 테이블스페이스에 추가\r\n          this.tablespaces = res.data.map(ts => ({\r\n            ...ts,\r\n            dbName: dbName, // dbName을 각 테이블스페이스에 추가\r\n          })) || [];\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"테이블스페이스 데이터 가져오기 실패:\", error);\r\n        });\r\n    },\r\n    startAutoUpdate(interval) {\r\n      if (this.autoUpdateInterval) {\r\n        clearInterval(this.autoUpdateInterval); // 기존 인터벌 정리\r\n      }\r\n\r\n      this.autoUpdateInterval = setInterval(() => {\r\n        this.fetchTablespaces(this.selectedDb); // 선택된 DB에 대해 주기적으로 조회\r\n      }, interval * 60 * 1000); // 밀리초로 변환\r\n    },\r\n    stopAutoUpdate() {\r\n      if (this.autoUpdateInterval) {\r\n        clearInterval(this.autoUpdateInterval); // 자동 갱신 중지\r\n        this.autoUpdateInterval = null;\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchDbList(); // 첫 로드 시 DB 목록과 테이블스페이스 데이터 로딩\r\n  },\r\n};\r\n<style scoped>\r\n.main-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100vh;\r\n}\r\n\r\n.dashboard-image {\r\n  margin: 10px 0;\r\n  width: 1024px; /* 고정된 가로 크기 */\r\n  height: 700px; /* 고정된 세로 크기 */\r\n  border: 2px solid #ccc; /* 테두리 추가 */\r\n  border-radius: 10px; /* 둥근 모서리 */\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* 그림자 효과 */\r\n}\r\n\r\n/* 테이블 스타일 */\r\n.tablespace-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-bottom: 40px;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n}\r\n\r\n.tablespace-table th, .tablespace-table td {\r\n  padding: 14px;\r\n  text-align: left;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.tablespace-table th {\r\n  background-color: #4caf50;\r\n  color: #fff;\r\n  font-weight: 600;\r\n}\r\n\r\n.tablespace-table td {\r\n  font-size: 14px;\r\n  color: #555;\r\n}\r\n\r\n.error-message {\r\n  color: red;\r\n  margin-top: 20px;\r\n}\r\n\r\n/* 버튼 스타일 */\r\n.control-panel {\r\n  margin: 20px;\r\n}\r\n\r\n.control-panel button {\r\n  margin: 5px;\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.control-panel button:hover {\r\n  background-color: #388e3c;\r\n}\r\n\r\n.control-panel button:disabled {\r\n  background-color: #bdbdbd;\r\n}\r\n\r\n.control-panel {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  margin-top: 20px;\r\n}\r\n\r\n.interval-button {\r\n  padding: 4px 8px;  /* 버튼 크기 줄이기 */\r\n  font-size: 1px;     /* 글자 크기 줄이기 */\r\n  margin: 1px;         /* 버튼 간 간격 */\r\n  border-radius: 4px;\r\n  border: 1px solid #ddd;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.interval-button:hover {\r\n  background-color: #388e3c;\r\n}\r\n\r\n\r\n</style>\r\n"],"mappings":";OAGSA,UAAiC;;EAFnCC,KAAK,EAAC;AAAgB;;EAKpBA,KAAK,EAAC;AAA6B;;EAGrCA,KAAK,EAAC;AAAe;;EAMfA,KAAK,EAAC;AAAkB;;EAfrCC,GAAA;EA0C6BD,KAAK,EAAC;;;uBAzCjCE,mBAAA,CA0CM,OA1CNC,UA0CM,G,0BAzCJC,mBAAA,CAAe,YAAX,QAAM,sB,0BACVA,mBAAA,CAAsF;IAAjFC,GAAiC,EAAjCN,UAAiC;IAACO,GAAG,EAAC,gBAAgB;IAACN,KAAK,EAAC;+BAElEO,mBAAA,4BAA+B,EAC/BH,mBAAA,CA+BM,OA/BNI,UA+BM,G,0BA9BJJ,mBAAA,CAA2B,YAAvB,oBAAkB,sBACrBG,mBAAA,iBAAoB,EACzBH,mBAAA,CAKM,OALNK,UAKM,GAJJL,mBAAA,CAA4E;IAAnEM,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,IAAA,CAAAC,eAAe;IAAMd,KAAK,EAAC;KAAkB,QAAM,GACnEI,mBAAA,CAA4E;IAAnEM,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,IAAA,CAAAC,eAAe;IAAMd,KAAK,EAAC;KAAkB,QAAM,GACnEI,mBAAA,CAA4E;IAAnEM,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,IAAA,CAAAC,eAAe;IAAMd,KAAK,EAAC;KAAkB,QAAM,GACnEI,mBAAA,CAAyE;IAAhEM,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAI,IAAA,KAAEF,IAAA,CAAAG,cAAA,IAAAH,IAAA,CAAAG,cAAA,IAAAD,IAAA,CAAc;IAAEf,KAAK,EAAC;KAAkB,UAAQ,E,GAE9DI,mBAAA,CAqBQ,SArBRa,UAqBQ,G,0BApBNb,mBAAA,CASQ,gBARNA,mBAAA,CAOK,aANHA,mBAAA,CAAc,YAAV,OAAK,GACTA,mBAAA,CAAsB,YAAlB,eAAa,GACjBA,mBAAA,CAAkB,YAAd,WAAS,GACbA,mBAAA,CAAiB,YAAb,UAAQ,GACZA,mBAAA,CAAgB,YAAZ,SAAO,GACXA,mBAAA,CAAiB,YAAb,UAAQ,E,wBAGhBA,mBAAA,CASQ,iB,kBARNF,mBAAA,CAOKgB,SAAA,QAlCfC,WAAA,CA2B2BN,IAAA,CAAAO,mBAAmB,EAAzBC,EAAE;yBAAbnB,mBAAA,CAOK;MAPkCD,GAAG,EAAEoB,EAAE,CAACC,EAAE,CAACC;QAChDnB,mBAAA,CAAwB,YAAAoB,gBAAA,CAAjBH,EAAE,CAACI,MAAM,kBAASlB,mBAAA,WAAc,EACvCH,mBAAA,CAA2B,YAAAoB,gBAAA,CAApBH,EAAE,CAACC,EAAE,CAACC,MAAM,kBACnBnB,mBAAA,CAAyC,YAAAoB,gBAAA,CAAlCX,IAAA,CAAAa,YAAY,CAACL,EAAE,CAACM,SAAS,mBAChCvB,mBAAA,CAAwC,YAAAoB,gBAAA,CAAjCX,IAAA,CAAAa,YAAY,CAACL,EAAE,CAACO,QAAQ,mBAC/BxB,mBAAA,CAA2B,YAAAoB,gBAAA,CAApBH,EAAE,CAACQ,QAAQ,IAAG,GAAC,iBACtBzB,mBAAA,CAAwC,YAAAoB,gBAAA,CAAjCX,IAAA,CAAAa,YAAY,CAACL,EAAE,CAACS,QAAQ,kB;wCAQvCvB,mBAAA,YAAe,EACJM,IAAA,CAAAkB,YAAY,I,cAAvB7B,mBAAA,CAAuE,OAAvE8B,UAAuE,EAAAR,gBAAA,CAArBX,IAAA,CAAAkB,YAAY,oBA1ClExB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}