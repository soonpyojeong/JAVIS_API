{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      selectedDb: null,\n      // 선택된 DB 이름\n      dbList: [],\n      // DB 목록\n      tablespaces: [],\n      // 테이블스페이스 데이터\n      searchQuery: \"\",\n      // 검색어\n      sortKey: \"dbName\",\n      // 정렬 키\n      sortOrder: 1 // 정렬 순서 (1: 오름차순, -1: 내림차순)\n    };\n  },\n  computed: {\n    filteredTablespaces() {\n      let result = this.tablespaces.filter(ts => ts.tsName && ts.tsName.toLowerCase().includes(this.searchQuery.toLowerCase()) // ts.tsName이 undefined가 아니면 검색\n      );\n      return result.sort((a, b) => {\n        const aValue = a[this.sortKey];\n        const bValue = b[this.sortKey];\n\n        // 숫자 비교 시 안전하게 처리\n        if (aValue === undefined) return 1 * this.sortOrder;\n        if (bValue === undefined) return -1 * this.sortOrder;\n        if (aValue < bValue) return -1 * this.sortOrder;\n        if (aValue > bValue) return 1 * this.sortOrder;\n        return 0;\n      });\n    }\n  },\n  methods: {\n    // DB 목록을 가져오는 함수\n    fetchDbList() {\n      axios.get(\"/api/tb/list\").then(res => {\n        console.log(\"서버 응답 데이터:\", res.data); // 응답 확인\n        if (res.data) {\n          this.tbList = res.data;\n          console.log(\"DB 목록:\", this.tbList); // DB 목록 확인\n          if (this.tbList.length > 0) {\n            this.selectedDb = this.tbList[0];\n            this.fetchTablespaces(this.selectedDb);\n          }\n        } else {\n          console.error(\"응답 데이터가 비어 있습니다.\");\n        }\n      }).catch(error => {\n        console.error(\"DB 목록을 가져오는 데 오류가 발생했습니다:\", error);\n      });\n    },\n    // 선택된 DB에 해당하는 테이블스페이스 데이터 가져오는 함수\n    fetchTablespaces(dbName) {\n      this.selectedDb = dbName; // 선택된 DB를 저장\n      this.tablespaces = []; // 이전 데이터를 초기화\n      axios.get(`/api/tb/${dbName}/tablespaces`).then(res => {\n        console.log(\"서버 응답 데이터:\", res.data); // 응답 데이터를 콘솔에 출력\n        if (Array.isArray(res.data) && res.data.length > 0) {\n          this.tablespaces = res.data;\n          console.log(\"테이블스페이스 데이터:\", this.tablespaces); // 받은 데이터 출력\n        } else {\n          console.log(\"받은 데이터가 비어있거나 배열 형식이 아닙니다.\");\n        }\n      }).catch(error => {\n        console.error(\"테이블스페이스 데이터 가져오기 실패:\", error);\n      });\n    },\n    // 테이블 데이터 정렬\n    sortData(key) {\n      if (this.sortKey === key) {\n        this.sortOrder *= -1; // 동일 키를 클릭하면 정렬 순서 변경\n      } else {\n        this.sortKey = key; // 새 키로 정렬\n        this.sortOrder = 1;\n      }\n    }\n  },\n  mounted() {\n    this.fetchDbList(); // 컴포넌트가 마운트되면 DB 목록을 가져옵니다.\n  }\n};","map":{"version":3,"names":["axios","data","selectedDb","dbList","tablespaces","searchQuery","sortKey","sortOrder","computed","filteredTablespaces","result","filter","ts","tsName","toLowerCase","includes","sort","a","b","aValue","bValue","undefined","methods","fetchDbList","get","then","res","console","log","tbList","length","fetchTablespaces","error","catch","dbName","Array","isArray","sortData","key","mounted"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\TablespacesList.vue"],"sourcesContent":["<!--TablespacesList.vue -->\r\n<template>\r\n  <div>\r\n    <h2>{{ selectedDb }} DB - 테이블스페이스 리스트</h2>\r\n\r\n    <!-- DB 목록을 보여주는 드롭다운 -->\r\n    <select v-model=\"selectedDb\" @change=\"fetchTablespaces(selectedDb)\">\r\n      <option v-for=\"(db, index) in dbList\" :key=\"index\" :value=\"db\">\r\n        {{ db }}\r\n      </option>\r\n    </select>\r\n\r\n    <!-- 검색 입력 필드 -->\r\n    <input\r\n      v-model=\"searchQuery\"\r\n      type=\"text\"\r\n      placeholder=\"테이블스페이스 검색\"\r\n      style=\"margin-bottom: 10px; padding: 5px; width: 300px;\"\r\n    />\r\n\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th @click=\"sortData('tsName')\">Tablespace 이름</th>\r\n          <th @click=\"sortData('totalSize')\">총 크기 (MB)</th>\r\n          <th @click=\"sortData('usedSize')\">사용량 (MB)</th>\r\n          <th @click=\"sortData('freeSize')\">남은 크기 (MB)</th>\r\n          <th @click=\"sortData('usedRate')\">사용률 (%)</th>\r\n          <th @click=\"sortData('chkDate')\">체크 날짜</th>\r\n          <th @click=\"sortData('chkTime')\">체크 시간</th>\r\n          <th @click=\"sortData('autoExtensCntFile')\">자동 확장 파일 수</th>\r\n          <th @click=\"sortData('maxMbBytes')\">최대 MB 바이트</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(ts, index) in filteredTablespaces\" :key=\"index\">\r\n          <td>{{ ts.tsName }}</td>\r\n          <td>{{ ts.totalSize }}</td>\r\n          <td>{{ ts.usedSize }}</td>\r\n          <td>{{ ts.freeSize }}</td>\r\n          <td>{{ ts.usedRate }}</td>\r\n          <td>{{ ts.chkDate }}</td>\r\n          <td>{{ ts.chkTime }}</td>\r\n          <td>{{ ts.autoExtensCntFile }}</td>\r\n          <td>{{ ts.maxMbBytes }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <p v-if=\"filteredTablespaces.length === 0\">검색 결과가 없습니다.</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedDb: null, // 선택된 DB 이름\r\n      dbList: [], // DB 목록\r\n      tablespaces: [], // 테이블스페이스 데이터\r\n      searchQuery: \"\", // 검색어\r\n      sortKey: \"dbName\", // 정렬 키\r\n      sortOrder: 1, // 정렬 순서 (1: 오름차순, -1: 내림차순)\r\n    };\r\n  },\r\n  computed: {\r\n    filteredTablespaces() {\r\n      let result = this.tablespaces.filter((ts) =>\r\n        ts.tsName && ts.tsName.toLowerCase().includes(this.searchQuery.toLowerCase()) // ts.tsName이 undefined가 아니면 검색\r\n      );\r\n      return result.sort((a, b) => {\r\n        const aValue = a[this.sortKey];\r\n        const bValue = b[this.sortKey];\r\n\r\n        // 숫자 비교 시 안전하게 처리\r\n        if (aValue === undefined) return 1 * this.sortOrder;\r\n        if (bValue === undefined) return -1 * this.sortOrder;\r\n\r\n        if (aValue < bValue) return -1 * this.sortOrder;\r\n        if (aValue > bValue) return 1 * this.sortOrder;\r\n        return 0;\r\n      });\r\n    }\r\n  },\r\n  methods: {\r\n    // DB 목록을 가져오는 함수\r\n    fetchDbList() {\r\n      axios\r\n        .get(\"/api/tb/list\")\r\n        .then((res) => {\r\n          console.log(\"서버 응답 데이터:\", res.data);  // 응답 확인\r\n          if (res.data) {\r\n            this.tbList = res.data;\r\n            console.log(\"DB 목록:\", this.tbList); // DB 목록 확인\r\n            if (this.tbList.length > 0) {\r\n              this.selectedDb = this.tbList[0];\r\n              this.fetchTablespaces(this.selectedDb);\r\n            }\r\n          } else {\r\n            console.error(\"응답 데이터가 비어 있습니다.\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"DB 목록을 가져오는 데 오류가 발생했습니다:\", error);\r\n        });\r\n    },\r\n\r\n    // 선택된 DB에 해당하는 테이블스페이스 데이터 가져오는 함수\r\n    fetchTablespaces(dbName) {\r\n            this.selectedDb = dbName; // 선택된 DB를 저장\r\n            this.tablespaces = []; // 이전 데이터를 초기화\r\n            axios.get(`/api/tb/${dbName}/tablespaces`)\r\n                .then((res) => {\r\n                    console.log(\"서버 응답 데이터:\", res.data); // 응답 데이터를 콘솔에 출력\r\n                    if (Array.isArray(res.data) && res.data.length > 0) {\r\n                        this.tablespaces = res.data;\r\n                        console.log(\"테이블스페이스 데이터:\", this.tablespaces); // 받은 데이터 출력\r\n                    } else {\r\n                        console.log(\"받은 데이터가 비어있거나 배열 형식이 아닙니다.\");\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.error(\"테이블스페이스 데이터 가져오기 실패:\", error);\r\n                });\r\n        },\r\n\r\n    // 테이블 데이터 정렬\r\n    sortData(key) {\r\n      if (this.sortKey === key) {\r\n        this.sortOrder *= -1; // 동일 키를 클릭하면 정렬 순서 변경\r\n      } else {\r\n        this.sortKey = key; // 새 키로 정렬\r\n        this.sortOrder = 1;\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchDbList(); // 컴포넌트가 마운트되면 DB 목록을 가져옵니다.\r\n  },\r\n};\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}