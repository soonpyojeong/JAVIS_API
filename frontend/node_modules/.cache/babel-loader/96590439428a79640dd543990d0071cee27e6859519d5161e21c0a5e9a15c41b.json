{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, nextTick, onMounted } from 'vue';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nexport default {\n  setup() {\n    const expandedDBType = ref({\n      oracle: false,\n      tibero: false\n    });\n    const selectedDB = ref(null);\n    const selectedDBType = ref(null);\n    const oracleDBList = ref([]);\n    const tiberoDBList = ref([]);\n    const metrics = ref([{\n      key: 'transaTions',\n      label: 'Transactions'\n    }, {\n      key: 'totalSess',\n      label: 'Total Sessions'\n    }, {\n      key: 'activeSess',\n      label: 'Active Sessions'\n    }, {\n      key: 'bufferpct',\n      label: 'Buffer Nowait Pct'\n    }, {\n      key: 'reDoPct',\n      label: 'Redo Nowait Pct'\n    }, {\n      key: 'buffHit',\n      label: 'Buffer Hit Pct'\n    }, {\n      key: 'latchHitPct',\n      label: 'Latch Hit Pct'\n    }, {\n      key: 'libHitPct',\n      label: 'Library Hit Pct'\n    }, {\n      key: 'softPct',\n      label: 'Soft Parse Pct'\n    }, {\n      key: 'executTopct',\n      label: 'Execute to Parse Pct'\n    }, {\n      key: 'parseCpuElapsd',\n      label: 'Parse CPU to Elapsed'\n    }, {\n      key: 'nonParseCpu',\n      label: 'Non Parse CPU'\n    }, {\n      key: 'inMemorySort',\n      label: 'In Memory Sort'\n    }, {\n      key: 'dailyArchCht',\n      label: 'Daily Archive Count'\n    }]);\n    const tbmetrics = ref([{\n      key: 'maxlSess',\n      label: 'Max Sessions'\n    }, {\n      key: 'totalSess',\n      label: 'Total Sessions'\n    }, {\n      key: 'runSess',\n      label: 'Active Sessions'\n    }, {\n      key: 'recSess',\n      label: 'Recover Session'\n    }, {\n      key: 'tsm',\n      label: 'TSM'\n    }, {\n      key: 'wpm',\n      label: 'WPM'\n    }, {\n      key: 'pgaSize',\n      label: 'PGA Size'\n    }, {\n      key: 'wpmPgadiff',\n      label: 'WPM PGA DIFF'\n    }, {\n      key: 'shardMem',\n      label: 'SHARED POOL MEMORY'\n    }, {\n      key: 'phyRead',\n      label: 'PHYSICAL READ'\n    }, {\n      key: 'logicRead',\n      label: 'LOGICAL READ'\n    }, {\n      key: 'buffHit',\n      label: 'BUFFER CACHE HIT'\n    }, {\n      key: 'libHit',\n      label: 'LIBRARY CACHE HIT'\n    }, {\n      key: 'dictHit',\n      label: 'DICTIONARY CACHE HIT'\n    }]);\n    const dbData = ref([]);\n    const tbdbData = ref([]);\n    const metricsToUse = ref(metrics.value);\n    const fixedMetrics = ['maxlSess', 'totalSess', 'runSess'];\n    const randomMetrics = ref([]);\n    const fixedOraMetrics = ['totalSess', 'activeSess'];\n    const oracleMetrics = ref([]);\n    const fetchDbList = async () => {\n      try {\n        const response = await axios.get('/api/dailychk/db-list');\n        const dbList = response.data;\n        oracleDBList.value = dbList.ORACLE || [];\n        tiberoDBList.value = dbList.TIBERO || [];\n      } catch (error) {\n        console.error(\"DB 목록을 불러오는 데 실패했습니다.\", error);\n      }\n    };\n    const toggleDBType = type => {\n      expandedDBType.value[type] = !expandedDBType.value[type];\n    };\n    const selectDB = async (instanceName, dbType) => {\n      selectedDB.value = instanceName;\n      selectedDBType.value = dbType;\n      if (dbType === 'oracle') {\n        await fetchDbData(instanceName);\n        metricsToUse.value = metrics.value;\n        oracleMetrics.value = [...metrics.value, ...fixedOraMetrics.map(key => ({\n          key,\n          label: key\n        }))];\n        randomMetrics.value = [];\n      } else if (dbType === 'tibero') {\n        await fetchTbDbData(instanceName);\n        metricsToUse.value = tbmetrics.value;\n        randomMetrics.value = tbmetrics.value.filter(metric => !fixedMetrics.includes(metric.key));\n        oracleMetrics.value = [];\n      }\n      nextTick(() => {\n        renderCharts();\n      });\n    };\n    const fetchDbData = async instanceName => {\n      try {\n        const response = await axios.get(`/api/dailychk/${instanceName}/oradata`);\n        dbData.value = response.data;\n      } catch (error) {\n        console.error(\"ORACLE DB 데이터를 불러오는 데 실패했습니다.\", error);\n      }\n    };\n    const fetchTbDbData = async instanceName => {\n      try {\n        const response = await axios.get(`/api/dailychk/${instanceName}/tbdata`);\n        tbdbData.value = response.data;\n      } catch (error) {\n        console.error(\"TIBERO DB 데이터를 불러오는 데 실패했습니다.\", error);\n      }\n    };\n    const renderOracleCharts = () => {\n      if (!dbData.value || dbData.value.length === 0) {\n        console.warn('ORACLE DB 데이터가 없습니다.');\n        return;\n      }\n      dbData.value.sort((a, b) => new Date(a.id.chkDate) - new Date(b.id.chkDate));\n      const labels = dbData.value.map(item => item.id.chkDate);\n      fixedOraMetrics.forEach(metricKey => {\n        const data = dbData.value.map(item => item[metricKey]);\n        const canvas = document.getElementById('oracleFixedChart');\n        const chartInstance = Chart.getChart(canvas);\n        if (chartInstance) {\n          chartInstance.destroy();\n        }\n        new Chart(canvas, {\n          type: 'line',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: `${metricKey} - Oracle`,\n              data: data,\n              borderColor: '#FF5733',\n              fill: false\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false\n          }\n        });\n      });\n      metrics.value.forEach(metric => {\n        const data = dbData.value.map(item => item[metric.key]);\n        const canvas = document.getElementById(`oracleChart_${metric.key}`);\n        const chartInstance = Chart.getChart(canvas);\n        if (chartInstance) {\n          chartInstance.destroy();\n        }\n        new Chart(canvas, {\n          type: 'line',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: `${metric.label} - Oracle`,\n              data: data,\n              borderColor: '#33FF57',\n              fill: false\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false\n          }\n        });\n      });\n    };\n    const renderTbCharts = () => {\n      if (!tbdbData.value || tbdbData.value.length === 0) {\n        console.warn('TIBERO DB 데이터가 없습니다.');\n        return;\n      }\n      tbdbData.value.sort((a, b) => new Date(a.id.chkDate) - new Date(b.id.chkDate));\n      const labels = tbdbData.value.map(item => item.id.chkDate);\n      fixedMetrics.forEach(metricKey => {\n        const data = tbdbData.value.map(item => item[metricKey]);\n        const canvas = document.getElementById('tiberoFixedChart');\n        const chartInstance = Chart.getChart(canvas);\n        if (chartInstance) {\n          chartInstance.destroy();\n        }\n        new Chart(canvas, {\n          type: 'line',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: `${metricKey} - Tibero`,\n              data: data,\n              borderColor: '#FF5733',\n              fill: false\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false\n          }\n        });\n      });\n      randomMetrics.value.forEach(metric => {\n        const data = tbdbData.value.map(item => item[metric.key]);\n        const canvas = document.getElementById(`chartRef_${metric.key}`);\n        const chartInstance = Chart.getChart(canvas);\n        if (chartInstance) {\n          chartInstance.destroy();\n        }\n        new Chart(canvas, {\n          type: 'line',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: `${metric.label} - Tibero`,\n              data: data,\n              borderColor: '#33FF57',\n              fill: false\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false\n          }\n        });\n      });\n    };\n    const renderCharts = () => {\n      if (selectedDBType.value === 'oracle') {\n        renderOracleCharts();\n      } else if (selectedDBType.value === 'tibero') {\n        renderTbCharts();\n      }\n    };\n    onMounted(() => {\n      fetchDbList();\n    });\n    return {\n      expandedDBType,\n      selectedDB,\n      selectedDBType,\n      oracleDBList,\n      tiberoDBList,\n      metrics,\n      tbmetrics,\n      dbData,\n      tbdbData,\n      randomMetrics,\n      oracleMetrics,\n      toggleDBType,\n      selectDB\n    };\n  }\n};","map":{"version":3,"names":["ref","nextTick","onMounted","axios","Chart","setup","expandedDBType","oracle","tibero","selectedDB","selectedDBType","oracleDBList","tiberoDBList","metrics","key","label","tbmetrics","dbData","tbdbData","metricsToUse","value","fixedMetrics","randomMetrics","fixedOraMetrics","oracleMetrics","fetchDbList","response","get","dbList","data","ORACLE","TIBERO","error","console","toggleDBType","type","selectDB","instanceName","dbType","fetchDbData","map","fetchTbDbData","filter","metric","includes","renderCharts","renderOracleCharts","length","warn","sort","a","b","Date","id","chkDate","labels","item","forEach","metricKey","canvas","document","getElementById","chartInstance","getChart","destroy","datasets","borderColor","fill","options","responsive","maintainAspectRatio","renderTbCharts"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DailyChk.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 왼쪽 DB 트리 구조 -->\r\n    <div class=\"db-tree\">\r\n      <ul>\r\n        <li>\r\n          <span @click=\"toggleDBType('oracle')\" class=\"tree-node oracle\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.oracle ? '-' : '+' }}</span> ORACLE\r\n          </span>\r\n          <ul v-if=\"expandedDBType.oracle\" class=\"sub-tree\">\r\n            <li v-for=\"instance in oracleDBList\" :key=\"instance\" class=\"db-item\" :class=\"{ selected: selectedDB === instance }\">\r\n              <span @click=\"selectDB(instance, 'oracle')\">\r\n                <span class=\"leaf-icon\"></span> {{ instance }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n        <li>\r\n          <span @click=\"toggleDBType('tibero')\" class=\"tree-node tibero\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.tibero ? '-' : '+' }}</span> TIBERO\r\n          </span>\r\n          <ul v-if=\"expandedDBType.tibero\" class=\"sub-tree\">\r\n            <li v-for=\"instance in tiberoDBList\" :key=\"instance\" class=\"db-item\" :class=\"{ selected: selectedDB === instance }\">\r\n              <span @click=\"selectDB(instance, 'tibero')\">\r\n                <span class=\"leaf-icon\"></span> {{ instance }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <!-- 차트 영역 -->\r\n    <div class=\"chart-container\">\r\n      <div class=\"charts-wrapper\">\r\n        <template v-if=\"selectedDB && selectedDBType === 'tibero'\">\r\n          <!-- TIBERO 고정 지표 차트 -->\r\n          <div class=\"metric-chart\">\r\n            <canvas id=\"tiberoFixedChart\"></canvas>\r\n          </div>\r\n          <!-- 나머지 랜덤 차트들 -->\r\n          <div v-for=\"(metric, index) in randomMetrics\" :key=\"index\" class=\"metric-chart\">\r\n            <canvas :id=\"'chartRef_' + index\"></canvas>\r\n          </div>\r\n        </template>\r\n\r\n        <template v-if=\"selectedDB && selectedDBType === 'oracle'\">\r\n          <!-- ORACLE 고정 지표 차트 -->\r\n          <div class=\"metric-chart\">\r\n            <canvas id=\"oracleFixedChart\"></canvas>\r\n          </div>\r\n          <!-- ORACLE 차트들 -->\r\n          <div v-for=\"(metric, index) in oracleMetrics\" :key=\"'oracle_' + index\" class=\"metric-chart\">\r\n            <canvas :id=\"'oracleChart_' + index\"></canvas>\r\n          </div>\r\n        </template>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { ref, nextTick, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  setup() {\r\n    const expandedDBType = ref({ oracle: false, tibero: false });\r\n    const selectedDB = ref(null);\r\n    const selectedDBType = ref(null);\r\n\r\n    const oracleDBList = ref([]);\r\n    const tiberoDBList = ref([]);\r\n\r\n    const metrics = ref([\r\n      { key: 'transaTions', label: 'Transactions' },\r\n      { key: 'totalSess', label: 'Total Sessions' },\r\n      { key: 'activeSess', label: 'Active Sessions' },\r\n      { key: 'bufferpct', label: 'Buffer Nowait Pct' },\r\n      { key: 'reDoPct', label: 'Redo Nowait Pct' },\r\n      { key: 'buffHit', label: 'Buffer Hit Pct' },\r\n      { key: 'latchHitPct', label: 'Latch Hit Pct' },\r\n      { key: 'libHitPct', label: 'Library Hit Pct' },\r\n      { key: 'softPct', label: 'Soft Parse Pct' },\r\n      { key: 'executTopct', label: 'Execute to Parse Pct' },\r\n      { key: 'parseCpuElapsd', label: 'Parse CPU to Elapsed' },\r\n      { key: 'nonParseCpu', label: 'Non Parse CPU' },\r\n      { key: 'inMemorySort', label: 'In Memory Sort' },\r\n      { key: 'dailyArchCht', label: 'Daily Archive Count' }\r\n    ]);\r\n\r\n    const tbmetrics = ref([\r\n      { key: 'maxlSess', label: 'Max Sessions' },\r\n      { key: 'totalSess', label: 'Total Sessions' },\r\n      { key: 'runSess', label: 'Active Sessions' },\r\n      { key: 'recSess', label: 'Recover Session' },\r\n      { key: 'tsm', label: 'TSM' },\r\n      { key: 'wpm', label: 'WPM' },\r\n      { key: 'pgaSize', label: 'PGA Size' },\r\n      { key: 'wpmPgadiff', label: 'WPM PGA DIFF' },\r\n      { key: 'shardMem', label: 'SHARED POOL MEMORY' },\r\n      { key: 'phyRead', label: 'PHYSICAL READ' },\r\n      { key: 'logicRead', label: 'LOGICAL READ' },\r\n      { key: 'buffHit', label: 'BUFFER CACHE HIT' },\r\n      { key: 'libHit', label: 'LIBRARY CACHE HIT' },\r\n      { key: 'dictHit', label: 'DICTIONARY CACHE HIT' }\r\n    ]);\r\n\r\n    const dbData = ref([]);\r\n    const tbdbData = ref([]);\r\n    const metricsToUse = ref(metrics.value);\r\n\r\n    const fixedMetrics = ['maxlSess', 'totalSess', 'runSess'];\r\n    const randomMetrics = ref([]);\r\n    const fixedOraMetrics = ['totalSess', 'activeSess'];\r\n    const oracleMetrics = ref([]);\r\n\r\n    const fetchDbList = async () => {\r\n      try {\r\n        const response = await axios.get('/api/dailychk/db-list');\r\n        const dbList = response.data;\r\n        oracleDBList.value = dbList.ORACLE || [];\r\n        tiberoDBList.value = dbList.TIBERO || [];\r\n      } catch (error) {\r\n        console.error(\"DB 목록을 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    const toggleDBType = (type) => {\r\n      expandedDBType.value[type] = !expandedDBType.value[type];\r\n    };\r\n\r\n    const selectDB = async (instanceName, dbType) => {\r\n      selectedDB.value = instanceName;\r\n      selectedDBType.value = dbType;\r\n\r\n      if (dbType === 'oracle') {\r\n        await fetchDbData(instanceName);\r\n        metricsToUse.value = metrics.value;\r\n        oracleMetrics.value = [...metrics.value, ...fixedOraMetrics.map(key => ({ key, label: key }))];\r\n        randomMetrics.value = [];\r\n      } else if (dbType === 'tibero') {\r\n        await fetchTbDbData(instanceName);\r\n        metricsToUse.value = tbmetrics.value;\r\n        randomMetrics.value = tbmetrics.value.filter(metric => !fixedMetrics.includes(metric.key));\r\n        oracleMetrics.value = [];\r\n      }\r\n\r\n      nextTick(() => {\r\n        renderCharts();\r\n      });\r\n    };\r\n\r\n    const fetchDbData = async (instanceName) => {\r\n      try {\r\n        const response = await axios.get(`/api/dailychk/${instanceName}/oradata`);\r\n        dbData.value = response.data;\r\n      } catch (error) {\r\n        console.error(\"ORACLE DB 데이터를 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    const fetchTbDbData = async (instanceName) => {\r\n      try {\r\n        const response = await axios.get(`/api/dailychk/${instanceName}/tbdata`);\r\n        tbdbData.value = response.data;\r\n      } catch (error) {\r\n        console.error(\"TIBERO DB 데이터를 불러오는 데 실패했습니다.\", error);\r\n      }\r\n    };\r\n\r\n    const renderOracleCharts = () => {\r\n      if (!dbData.value || dbData.value.length === 0) {\r\n        console.warn('ORACLE DB 데이터가 없습니다.');\r\n        return;\r\n      }\r\n\r\n      dbData.value.sort((a, b) => new Date(a.id.chkDate) - new Date(b.id.chkDate));\r\n      const labels = dbData.value.map(item => item.id.chkDate);\r\n\r\n      fixedOraMetrics.forEach((metricKey) => {\r\n        const data = dbData.value.map(item => item[metricKey]);\r\n        const canvas = document.getElementById('oracleFixedChart');\r\n        const chartInstance = Chart.getChart(canvas);\r\n        if (chartInstance) {\r\n          chartInstance.destroy();\r\n        }\r\n\r\n        new Chart(canvas, {\r\n          type: 'line',\r\n          data: {\r\n            labels: labels,\r\n            datasets: [{\r\n              label: `${metricKey} - Oracle`,\r\n              data: data,\r\n              borderColor: '#FF5733',\r\n              fill: false,\r\n            }],\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n          },\r\n        });\r\n      });\r\n\r\n      metrics.value.forEach((metric) => {\r\n        const data = dbData.value.map(item => item[metric.key]);\r\n        const canvas = document.getElementById(`oracleChart_${metric.key}`);\r\n        const chartInstance = Chart.getChart(canvas);\r\n        if (chartInstance) {\r\n          chartInstance.destroy();\r\n        }\r\n\r\n        new Chart(canvas, {\r\n          type: 'line',\r\n          data: {\r\n            labels: labels,\r\n            datasets: [{\r\n              label: `${metric.label} - Oracle`,\r\n              data: data,\r\n              borderColor: '#33FF57',\r\n              fill: false,\r\n            }],\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const renderTbCharts = () => {\r\n      if (!tbdbData.value || tbdbData.value.length === 0) {\r\n        console.warn('TIBERO DB 데이터가 없습니다.');\r\n        return;\r\n      }\r\n\r\n      tbdbData.value.sort((a, b) => new Date(a.id.chkDate) - new Date(b.id.chkDate));\r\n      const labels = tbdbData.value.map(item => item.id.chkDate);\r\n\r\n      fixedMetrics.forEach((metricKey) => {\r\n        const data = tbdbData.value.map(item => item[metricKey]);\r\n        const canvas = document.getElementById('tiberoFixedChart');\r\n        const chartInstance = Chart.getChart(canvas);\r\n        if (chartInstance) {\r\n          chartInstance.destroy();\r\n        }\r\n\r\n        new Chart(canvas, {\r\n          type: 'line',\r\n          data: {\r\n            labels: labels,\r\n            datasets: [{\r\n              label: `${metricKey} - Tibero`,\r\n              data: data,\r\n              borderColor: '#FF5733',\r\n              fill: false,\r\n            }],\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n          },\r\n        });\r\n      });\r\n\r\n      randomMetrics.value.forEach((metric) => {\r\n        const data = tbdbData.value.map(item => item[metric.key]);\r\n        const canvas = document.getElementById(`chartRef_${metric.key}`);\r\n        const chartInstance = Chart.getChart(canvas);\r\n        if (chartInstance) {\r\n          chartInstance.destroy();\r\n        }\r\n\r\n        new Chart(canvas, {\r\n          type: 'line',\r\n          data: {\r\n            labels: labels,\r\n            datasets: [{\r\n              label: `${metric.label} - Tibero`,\r\n              data: data,\r\n              borderColor: '#33FF57',\r\n              fill: false,\r\n            }],\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const renderCharts = () => {\r\n      if (selectedDBType.value === 'oracle') {\r\n        renderOracleCharts();\r\n      } else if (selectedDBType.value === 'tibero') {\r\n        renderTbCharts();\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      fetchDbList();\r\n    });\r\n\r\n    return {\r\n      expandedDBType,\r\n      selectedDB,\r\n      selectedDBType,\r\n      oracleDBList,\r\n      tiberoDBList,\r\n      metrics,\r\n      tbmetrics,\r\n      dbData,\r\n      tbdbData,\r\n      randomMetrics,\r\n      oracleMetrics,\r\n      toggleDBType,\r\n      selectDB,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n<style scoped>\r\n.container {\r\n  display: flex;\r\n  height: 100vh;\r\n  background-color: #f4f4f4;\r\n}\r\n\r\n.db-tree {\r\n  width: 200px;\r\n  background-color: #fff;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  height: 100vh;\r\n  overflow-y: auto;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.tree-node {\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  padding: 8px;\r\n  background-color: #f0f0f0;\r\n  border-radius: 5px;\r\n  margin: 5px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.tree-node:hover {\r\n  background-color: #e1e1e1;\r\n}\r\n\r\n.toggle-icon {\r\n  margin-right: 10px;\r\n}\r\n\r\n.sub-tree {\r\n  padding-left: 20px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.db-item {\r\n  padding: 5px;\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.db-item:hover {\r\n  background-color: #e9f1f7;\r\n}\r\n\r\n.chart-container {\r\n  flex-grow: 1;\r\n  width: 1000px;\r\n  padding: 20px;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  min-height: 100vh; /* 기존 height: 100vh; 대신 min-height로 변경 */\r\n}\r\n\r\n.charts-wrapper {\r\n  flex-grow: 1; /* 내부 요소가 차지할 공간을 자동으로 확장 */\r\n  overflow-y: auto;\r\n  padding-right: 10px;\r\n}\r\n\r\n.metric-chart {\r\n  width: 100%;\r\n  height: 300px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .container {\r\n    flex-direction: column;\r\n  }\r\n  .db-tree {\r\n    width: 100%;\r\n    height: auto;\r\n  }\r\n  .metric-chart {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n.db-item.selected {\r\n  background-color: #d1e7fd;  /* 선택된 DB에 파란색 배경 */\r\n  color: #1d70b8;  /* 텍스트 색상 강조 */\r\n  font-weight: bold;  /* 텍스트 강조 */\r\n}\r\n\r\n.db-item.selected:hover {\r\n  background-color: #a6c8f7;  /* 호버 시 배경 색상 변경 */\r\n}\r\n</style>\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}