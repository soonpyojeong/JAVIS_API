{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      selectedDb: null,\n      tbList: [],\n      tablespaces: [],\n      searchQuery: \"\",\n      sortKey: \"tsName\",\n      sortOrder: 1,\n      showModal: false,\n      // 모달 표시 여부\n      recentData: [],\n      // 최근 3개월 데이터\n      selectedTsName: \"\" // 선택된 테이블스페이스 이름\n    };\n  },\n  computed: {\n    filteredTablespaces() {\n      return this.tablespaces.filter(ts => ts.id.tsName.toLowerCase().includes(this.searchQuery.toLowerCase()));\n    }\n  },\n  methods: {\n    fetchDbList() {\n      axios.get(\"/api/tb/list\").then(res => {\n        this.tbList = res.data;\n        if (this.tbList.length > 0) {\n          this.selectedDb = this.tbList[0];\n          this.fetchTablespaces(this.selectedDb);\n        }\n      }).catch(error => {\n        console.error(\"Error fetching DB list:\", error);\n      });\n    },\n    fetchTablespaces(dbName) {\n      axios.get(`/api/tb/${dbName}/tablespaces`).then(res => {\n        this.tablespaces = res.data || [];\n      }).catch(error => {\n        console.error(\"테이블스페이스 데이터 가져오기 실패:\", error);\n      });\n    },\n    fetchRecentData(dbName, tsName) {\n      this.selectedTsName = tsName;\n      axios.get(`/api/tb/${dbName}/${tsName}/recent`).then(res => {\n        this.recentData = res.data || [];\n        this.showModal = true; // 모달 열기\n      }).catch(error => {\n        console.error(\"최근 데이터 가져오기 실패:\", error);\n      });\n    },\n    closeModal() {\n      this.showModal = false;\n    },\n    sortData(key) {\n      if (this.sortKey === key) {\n        this.sortOrder *= -1;\n      } else {\n        this.sortKey = key;\n        this.sortOrder = 1;\n      }\n    }\n  },\n  mounted() {\n    this.fetchDbList();\n  }\n};","map":{"version":3,"names":["axios","data","selectedDb","tbList","tablespaces","searchQuery","sortKey","sortOrder","showModal","recentData","selectedTsName","computed","filteredTablespaces","filter","ts","id","tsName","toLowerCase","includes","methods","fetchDbList","get","then","res","length","fetchTablespaces","catch","error","console","dbName","fetchRecentData","closeModal","sortData","key","mounted"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\TablespacesList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>{{ selectedDb }} DB - 테이블스페이스 리스트</h2>\r\n\r\n    <!-- DB 목록을 보여주는 드롭다운 -->\r\n    <select v-model=\"selectedDb\" @change=\"fetchTablespaces(selectedDb)\">\r\n      <option v-for=\"(db, index) in tbList\" :key=\"index\" :value=\"db\">\r\n        {{ db }}\r\n      </option>\r\n    </select>\r\n\r\n    <!-- 검색 입력 필드 -->\r\n    <input\r\n      v-model=\"searchQuery\"\r\n      type=\"text\"\r\n      placeholder=\"테이블스페이스 검색\"\r\n      style=\"margin-bottom: 10px; padding: 5px; width: 300px;\"\r\n    />\r\n\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th @click=\"sortData('id.tsName')\">Tablespace 이름</th>\r\n          <th @click=\"sortData('totalSize')\">총 크기 (MB)</th>\r\n          <th @click=\"sortData('usedSize')\">사용량 (MB)</th>\r\n          <th @click=\"sortData('freeSize')\">남은 크기 (MB)</th>\r\n          <th @click=\"sortData('usedRate')\">사용률 (%)</th>\r\n          <th @click=\"sortData('id.chkDate')\">체크 날짜</th>\r\n          <th @click=\"sortData('id.chkTime')\">체크 시간</th>\r\n          <th @click=\"sortData('autoExtensCntFile')\">자동 확장 파일 수</th>\r\n          <th @click=\"sortData('maxMbBytes')\">최대 MB 바이트</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr\r\n          v-for=\"(ts, index) in filteredTablespaces\"\r\n          :key=\"index\"\r\n          @click=\"fetchRecentData(ts.id.tsName)\"\r\n        >\r\n          <td>{{ ts.id.tsName }}</td>\r\n          <td>{{ ts.totalSize }}</td>\r\n          <td>{{ ts.usedSize }}</td>\r\n          <td>{{ ts.freeSize }}</td>\r\n          <td>{{ ts.usedRate }}</td>\r\n          <td>{{ ts.id.chkDate }}</td>\r\n          <td>{{ ts.id.chkTime }}</td>\r\n          <td>{{ ts.autoExtensCntFile }}</td>\r\n          <td>{{ ts.maxMbBytes }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <p v-if=\"filteredTablespaces.length === 0\">검색 결과가 없습니다.</p>\r\n\r\n    <!-- 모달 -->\r\n    <div v-if=\"showModal\" class=\"modal-overlay\" @click.self=\"closeModal\">\r\n      <div class=\"modal-content\">\r\n        <h3>최근 3개월 데이터: {{ selectedTsName }}</h3>\r\n        <button class=\"close-btn\" @click=\"closeModal\">닫기</button>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Tablespace 이름</th>\r\n              <th>총 크기 (MB)</th>\r\n              <th>사용량 (MB)</th>\r\n              <th>남은 크기 (MB)</th>\r\n              <th>사용률 (%)</th>\r\n              <th>체크 날짜</th>\r\n              <th>체크 시간</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"(data, index) in recentData\" :key=\"index\">\r\n              <td>{{ data.id.tsName }}</td>\r\n              <td>{{ data.totalSize }}</td>\r\n              <td>{{ data.usedSize }}</td>\r\n              <td>{{ data.freeSize }}</td>\r\n              <td>{{ data.usedRate }}</td>\r\n              <td>{{ data.id.chkDate }}</td>\r\n              <td>{{ data.id.chkTime }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedDb: null,\r\n      tbList: [],\r\n      tablespaces: [],\r\n      searchQuery: \"\",\r\n      sortKey: \"tsName\",\r\n      sortOrder: 1,\r\n      showModal: false, // 모달 표시 여부\r\n      recentData: [], // 최근 3개월 데이터\r\n      selectedTsName: \"\", // 선택된 테이블스페이스 이름\r\n    };\r\n  },\r\n  computed: {\r\n    filteredTablespaces() {\r\n      return this.tablespaces.filter((ts) =>\r\n        ts.id.tsName.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n      );\r\n    },\r\n  },\r\n  methods: {\r\n    fetchDbList() {\r\n      axios\r\n        .get(\"/api/tb/list\")\r\n        .then((res) => {\r\n          this.tbList = res.data;\r\n          if (this.tbList.length > 0) {\r\n            this.selectedDb = this.tbList[0];\r\n            this.fetchTablespaces(this.selectedDb);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching DB list:\", error);\r\n        });\r\n    },\r\n    fetchTablespaces(dbName) {\r\n      axios\r\n        .get(`/api/tb/${dbName}/tablespaces`)\r\n        .then((res) => {\r\n          this.tablespaces = res.data || [];\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"테이블스페이스 데이터 가져오기 실패:\", error);\r\n        });\r\n    },\r\n    fetchRecentData(dbName,tsName) {\r\n      this.selectedTsName = tsName;\r\n      axios\r\n        .get(`/api/tb/${dbName}/${tsName}/recent`)\r\n        .then((res) => {\r\n          this.recentData = res.data || [];\r\n          this.showModal = true; // 모달 열기\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"최근 데이터 가져오기 실패:\", error);\r\n        });\r\n    },\r\n    closeModal() {\r\n      this.showModal = false;\r\n    },\r\n    sortData(key) {\r\n      if (this.sortKey === key) {\r\n        this.sortOrder *= -1;\r\n      } else {\r\n        this.sortKey = key;\r\n        this.sortOrder = 1;\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchDbList();\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.modal-content {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  width: 80%;\r\n  max-width: 800px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.close-btn {\r\n  background: red;\r\n  color: white;\r\n  padding: 10px;\r\n  border: none;\r\n  cursor: pointer;\r\n  float: right;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-top: 10px;\r\n}\r\n\r\ntable th,\r\ntable td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\n\r\ntable th {\r\n  cursor: pointer;\r\n  background-color: #f4f4f4;\r\n}\r\n</style>\r\n\r\n"],"mappings":";;AA0FA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,IAAI;MAChBC,MAAM,EAAE,EAAE;MACVC,WAAW,EAAE,EAAE;MACfC,WAAW,EAAE,EAAE;MACfC,OAAO,EAAE,QAAQ;MACjBC,SAAS,EAAE,CAAC;MACZC,SAAS,EAAE,KAAK;MAAE;MAClBC,UAAU,EAAE,EAAE;MAAE;MAChBC,cAAc,EAAE,EAAE,CAAE;IACtB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,mBAAmBA,CAAA,EAAG;MACpB,OAAO,IAAI,CAACR,WAAW,CAACS,MAAM,CAAEC,EAAE,IAChCA,EAAE,CAACC,EAAE,CAACC,MAAM,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAACb,WAAW,CAACY,WAAW,CAAC,CAAC,CACpE,CAAC;IACH;EACF,CAAC;EACDE,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZpB,KAAI,CACDqB,GAAG,CAAC,cAAc,EAClBC,IAAI,CAAEC,GAAG,IAAK;QACb,IAAI,CAACpB,MAAK,GAAIoB,GAAG,CAACtB,IAAI;QACtB,IAAI,IAAI,CAACE,MAAM,CAACqB,MAAK,GAAI,CAAC,EAAE;UAC1B,IAAI,CAACtB,UAAS,GAAI,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;UAChC,IAAI,CAACsB,gBAAgB,CAAC,IAAI,CAACvB,UAAU,CAAC;QACxC;MACF,CAAC,EACAwB,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD,CAAC,CAAC;IACN,CAAC;IACDF,gBAAgBA,CAACI,MAAM,EAAE;MACvB7B,KAAI,CACDqB,GAAG,CAAC,WAAWQ,MAAM,cAAc,EACnCP,IAAI,CAAEC,GAAG,IAAK;QACb,IAAI,CAACnB,WAAU,GAAImB,GAAG,CAACtB,IAAG,IAAK,EAAE;MACnC,CAAC,EACAyB,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C,CAAC,CAAC;IACN,CAAC;IACDG,eAAeA,CAACD,MAAM,EAACb,MAAM,EAAE;MAC7B,IAAI,CAACN,cAAa,GAAIM,MAAM;MAC5BhB,KAAI,CACDqB,GAAG,CAAC,WAAWQ,MAAM,IAAIb,MAAM,SAAS,EACxCM,IAAI,CAAEC,GAAG,IAAK;QACb,IAAI,CAACd,UAAS,GAAIc,GAAG,CAACtB,IAAG,IAAK,EAAE;QAChC,IAAI,CAACO,SAAQ,GAAI,IAAI,EAAE;MACzB,CAAC,EACAkB,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACzC,CAAC,CAAC;IACN,CAAC;IACDI,UAAUA,CAAA,EAAG;MACX,IAAI,CAACvB,SAAQ,GAAI,KAAK;IACxB,CAAC;IACDwB,QAAQA,CAACC,GAAG,EAAE;MACZ,IAAI,IAAI,CAAC3B,OAAM,KAAM2B,GAAG,EAAE;QACxB,IAAI,CAAC1B,SAAQ,IAAK,CAAC,CAAC;MACtB,OAAO;QACL,IAAI,CAACD,OAAM,GAAI2B,GAAG;QAClB,IAAI,CAAC1B,SAAQ,GAAI,CAAC;MACpB;IACF;EACF,CAAC;EACD2B,OAAOA,CAAA,EAAG;IACR,IAAI,CAACd,WAAW,CAAC,CAAC;EACpB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}