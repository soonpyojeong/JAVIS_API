{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"db-tree\"\n};\nconst _hoisted_3 = {\n  class: \"toggle-icon\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"sub-tree\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  class: \"toggle-icon\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"sub-tree\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  key: 0,\n  class: \"chart-container\"\n};\nconst _hoisted_10 = {\n  class: \"charts-row\"\n};\nconst _hoisted_11 = [\"id\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" ÏôºÏ™Ω DB Ìä∏Î¶¨ Íµ¨Ï°∞ \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"ul\", null, [_createElementVNode(\"li\", null, [_createElementVNode(\"span\", {\n    onClick: _cache[0] || (_cache[0] = $event => $setup.toggleDBType('oracle')),\n    class: \"tree-node\"\n  }, [_createElementVNode(\"span\", _hoisted_3, _toDisplayString($setup.expandedDBType.oracle ? '-' : '+'), 1 /* TEXT */), _cache[2] || (_cache[2] = _createTextVNode(\" ORACLE \"))]), $setup.expandedDBType.oracle ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.oracleInstanceList, instance => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: instance,\n      class: \"db-item\"\n    }, [_createElementVNode(\"span\", {\n      onClick: $event => $setup.selectInstance(instance)\n    }, [_cache[3] || (_cache[3] = _createElementVNode(\"span\", {\n      class: \"leaf-icon\"\n    }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(instance), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"li\", null, [_createElementVNode(\"span\", {\n    onClick: _cache[1] || (_cache[1] = $event => $setup.toggleDBType('tibero')),\n    class: \"tree-node\"\n  }, [_createElementVNode(\"span\", _hoisted_6, _toDisplayString($setup.expandedDBType.tibero ? '-' : '+'), 1 /* TEXT */), _cache[4] || (_cache[4] = _createTextVNode(\" TIBERO \"))]), $setup.expandedDBType.tibero ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.tiberoInstanceList, instance => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: instance,\n      class: \"db-item\"\n    }, [_createElementVNode(\"span\", {\n      onClick: $event => $setup.selectInstance(instance)\n    }, [_cache[5] || (_cache[5] = _createElementVNode(\"span\", {\n      class: \"leaf-icon\"\n    }, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(instance), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_8)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)])])]), _createCommentVNode(\" Ï§ëÏïô Ï∞®Ìä∏ \"), $setup.selectedInstance ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_createElementVNode(\"h3\", null, _toDisplayString($setup.selectedInstance) + \" - Metrics\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.metrics, (metric, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: metric.key,\n      class: \"metric-chart\"\n    }, [_createElementVNode(\"canvas\", {\n      id: `chartRef_${index}`\n    }, null, 8 /* PROPS */, _hoisted_11)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","onClick","_cache","$event","$setup","toggleDBType","_hoisted_3","_toDisplayString","expandedDBType","oracle","_createTextVNode","_hoisted_4","_Fragment","_renderList","oracleInstanceList","instance","selectInstance","_hoisted_5","_hoisted_6","tibero","_hoisted_7","tiberoInstanceList","_hoisted_8","selectedInstance","_hoisted_9","_hoisted_10","metrics","metric","index","id","_hoisted_11"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\DailyChk.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- ÏôºÏ™Ω DB Ìä∏Î¶¨ Íµ¨Ï°∞ -->\r\n    <div class=\"db-tree\">\r\n      <ul>\r\n        <li>\r\n          <span @click=\"toggleDBType('oracle')\" class=\"tree-node\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.oracle ? '-' : '+' }}</span> ORACLE\r\n          </span>\r\n          <ul v-if=\"expandedDBType.oracle\" class=\"sub-tree\">\r\n            <li v-for=\"instance in oracleInstanceList\" :key=\"instance\" class=\"db-item\">\r\n              <span @click=\"selectInstance(instance)\">\r\n                <span class=\"leaf-icon\"></span> {{ instance }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n        <li>\r\n          <span @click=\"toggleDBType('tibero')\" class=\"tree-node\">\r\n            <span class=\"toggle-icon\">{{ expandedDBType.tibero ? '-' : '+' }}</span> TIBERO\r\n          </span>\r\n          <ul v-if=\"expandedDBType.tibero\" class=\"sub-tree\">\r\n            <li v-for=\"instance in tiberoInstanceList\" :key=\"instance\" class=\"db-item\">\r\n              <span @click=\"selectInstance(instance)\">\r\n                <span class=\"leaf-icon\"></span> {{ instance }}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <!-- Ï§ëÏïô Ï∞®Ìä∏ -->\r\n    <div class=\"chart-container\" v-if=\"selectedInstance\">\r\n      <h3>{{ selectedInstance }} - Metrics</h3>\r\n      <div class=\"charts-row\">\r\n        <div v-for=\"(metric, index) in metrics\" :key=\"metric.key\" class=\"metric-chart\">\r\n          <canvas :id=\"`chartRef_${index}`\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, nextTick, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  setup() {\r\n    const expandedDBType = ref({ oracle: false, tibero: false });\r\n    const selectedInstance = ref(null);\r\n    const oracleInstanceList = ref([]);\r\n    const tiberoInstanceList = ref([]);\r\n    const metrics = ref([\r\n      { key: 'transaTions', label: 'Transactions' },\r\n      { key: 'totalSess', label: 'Total Sessions' },\r\n      { key: 'activeSess', label: 'Active Sessions' },\r\n      { key: 'bufferpct', label: 'Buffer Nowait Pct' },\r\n      { key: 'reDoPct', label: 'Redo Nowait Pct' },\r\n      { key: 'buffHit', label: 'Buffer Hit Pct' },\r\n      { key: 'latchHitPct', label: 'Latch Hit Pct' },\r\n      { key: 'libHitPct', label: 'Library Hit Pct' },\r\n      { key: 'softPct', label: 'Soft Parse Pct' },\r\n      { key: 'executTopct', label: 'Execute to Parse Pct' },\r\n      { key: 'parseCpuElapsd', label: 'Parse CPU to Elapsed' },\r\n      { key: 'nonParseCpu', label: 'Non Parse CPU' },\r\n      { key: 'inMemorySort', label: 'In Memory Sort' },\r\n      { key: 'dailyArchCht', label: 'Daily Archive Count' }\r\n    ]);\r\n    const dbData = ref([]);\r\n\r\n    const fetchInstanceList = async () => {\r\n      try {\r\n        const response = await axios.get('/api/dailychk/instance-list');\r\n        const instanceList = response.data;\r\n        oracleInstanceList.value = instanceList.ORACLE || [];\r\n        tiberoInstanceList.value = instanceList.TIBERO || [];\r\n      } catch (error) {\r\n        console.error(\"Instance Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.\", error);\r\n      }\r\n    };\r\n\r\n    const toggleDBType = (type) => {\r\n      expandedDBType.value[type] = !expandedDBType.value[type];\r\n    };\r\n\r\n    const selectInstance = async (instanceName) => {\r\n      selectedInstance.value = instanceName;\r\n      await fetchInstanceData(instanceName);\r\n      nextTick(() => {\r\n        renderCharts();\r\n      });\r\n    };\r\n\r\n    const fetchInstanceData = async (instanceName) => {\r\n      console.log(\"Fetching data for Instance:\", instanceName);\r\n      if (!instanceName) {\r\n        console.error(\"Error: instanceName is undefined or empty!\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.get(`/api/dailychk/${instanceName}/oradata`);\r\n        dbData.value = response.data;\r\n        console.log(\"üìå API ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:\", response.data);\r\n      } catch (error) {\r\n        console.error(\"Instance Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.\", error);\r\n      }\r\n    };\r\n\r\n    const getRandomPastelColor = () => {\r\n      const hue = Math.floor(Math.random() * 360);\r\n      const saturation = 70 + Math.random() * 30;\r\n      const lightness = 70 + Math.random() * 10;\r\n      return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\r\n    };\r\n\r\n    const renderCharts = () => {\r\n      metrics.value.forEach((metric, index) => {\r\n        const canvas = document.getElementById(`chartRef_${index}`);\r\n        if (canvas) {\r\n          if (canvas.chart) {\r\n            canvas.chart.destroy();\r\n          }\r\n\r\n          const labels = dbData.value.map(item => item.id.chkDate);\r\n          const data = dbData.value.map(item => item[metric.key] !== undefined ? item[metric.key] : 0);\r\n\r\n          if (labels.length === 0 || data.length === 0) {\r\n            console.warn(`${metric.label} Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.`);\r\n            return;\r\n          }\r\n\r\n          const borderColor = getRandomPastelColor();\r\n\r\n          const chart = new Chart(canvas, {\r\n            type: 'line',\r\n            data: {\r\n              labels,\r\n              datasets: [\r\n                {\r\n                  label: `${metric.label}`,\r\n                  data: data,\r\n                  borderColor: borderColor,\r\n                  backgroundColor: borderColor + '50',\r\n                  fill: false,\r\n                  tension: 0.3,\r\n                }\r\n              ]\r\n            },\r\n            options: {\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              scales: {\r\n                x: { title: { display: true, text: 'Date' } },\r\n                y: { title: { display: true, text: metric.label } }\r\n              }\r\n            }\r\n          });\r\n\r\n          canvas.chart = chart;\r\n        }\r\n      });\r\n    };\r\n\r\n    onMounted(() => {\r\n      fetchInstanceList();\r\n    });\r\n\r\n    return {\r\n      expandedDBType,\r\n      selectedInstance,\r\n      oracleInstanceList,\r\n      tiberoInstanceList,\r\n      metrics,\r\n      dbData,\r\n      toggleDBType,\r\n      selectInstance\r\n    };\r\n  }\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}