{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      thresholds: [],\n      // 원본 데이터\n      searchQuery: \"\",\n      // 검색어 입력값\n      sortBy: \"\",\n      // 정렬 기준\n      sortOrder: \"asc\" // 정렬 방향 (오름차순 또는 내림차순)\n    };\n  },\n  computed: {\n    // 검색어에 따라 필터링된 데이터를 반환\n    filteredData() {\n      const query = this.searchQuery.toLowerCase();\n      const filtered = this.thresholds.filter(threshold => {\n        return threshold.dbName.toLowerCase().includes(query) || threshold.tablespaceName.toLowerCase().includes(query);\n      });\n\n      // 정렬된 데이터를 반환\n      return this.sortDataBy(filtered);\n    }\n  },\n  methods: {\n    // 숫자 1000단위로 구분\n    formatNumber(number) {\n      return number.toLocaleString(); // 천 단위 구분 기호 추가\n    },\n    // 편집 시작\n    startEditing(threshold) {\n      threshold.isEditing = true;\n      threshold.editedValue = threshold.thresMb; // 원본 값 저장\n    },\n    // 편집 취소\n    cancelEditing(threshold) {\n      threshold.isEditing = false;\n      threshold.editedValue = null;\n    },\n    // 임계치 업데이트\n    updateThreshold(threshold) {\n      const updatedThreshold = {\n        id: threshold.id,\n        // ID가 필요\n        thresMb: threshold.editedValue\n      };\n\n      // 서버에 PUT 요청\n      axios.put(`http://10.90.4.60:8080/api/threshold/${updatedThreshold.id}`, updatedThreshold).then(response => {\n        if (response.data) {\n          // 로컬 데이터 업데이트 및 편집 종료\n          threshold.thresMb = threshold.editedValue;\n          threshold.isEditing = false;\n        } else {\n          console.error(\"임계치 업데이트 실패\");\n        }\n      }).catch(error => {\n        console.error(\"임계치 업데이트 오류:\", error);\n      });\n    },\n    // 테이블 정렬\n    sortData(column) {\n      if (this.sortBy === column) {\n        // 이미 같은 컬럼을 클릭했으면 정렬 방향을 바꿔줌\n        this.sortOrder = this.sortOrder === \"asc\" ? \"desc\" : \"asc\";\n      } else {\n        this.sortBy = column;\n        this.sortOrder = \"asc\"; // 새 컬럼이 선택되면 오름차순으로 기본 설정\n      }\n    },\n    // 데이터 정렬 로직\n    sortDataBy(data) {\n      return data.sort((a, b) => {\n        let valA = a[this.sortBy];\n        let valB = b[this.sortBy];\n\n        // 숫자 정렬인 경우\n        if (typeof valA === \"number\" && typeof valB === \"number\") {\n          return this.sortOrder === \"asc\" ? valA - valB : valB - valA;\n        }\n\n        // 문자열 정렬인 경우\n        if (typeof valA === \"string\" && typeof valB === \"string\") {\n          return this.sortOrder === \"asc\" ? valA.localeCompare(valB) : valB.localeCompare(valA);\n        }\n        return 0;\n      });\n    }\n  },\n  mounted() {\n    // API 호출\n    axios.get(\"http://10.90.4.60:8080/api/threshold/all\").then(response => {\n      this.thresholds = response.data.map(threshold => ({\n        ...threshold,\n        isEditing: false,\n        // 각 데이터에 편집 상태 추가\n        editedValue: null // 편집 상태 초기화\n      }));\n    }).catch(error => {\n      console.error(\"API 호출 오류:\", error);\n    });\n  }\n};","map":{"version":3,"names":["axios","data","thresholds","searchQuery","sortBy","sortOrder","computed","filteredData","query","toLowerCase","filtered","filter","threshold","dbName","includes","tablespaceName","sortDataBy","methods","formatNumber","number","toLocaleString","startEditing","isEditing","editedValue","thresMb","cancelEditing","updateThreshold","updatedThreshold","id","put","then","response","console","error","catch","sortData","column","sort","a","b","valA","valB","localeCompare","mounted","get","map"],"sources":["D:\\JAVIS\\dongkukDBmon\\dongkukDBmon\\frontend\\src\\components\\ThresholdList.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mx-auto p-4\">\r\n    <h2 class=\"text-2xl font-bold text-orange-600 mb-4\">임계치 리스트</h2>\r\n\r\n    <!-- 검색 입력 필드 -->\r\n    <div class=\"mb-4\">\r\n      <input\r\n        v-model=\"searchQuery\"\r\n        type=\"text\"\r\n        placeholder=\"DB 이름 또는 Tablespace 검색\"\r\n        class=\"w-full p-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500\"\r\n      />\r\n    </div>\r\n\r\n    <!-- 테이블 -->\r\n    <div class=\"overflow-x-auto\">\r\n      <table class=\"min-w-full bg-white border border-gray-200 rounded-lg shadow-md\">\r\n        <thead class=\"bg-gray-50\">\r\n          <tr>\r\n            <th\r\n              class=\"px-4 py-2 text-left text-sm font-semibold text-gray-600 cursor-pointer hover:bg-gray-100\"\r\n              @click=\"sortData('dbName')\"\r\n            >\r\n              DB 이름\r\n            </th>\r\n            <th\r\n              class=\"px-4 py-2 text-left text-sm font-semibold text-gray-600 cursor-pointer hover:bg-gray-100\"\r\n              @click=\"sortData('tablespaceName')\"\r\n            >\r\n              Tablespace\r\n            </th>\r\n            <th\r\n              class=\"px-4 py-2 text-right text-sm font-semibold text-gray-600 cursor-pointer hover:bg-gray-100\"\r\n              @click=\"sortData('thresMb')\"\r\n            >\r\n              임계치 (MB)\r\n            </th>\r\n            <th\r\n              class=\"px-4 py-2 text-left text-sm font-semibold text-gray-600 cursor-pointer hover:bg-gray-100\"\r\n              @click=\"sortData('dbType')\"\r\n            >\r\n              DB 타입\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <!-- 필터링된 데이터를 표시 -->\r\n          <tr\r\n            v-for=\"(threshold, index) in filteredData\"\r\n            :key=\"index\"\r\n            class=\"hover:bg-gray-50\"\r\n          >\r\n            <td class=\"px-4 py-2 text-sm text-gray-700\">{{ threshold.dbName }}</td>\r\n            <td class=\"px-4 py-2 text-sm text-gray-700\">{{ threshold.tablespaceName }}</td>\r\n            <td class=\"px-4 py-2 text-sm text-gray-700 text-right\">\r\n              <!-- 클릭하면 인라인 편집 가능 -->\r\n              <span\r\n                v-if=\"!threshold.isEditing\"\r\n                @click=\"startEditing(threshold)\"\r\n                class=\"cursor-pointer text-orange-500 hover:underline\"\r\n              >\r\n                {{ formatNumber(threshold.thresMb) }}\r\n              </span>\r\n              <input\r\n                v-else\r\n                v-model=\"threshold.editedValue\"\r\n                @keyup.enter=\"updateThreshold(threshold)\"\r\n                @blur=\"cancelEditing(threshold)\"\r\n                type=\"number\"\r\n                class=\"w-20 p-1 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500\"\r\n              />\r\n            </td>\r\n            <td class=\"px-4 py-2 text-sm text-gray-700\">{{ threshold.dbType }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n    <p v-if=\"filteredData.length === 0\" class=\"mt-4 text-sm text-gray-500\">검색 결과가 없습니다.</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      thresholds: [], // 원본 데이터\r\n      searchQuery: \"\", // 검색어 입력값\r\n      sortBy: \"\", // 정렬 기준\r\n      sortOrder: \"asc\", // 정렬 방향 (오름차순 또는 내림차순)\r\n    };\r\n  },\r\n  computed: {\r\n    // 검색어에 따라 필터링된 데이터를 반환\r\n    filteredData() {\r\n      const query = this.searchQuery.toLowerCase();\r\n      const filtered = this.thresholds.filter((threshold) => {\r\n        return (\r\n          threshold.dbName.toLowerCase().includes(query) ||\r\n          threshold.tablespaceName.toLowerCase().includes(query)\r\n        );\r\n      });\r\n\r\n      // 정렬된 데이터를 반환\r\n      return this.sortDataBy(filtered);\r\n    },\r\n  },\r\n  methods: {\r\n    // 숫자 1000단위로 구분\r\n    formatNumber(number) {\r\n      return number.toLocaleString(); // 천 단위 구분 기호 추가\r\n    },\r\n\r\n    // 편집 시작\r\n    startEditing(threshold) {\r\n      threshold.isEditing = true;\r\n      threshold.editedValue = threshold.thresMb; // 원본 값 저장\r\n    },\r\n    // 편집 취소\r\n    cancelEditing(threshold) {\r\n      threshold.isEditing = false;\r\n      threshold.editedValue = null;\r\n    },\r\n    // 임계치 업데이트\r\n    updateThreshold(threshold) {\r\n      const updatedThreshold = {\r\n        id: threshold.id, // ID가 필요\r\n        thresMb: threshold.editedValue,\r\n      };\r\n\r\n      // 서버에 PUT 요청\r\n      axios\r\n        .put(`http://10.90.4.60:8080/api/threshold/${updatedThreshold.id}`, updatedThreshold)\r\n        .then((response) => {\r\n          if (response.data) {\r\n            // 로컬 데이터 업데이트 및 편집 종료\r\n            threshold.thresMb = threshold.editedValue;\r\n            threshold.isEditing = false;\r\n          } else {\r\n            console.error(\"임계치 업데이트 실패\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"임계치 업데이트 오류:\", error);\r\n        });\r\n    },\r\n\r\n    // 테이블 정렬\r\n    sortData(column) {\r\n      if (this.sortBy === column) {\r\n        // 이미 같은 컬럼을 클릭했으면 정렬 방향을 바꿔줌\r\n        this.sortOrder = this.sortOrder === \"asc\" ? \"desc\" : \"asc\";\r\n      } else {\r\n        this.sortBy = column;\r\n        this.sortOrder = \"asc\"; // 새 컬럼이 선택되면 오름차순으로 기본 설정\r\n      }\r\n    },\r\n\r\n    // 데이터 정렬 로직\r\n    sortDataBy(data) {\r\n      return data.sort((a, b) => {\r\n        let valA = a[this.sortBy];\r\n        let valB = b[this.sortBy];\r\n\r\n        // 숫자 정렬인 경우\r\n        if (typeof valA === \"number\" && typeof valB === \"number\") {\r\n          return this.sortOrder === \"asc\" ? valA - valB : valB - valA;\r\n        }\r\n\r\n        // 문자열 정렬인 경우\r\n        if (typeof valA === \"string\" && typeof valB === \"string\") {\r\n          return this.sortOrder === \"asc\"\r\n            ? valA.localeCompare(valB)\r\n            : valB.localeCompare(valA);\r\n        }\r\n\r\n        return 0;\r\n      });\r\n    },\r\n  },\r\n  mounted() {\r\n    // API 호출\r\n    axios\r\n      .get(\"http://10.90.4.60:8080/api/threshold/all\")\r\n      .then((response) => {\r\n        this.thresholds = response.data.map((threshold) => ({\r\n          ...threshold,\r\n          isEditing: false, // 각 데이터에 편집 상태 추가\r\n          editedValue: null, // 편집 상태 초기화\r\n        }));\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"API 호출 오류:\", error);\r\n      });\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 공통 스타일 */\r\n.container {\r\n  font-family: 'Arial', sans-serif;\r\n  padding: 20px;\r\n  max-width: 1370px;\r\n  margin: 0 auto;\r\n  background: #ffffff; /* 흰색 배경 */\r\n  border-radius: 10px;\r\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1); /* 그림자 강조 */\r\n}\r\n\r\nh2 {\r\n  font-size: 1.5rem;\r\n  font-weight: 600;\r\n  color: #2980b9;\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\ninput:focus {\r\n  outline: none;\r\n  border-color: #2980b9;\r\n  box-shadow: 0 0 6px rgba(41, 128, 185, 0.5);\r\n}\r\n\r\n/* 검색 필드 */\r\ninput {\r\n  font-size: 1rem;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  padding: 10px 14px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\ninput:focus {\r\n  outline: none;\r\n  border-color: #2980b9;\r\n  box-shadow: 0 0 6px rgba(41, 128, 185, 0.5);\r\n}\r\n\r\n/* 테이블 */\r\ntable {\r\n  border-collapse: collapse;\r\n  width: 100%;\r\n  margin-top: 10px;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nth,\r\ntd {\r\n  padding: 14px;\r\n  border: 1px solid #ddd;\r\n  text-align: left;\r\n}\r\n\r\nth {\r\n  background-color: #d6eaf8;\r\n  color: #2980b9;\r\n  font-weight: 600;\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n  text-align: center; /* 가운데 정렬 */\r\n}\r\n\r\nth:hover {\r\n  background-color: #aed6f1;\r\n}\r\n\r\ntd {\r\n  font-size: 0.5rem;\r\n  color: #555;\r\n}\r\n\r\ntd:hover {\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n/* 임계치 필드 스타일 */\r\ntd span {\r\n  cursor: pointer;\r\n  color: #2980b9;\r\n}\r\n\r\ntd span:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n/* 숫자 입력 필드 스타일 */\r\ninput[type=\"number\"] {\r\n  padding: 6px;\r\n  font-size: 0.9rem;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n}\r\n\r\ninput[type=\"number\"]:focus {\r\n  border-color: #2980b9;\r\n  box-shadow: 0 0 4px rgba(41, 128, 185, 0.5);\r\n}\r\n\r\n/* 버튼 스타일 (푸른색 계열) */\r\nbutton {\r\n  padding: 12px 20px;\r\n  font-size: 16px;\r\n  border-radius: 8px;\r\n  background-color: #2980b9;\r\n  color: #fff;\r\n  border: none;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease, transform 0.3s ease;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #1f6fa3;\r\n  transform: translateY(-2px);\r\n}\r\n\r\nbutton:focus {\r\n  outline: none;\r\n  box-shadow: 0 0 8px rgba(41, 128, 185, 0.6);\r\n}\r\n\r\n/* 반응형 스타일 */\r\n@media (max-width: 768px) {\r\n  .container {\r\n    padding: 16px;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 1.25rem;\r\n  }\r\n\r\n  table {\r\n    font-size: 0.85rem;\r\n  }\r\n\r\n  th,\r\n  td {\r\n    padding: 10px;\r\n  }\r\n\r\n  input {\r\n    font-size: 0.9rem;\r\n  }\r\n\r\n  button {\r\n    font-size: 14px;\r\n    padding: 10px 18px;\r\n  }\r\n}\r\n\r\ntable td:nth-child(3),\r\ntable th:nth-child(3) {\r\n  text-align: right; /* 오른쪽 정렬 */\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}